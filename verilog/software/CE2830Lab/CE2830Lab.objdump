
CE2830Lab.elf:     file format elf32-littlenios2
CE2830Lab.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00006c1c memsz 0x00006c1c flags r-x
    LOAD off    0x00007c3c vaddr 0x00006c3c paddr 0x000086f4 align 2**12
         filesz 0x00001ab8 memsz 0x00001ab8 flags rw-
    LOAD off    0x0000a1ac vaddr 0x0000a1ac paddr 0x0000a1ac align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006890  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000017c  00006ac0  00006ac0  00007ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ab8  00006c3c  000086f4  00007c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  0000a1ac  0000a1ac  0000a1ac  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0000a310  0000a310  000096f4  2**0
                  CONTENTS
  7 .Onchip_SRAM  00000000  08000000  08000000  000096f4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000096f4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b90  00000000  00000000  00009718  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000199a5  00000000  00000000  0000a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006e25  00000000  00000000  00023c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000076bb  00000000  00000000  0002aa72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001ad8  00000000  00000000  00032130  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002ee5  00000000  00000000  00033c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00005dd9  00000000  00000000  00036aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0003c8c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000848  00000000  00000000  0003c8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003fc72  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0003fc75  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003fc7a  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003fc7b  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003fc7c  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003fc80  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0003fc84  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0003fc88  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0003fc91  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0003fc9a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  0003fca3  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005c  00000000  00000000  0003fcb2  2**0
                  CONTENTS, READONLY
 30 .jdi          00006bd6  00000000  00000000  0003fd0e  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000b9313  00000000  00000000  000468e4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00006ac0 l    d  .rodata	00000000 .rodata
00006c3c l    d  .rwdata	00000000 .rwdata
0000a1ac l    d  .bss	00000000 .bss
0000a310 l    d  .SDRAM	00000000 .SDRAM
08000000 l    d  .Onchip_SRAM	00000000 .Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CE2830Lab_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ServoAPI.c
00000000 l    df *ABS*	00000000 SevenSegs.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 findfp.c
000009b8 l     F .text	00000008 __fp_unlock
000009cc l     F .text	0000019c __sinit.part.1
00000b68 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
00006c3c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000035e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000036f8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00003724 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00003a0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003af4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003be0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00003dbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000086dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
000041d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004310 l     F .text	00000034 alt_dev_reg
00007610 l     O .rwdata	00001060 JTAG_UART
00008670 l     O .rwdata	0000003c JoyStick_ADC
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00004618 l     F .text	0000020c altera_avalon_jtag_uart_irq
00004824 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004e5c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_modular_adc.c
00004f50 l     F .text	000000a8 alt_adc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00005608 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005af8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00005c58 l     F .text	0000003c alt_get_errno
00005c94 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000a1e4 g     O .bss	00000004 alt_instruction_exception_handler
000051f0 g     F .text	00000050 adc_stop
00003484 g     F .text	00000054 _isatty_r
00003cf8 g     F .text	0000007c alt_main
000003a4 g     F .text	00000098 ASCII_to_7Seg
00000780 g     F .text	000000c0 _puts_r
0000a210 g     O .bss	00000100 alt_irq
000031ac g     F .text	00000060 _lseek_r
000086f4 g       *ABS*	00000000 __flash_rwdata_start
000013b8 g     F .text	0000005c _gettimeofday_r
0000a310 g       *ABS*	00000000 __alt_heap_start
00002760 g     F .text	0000005c __sseek
00000d18 g     F .text	00000010 __sinit
00000b70 g     F .text	00000078 __sfmoreglue
00003d98 g     F .text	00000024 __malloc_unlock
00001e4c g     F .text	0000015c memmove
00000310 g     F .text	00000034 servo_pan
00000d00 g     F .text	00000018 _cleanup
00005edc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
000053b4 g     F .text	00000048 adc_interrupt_disable
00000020 g       *ABS*	00000000 __flash_exceptions_start
00003428 g     F .text	0000005c _fstat_r
0000a1ac g     O .bss	00000004 errno
000026dc g     F .text	00000008 __seofread
000050a4 g     F .text	00000074 altera_modular_adc_init
0000a1d0 g     O .bss	00000004 alt_argv
000106ac g       *ABS*	00000000 _gp
00007490 g     O .rwdata	00000180 alt_fd_list
000057a8 g     F .text	00000090 alt_find_dev
00001d04 g     F .text	00000148 memcpy
000009c0 g     F .text	0000000c _cleanup_r
000052b8 g     F .text	0000003c adc_set_mode_run_continuously
00005bdc g     F .text	0000007c alt_io_redirect
00006ac0 g       *ABS*	00000000 __DTOR_END__
00000840 g     F .text	00000014 puts
000060cc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00004a1c g     F .text	0000021c altera_avalon_jtag_uart_read
0000069c g     F .text	00000064 .hidden __udivsi3
00003a48 g     F .text	000000ac isatty
0000a1bc g     O .bss	00000008 alt_timezone
0000a1b8 g     O .bss	00000004 __malloc_top_pad
00000d68 g     F .text	000004c8 __sfvwrite_r
00002634 g     F .text	00000054 _sbrk_r
000033c8 g     F .text	00000060 _read_r
000086e8 g     O .rwdata	00000008 altera_modular_adc_list
000086d4 g     O .rwdata	00000004 alt_max_fd
000029cc g     F .text	000000f0 _fclose_r
00002d48 g     F .text	00000030 fflush
0000a1b4 g     O .bss	00000004 __malloc_max_sbrked_mem
000064c8 g     F .text	000005c4 .hidden __umoddi3
00003c1c g     F .text	000000dc lseek
000086b4 g     O .rwdata	00000004 _global_impure_ptr
000020d0 g     F .text	00000564 _realloc_r
0000a310 g       *ABS*	00000000 __bss_end
00005a08 g     F .text	000000f0 alt_iic_isr_register
000040cc g     F .text	00000108 alt_tick
00005480 g     F .text	0000003c adc_wait_for_interrupt
00000d38 g     F .text	00000018 __fp_lock_all
000059bc g     F .text	0000004c alt_ic_irq_enabled
00004030 g     F .text	0000009c alt_alarm_stop
0000a1e0 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00007468 g     O .rwdata	00000028 alt_dev_null
00005278 g     F .text	00000040 adc_set_mode_run_once
000055e8 g     F .text	00000020 alt_dcache_flush_all
000086f4 g       *ABS*	00000000 __ram_rwdata_end
000086cc g     O .rwdata	00000008 alt_dev_list
00004210 g     F .text	00000100 write
00006c3c g       *ABS*	00000000 __ram_rodata_end
00003760 g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000004c4 g     F .text	00000054 delay_1ms
00005240 g     F .text	00000038 adc_start
00000700 g     F .text	00000058 .hidden __umodsi3
0000a310 g       *ABS*	00000000 end
0000046c g     F .text	00000058 delay_1s
000086ac g     O .rwdata	00000004 HEX3dt0
00004558 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00006ac0 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00004ed4 g     F .text	0000007c alt_avalon_timer_sc_init
00004c38 g     F .text	00000224 altera_avalon_jtag_uart_write
00000d28 g     F .text	00000004 __sfp_lock_acquire
00001c20 g     F .text	000000e4 memchr
00002e9c g     F .text	00000310 _free_r
00006348 g     F .text	00000180 __call_exitprocs
000086bc g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
0000a1d8 g     O .bss	00000004 _alt_tick_rate
0000086c g     F .text	00000064 rand
00000344 g     F .text	00000060 servo_randomMovement
0000a1dc g     O .bss	00000004 _alt_nticks
00003df8 g     F .text	00000104 read
0000437c g     F .text	00000078 alt_sys_init
00006230 g     F .text	00000118 __register_exitproc
000048c4 g     F .text	00000068 altera_avalon_jtag_uart_close
00000758 g     F .text	00000028 .hidden __mulsi3
00006c3c g       *ABS*	00000000 __ram_rwdata_start
00006ac0 g       *ABS*	00000000 __ram_rodata_start
0000a1e8 g     O .bss	00000028 __malloc_current_mallinfo
000002d8 g     F .text	00000038 servo_center
000043f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00006008 g     F .text	000000c4 alt_get_fd
00002978 g     F .text	00000054 _close_r
000061b4 g     F .text	0000007c memcmp
000044b4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000a310 g       *ABS*	00000000 __alt_stack_base
00004504 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002824 g     F .text	00000154 __swsetup_r
00005370 g     F .text	00000044 adc_interrupt_enable
00000be8 g     F .text	00000118 __sfp
00007060 g     O .rwdata	00000408 __malloc_av_
00000d34 g     F .text	00000004 __sinit_lock_release
00002688 g     F .text	00000054 __sread
00005f00 g     F .text	00000108 alt_find_file
00005644 g     F .text	000000a4 alt_dev_llist_insert
00003d74 g     F .text	00000024 __malloc_lock
00003f80 g     F .text	000000b0 sbrk
00002cec g     F .text	0000005c _fflush_r
00003818 g     F .text	000001f4 gettimeofday
0000a1ac g       *ABS*	00000000 __bss_start
00001fa8 g     F .text	00000128 memset
000086b0 g     O .rwdata	00000004 HEX4ut5
00000518 g     F .text	0000008c main
0000a1d4 g     O .bss	00000004 alt_envp
0000a1b0 g     O .bss	00000004 __malloc_max_total_mem
00004454 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00000854 g     F .text	00000018 srand
00004ff8 g     F .text	000000ac alt_adc_word_read
000027bc g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00002abc g     F .text	00000014 fclose
00001414 g     F .text	0000080c _malloc_r
00000968 g     F .text	00000050 time
000086d8 g     O .rwdata	00000004 alt_errno
00001230 g     F .text	000000c4 _fwalk
0000026c g     F .text	0000006c servo_setAngle
000005a4 g     F .text	00000084 .hidden __divsi3
00002d78 g     F .text	00000124 _malloc_trim_r
00006ac0 g       *ABS*	00000000 __CTOR_END__
00006ac0 g       *ABS*	00000000 __flash_rodata_start
00006ac0 g       *ABS*	00000000 __DTOR_LIST__
00004344 g     F .text	00000038 alt_irq_init
00003efc g     F .text	00000084 alt_release_fd
00006b3c g     O .rodata	00000100 .hidden __clz_tab
00006168 g     F .text	00000014 atexit
000027c4 g     F .text	00000060 _write_r
000086b8 g     O .rwdata	00000004 _impure_ptr
0000a1cc g     O .bss	00000004 alt_argc
00002ad0 g     F .text	0000021c __sflush_r
00005748 g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00000d50 g     F .text	00000018 __fp_unlock_all
000086c4 g     O .rwdata	00000008 alt_fs_list
0000a1c4 g     O .bss	00000008 alt_resettime
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005858 g     F .text	00000050 alt_ic_isr_register
000086f4 g       *ABS*	00000000 _edata
0000a310 g       *ABS*	00000000 _end
00005440 g     F .text	00000040 adc_interrupt_asserted
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000492c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08000000 g       *ABS*	00000000 __alt_mem_Onchip_SRAM
00005930 g     F .text	0000008c alt_ic_irq_disable
000026e4 g     F .text	0000007c __swrite
000086c0 g     O .rwdata	00000004 __malloc_trim_threshold
000053fc g     F .text	00000044 adc_clear_interrupt_status
0000617c g     F .text	00000038 exit
000012f4 g     F .text	000000c4 _fwalk_reent
00000628 g     F .text	00000074 .hidden __modsi3
0000043c g     F .text	00000030 clearSevenSegs
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000d2c g     F .text	00000004 __sfp_lock_release
000051b0 g     F .text	00000040 altera_modular_adc_open
00006a8c g     F .text	00000034 _exit
000054bc g     F .text	0000012c alt_alarm_start
000034d8 g     F .text	0000010c .hidden __muldi3
0000320c g     F .text	000001bc __smakebuf_r
000008d0 g     F .text	00000098 strlen
00005d80 g     F .text	0000015c open
000052f4 g     F .text	0000007c adc_recalibrate
00005838 g     F .text	00000020 alt_icache_flush_all
000086f0 g     O .rwdata	00000004 alt_priority_mask
000058a8 g     F .text	00000088 alt_ic_irq_enable
000086e0 g     O .rwdata	00000008 alt_alarm_list
000056e8 g     F .text	00000060 _do_ctors
00003620 g     F .text	000000d8 close
00003b5c g     F .text	00000084 alt_load
00005118 g     F .text	00000098 alt_adc_register_callback
00000d30 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10a88404 	addi	r2,r2,-24048
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10a88404 	addi	r2,r2,-24048
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_Onchip_SRAM+0xf800012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_Onchip_SRAM+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6ce17 	ldw	r2,-25800(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6ce17 	ldw	r2,-25800(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d681ab14 	ori	gp,gp,1708
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     244:	10a86b14 	ori	r2,r2,41388

    movhi r3, %hi(__bss_end)
     248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     24c:	18e8c414 	ori	r3,r3,41744

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_mem_Onchip_SRAM+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	0003b5c0 	call	3b5c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	0003cf80 	call	3cf8 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_mem_Onchip_SRAM+0xf8000268>

0000026c <servo_setAngle>:
 */

#include "ServoAPI.h"


bool servo_setAngle(SERVO servo, alt_8 angle){
     26c:	defffc04 	addi	sp,sp,-16
     270:	df000315 	stw	fp,12(sp)
     274:	df000304 	addi	fp,sp,12
     278:	e13ffe15 	stw	r4,-8(fp)
     27c:	2805883a 	mov	r2,r5
     280:	e0bfff05 	stb	r2,-4(fp)
	volatile alt_u32* addr = (alt_u32*) servo;
     284:	e0bffe17 	ldw	r2,-8(fp)
     288:	e0bffd15 	stw	r2,-12(fp)
	if((angle > 45) || (angle < -45)){
     28c:	e0bfff07 	ldb	r2,-4(fp)
     290:	10800b88 	cmpgei	r2,r2,46
     294:	1000031e 	bne	r2,zero,2a4 <servo_setAngle+0x38>
     298:	e0bfff07 	ldb	r2,-4(fp)
     29c:	10bff4c8 	cmpgei	r2,r2,-45
     2a0:	1000021e 	bne	r2,zero,2ac <servo_setAngle+0x40>
		return false;
     2a4:	0005883a 	mov	r2,zero
     2a8:	00000706 	br	2c8 <servo_setAngle+0x5c>
	} else {
		*addr = ((alt_u8) (((100/45)*angle)+100));
     2ac:	e0bfff03 	ldbu	r2,-4(fp)
     2b0:	10800c84 	addi	r2,r2,50
     2b4:	1085883a 	add	r2,r2,r2
     2b8:	10c03fcc 	andi	r3,r2,255
     2bc:	e0bffd17 	ldw	r2,-12(fp)
     2c0:	10c00015 	stw	r3,0(r2)
		return true;
     2c4:	00800044 	movi	r2,1
	}
}
     2c8:	e037883a 	mov	sp,fp
     2cc:	df000017 	ldw	fp,0(sp)
     2d0:	dec00104 	addi	sp,sp,4
     2d4:	f800283a 	ret

000002d8 <servo_center>:

bool servo_center(SERVO servo){
     2d8:	defffd04 	addi	sp,sp,-12
     2dc:	df000215 	stw	fp,8(sp)
     2e0:	df000204 	addi	fp,sp,8
     2e4:	e13fff15 	stw	r4,-4(fp)
	volatile alt_u32* addr = (alt_u32*) servo;
     2e8:	e0bfff17 	ldw	r2,-4(fp)
     2ec:	e0bffe15 	stw	r2,-8(fp)
	*addr = 100;
     2f0:	e0bffe17 	ldw	r2,-8(fp)
     2f4:	00c01904 	movi	r3,100
     2f8:	10c00015 	stw	r3,0(r2)
	return true;
     2fc:	00800044 	movi	r2,1
}
     300:	e037883a 	mov	sp,fp
     304:	df000017 	ldw	fp,0(sp)
     308:	dec00104 	addi	sp,sp,4
     30c:	f800283a 	ret

00000310 <servo_pan>:

bool servo_pan(SERVO servo, alt_u32 speed, float cycles){
     310:	defffb04 	addi	sp,sp,-20
     314:	df000415 	stw	fp,16(sp)
     318:	df000404 	addi	fp,sp,16
     31c:	e13ffd15 	stw	r4,-12(fp)
     320:	e17ffe15 	stw	r5,-8(fp)
     324:	e1bfff15 	stw	r6,-4(fp)
	volatile alt_u32* addr = (alt_u32*) servo;
     328:	e0bffd17 	ldw	r2,-12(fp)
     32c:	e0bffc15 	stw	r2,-16(fp)
	//TODO
	return false;
     330:	0005883a 	mov	r2,zero
}
     334:	e037883a 	mov	sp,fp
     338:	df000017 	ldw	fp,0(sp)
     33c:	dec00104 	addi	sp,sp,4
     340:	f800283a 	ret

00000344 <servo_randomMovement>:

bool servo_randomMovement(SERVO servo){
     344:	defffc04 	addi	sp,sp,-16
     348:	dfc00315 	stw	ra,12(sp)
     34c:	df000215 	stw	fp,8(sp)
     350:	df000204 	addi	fp,sp,8
     354:	e13fff15 	stw	r4,-4(fp)
	volatile alt_u32* addr = (alt_u32*) servo;
     358:	e0bfff17 	ldw	r2,-4(fp)
     35c:	e0bffe15 	stw	r2,-8(fp)
	srand(time(0));
     360:	0009883a 	mov	r4,zero
     364:	00009680 	call	968 <time>
     368:	1009883a 	mov	r4,r2
     36c:	00008540 	call	854 <srand>
	*addr = ((alt_u8)(rand()%200));
     370:	000086c0 	call	86c <rand>
     374:	01403204 	movi	r5,200
     378:	1009883a 	mov	r4,r2
     37c:	00006280 	call	628 <__modsi3>
     380:	10c03fcc 	andi	r3,r2,255
     384:	e0bffe17 	ldw	r2,-8(fp)
     388:	10c00015 	stw	r3,0(r2)
	return true;
     38c:	00800044 	movi	r2,1
}
     390:	e037883a 	mov	sp,fp
     394:	dfc00117 	ldw	ra,4(sp)
     398:	df000017 	ldw	fp,0(sp)
     39c:	dec00204 	addi	sp,sp,8
     3a0:	f800283a 	ret

000003a4 <ASCII_to_7Seg>:
#include "SevenSegs.h"

alt_u32* HEX3dt0 = (alt_32*) 0xFF200020;
alt_u32* HEX4ut5 = (alt_32*) 0xFF200030;

alt_u8 ASCII_to_7Seg(char c){
     3a4:	defffb04 	addi	sp,sp,-20
     3a8:	df000415 	stw	fp,16(sp)
     3ac:	df000404 	addi	fp,sp,16
     3b0:	2005883a 	mov	r2,r4
     3b4:	e0bfff05 	stb	r2,-4(fp)
	if(c != 0){
     3b8:	e0bfff07 	ldb	r2,-4(fp)
     3bc:	10000326 	beq	r2,zero,3cc <ASCII_to_7Seg+0x28>
		c -= 0x30;
     3c0:	e0bfff03 	ldbu	r2,-4(fp)
     3c4:	10bff404 	addi	r2,r2,-48
     3c8:	e0bfff05 	stb	r2,-4(fp)
	}
	alt_u8 HEXMap[10] = {0b0111111,
     3cc:	00800fc4 	movi	r2,63
     3d0:	e0bffc05 	stb	r2,-16(fp)
     3d4:	00800184 	movi	r2,6
     3d8:	e0bffc45 	stb	r2,-15(fp)
     3dc:	008016c4 	movi	r2,91
     3e0:	e0bffc85 	stb	r2,-14(fp)
     3e4:	008013c4 	movi	r2,79
     3e8:	e0bffcc5 	stb	r2,-13(fp)
     3ec:	00801984 	movi	r2,102
     3f0:	e0bffd05 	stb	r2,-12(fp)
     3f4:	00801b44 	movi	r2,109
     3f8:	e0bffd45 	stb	r2,-11(fp)
     3fc:	00801f04 	movi	r2,124
     400:	e0bffd85 	stb	r2,-10(fp)
     404:	008001c4 	movi	r2,7
     408:	e0bffdc5 	stb	r2,-9(fp)
     40c:	00801fc4 	movi	r2,127
     410:	e0bffe05 	stb	r2,-8(fp)
     414:	008019c4 	movi	r2,103
     418:	e0bffe45 	stb	r2,-7(fp)
			0b1101101,
			0b1111100,
			0b0000111,
			0b1111111,
			0b1100111};
	return HEXMap[c];
     41c:	e0bfff07 	ldb	r2,-4(fp)
     420:	e0fffc04 	addi	r3,fp,-16
     424:	1885883a 	add	r2,r3,r2
     428:	10800003 	ldbu	r2,0(r2)
};
     42c:	e037883a 	mov	sp,fp
     430:	df000017 	ldw	fp,0(sp)
     434:	dec00104 	addi	sp,sp,4
     438:	f800283a 	ret

0000043c <clearSevenSegs>:

void clearSevenSegs(){
     43c:	deffff04 	addi	sp,sp,-4
     440:	df000015 	stw	fp,0(sp)
     444:	d839883a 	mov	fp,sp
	*HEX3dt0 = 0;
     448:	d0a00017 	ldw	r2,-32768(gp)
     44c:	10000015 	stw	zero,0(r2)
    *HEX4ut5 = 0;
     450:	d0a00117 	ldw	r2,-32764(gp)
     454:	10000015 	stw	zero,0(r2)
}
     458:	0001883a 	nop
     45c:	e037883a 	mov	sp,fp
     460:	df000017 	ldw	fp,0(sp)
     464:	dec00104 	addi	sp,sp,4
     468:	f800283a 	ret

0000046c <delay_1s>:
 */

#include "alt_types.h"
#include "delay.h"  //include declaration header file

void delay_1s(alt_u32 n){
     46c:	defffc04 	addi	sp,sp,-16
     470:	dfc00315 	stw	ra,12(sp)
     474:	df000215 	stw	fp,8(sp)
     478:	df000204 	addi	fp,sp,8
     47c:	e13fff15 	stw	r4,-4(fp)
	int i = 500000*n;
     480:	01400234 	movhi	r5,8
     484:	29684804 	addi	r5,r5,-24288
     488:	e13fff17 	ldw	r4,-4(fp)
     48c:	00007580 	call	758 <__mulsi3>
     490:	e0bffe15 	stw	r2,-8(fp)
	while(i>0){
     494:	00000306 	br	4a4 <delay_1s+0x38>
		i--;
     498:	e0bffe17 	ldw	r2,-8(fp)
     49c:	10bfffc4 	addi	r2,r2,-1
     4a0:	e0bffe15 	stw	r2,-8(fp)
#include "alt_types.h"
#include "delay.h"  //include declaration header file

void delay_1s(alt_u32 n){
	int i = 500000*n;
	while(i>0){
     4a4:	e0bffe17 	ldw	r2,-8(fp)
     4a8:	00bffb16 	blt	zero,r2,498 <__alt_mem_Onchip_SRAM+0xf8000498>
		i--;
	}
}
     4ac:	0001883a 	nop
     4b0:	e037883a 	mov	sp,fp
     4b4:	dfc00117 	ldw	ra,4(sp)
     4b8:	df000017 	ldw	fp,0(sp)
     4bc:	dec00204 	addi	sp,sp,8
     4c0:	f800283a 	ret

000004c4 <delay_1ms>:
void delay_1ms(alt_u32 n){
     4c4:	defffc04 	addi	sp,sp,-16
     4c8:	dfc00315 	stw	ra,12(sp)
     4cc:	df000215 	stw	fp,8(sp)
     4d0:	df000204 	addi	fp,sp,8
     4d4:	e13fff15 	stw	r4,-4(fp)
	int i = 500*n;
     4d8:	01407d04 	movi	r5,500
     4dc:	e13fff17 	ldw	r4,-4(fp)
     4e0:	00007580 	call	758 <__mulsi3>
     4e4:	e0bffe15 	stw	r2,-8(fp)
	while(i>0){
     4e8:	00000306 	br	4f8 <delay_1ms+0x34>
		i--;
     4ec:	e0bffe17 	ldw	r2,-8(fp)
     4f0:	10bfffc4 	addi	r2,r2,-1
     4f4:	e0bffe15 	stw	r2,-8(fp)
		i--;
	}
}
void delay_1ms(alt_u32 n){
	int i = 500*n;
	while(i>0){
     4f8:	e0bffe17 	ldw	r2,-8(fp)
     4fc:	00bffb16 	blt	zero,r2,4ec <__alt_mem_Onchip_SRAM+0xf80004ec>
		i--;
	}
}
     500:	0001883a 	nop
     504:	e037883a 	mov	sp,fp
     508:	dfc00117 	ldw	ra,4(sp)
     50c:	df000017 	ldw	fp,0(sp)
     510:	dec00204 	addi	sp,sp,8
     514:	f800283a 	ret

00000518 <main>:
#include "SevenSegs.h"
#include "delay.h"
#include "ServoAPI.h"

int main()
{
     518:	defff604 	addi	sp,sp,-40
     51c:	dfc00915 	stw	ra,36(sp)
     520:	df000815 	stw	fp,32(sp)
     524:	df000804 	addi	fp,sp,32
  printf("Welcome to the 7-Seg Switch Display!\n");
     528:	01000034 	movhi	r4,0
     52c:	211ab004 	addi	r4,r4,27328
     530:	00008400 	call	840 <puts>

  alt_u16* leds = (alt_u16*) LEDS_BASE;
     534:	00bfc834 	movhi	r2,65312
     538:	e0bff815 	stw	r2,-32(fp)
  volatile alt_u8* pushbuttons = (alt_u8*) PUSHBUTTONS_BASE;
     53c:	00bfc834 	movhi	r2,65312
     540:	10801404 	addi	r2,r2,80
     544:	e0bff915 	stw	r2,-28(fp)
  alt_u32* HEX0HEX3 = (alt_u32*) 0xFF200020;
     548:	00bfc834 	movhi	r2,65312
     54c:	10800804 	addi	r2,r2,32
     550:	e0bffa15 	stw	r2,-24(fp)
  alt_u32* HEX4HEX5 = (alt_u32*) 0xFF200030;
     554:	00bfc834 	movhi	r2,65312
     558:	10800c04 	addi	r2,r2,48
     55c:	e0bffb15 	stw	r2,-20(fp)
  volatile alt_u16* slideSwitches = (alt_u16*) 0xFF200040;
     560:	00bfc834 	movhi	r2,65312
     564:	10801004 	addi	r2,r2,64
     568:	e0bffc15 	stw	r2,-16(fp)

  char BCDOut[7] = {0};
     56c:	e03ffe15 	stw	zero,-8(fp)
     570:	e03fff0d 	sth	zero,-4(fp)
     574:	e03fff85 	stb	zero,-2(fp)
  alt_u32 HexOut = 0;
     578:	e03ffd15 	stw	zero,-12(fp)
  //clear on boot up
  clearSevenSegs();
     57c:	000043c0 	call	43c <clearSevenSegs>

  //main loop
  while(1){
	  servo_randomMovement(SERVO_Y);
     580:	013fc834 	movhi	r4,65312
     584:	21002804 	addi	r4,r4,160
     588:	00003440 	call	344 <servo_randomMovement>
	  servo_randomMovement(SERVO_X);
     58c:	013fc834 	movhi	r4,65312
     590:	21002404 	addi	r4,r4,144
     594:	00003440 	call	344 <servo_randomMovement>
	  delay_1ms(50);
     598:	01000c84 	movi	r4,50
     59c:	00004c40 	call	4c4 <delay_1ms>

  }
     5a0:	003ff706 	br	580 <__alt_mem_Onchip_SRAM+0xf8000580>

000005a4 <__divsi3>:
     5a4:	20001b16 	blt	r4,zero,614 <__divsi3+0x70>
     5a8:	000f883a 	mov	r7,zero
     5ac:	28001616 	blt	r5,zero,608 <__divsi3+0x64>
     5b0:	200d883a 	mov	r6,r4
     5b4:	29001a2e 	bgeu	r5,r4,620 <__divsi3+0x7c>
     5b8:	00800804 	movi	r2,32
     5bc:	00c00044 	movi	r3,1
     5c0:	00000106 	br	5c8 <__divsi3+0x24>
     5c4:	10000d26 	beq	r2,zero,5fc <__divsi3+0x58>
     5c8:	294b883a 	add	r5,r5,r5
     5cc:	10bfffc4 	addi	r2,r2,-1
     5d0:	18c7883a 	add	r3,r3,r3
     5d4:	293ffb36 	bltu	r5,r4,5c4 <__alt_mem_Onchip_SRAM+0xf80005c4>
     5d8:	0005883a 	mov	r2,zero
     5dc:	18000726 	beq	r3,zero,5fc <__divsi3+0x58>
     5e0:	0005883a 	mov	r2,zero
     5e4:	31400236 	bltu	r6,r5,5f0 <__divsi3+0x4c>
     5e8:	314dc83a 	sub	r6,r6,r5
     5ec:	10c4b03a 	or	r2,r2,r3
     5f0:	1806d07a 	srli	r3,r3,1
     5f4:	280ad07a 	srli	r5,r5,1
     5f8:	183ffa1e 	bne	r3,zero,5e4 <__alt_mem_Onchip_SRAM+0xf80005e4>
     5fc:	38000126 	beq	r7,zero,604 <__divsi3+0x60>
     600:	0085c83a 	sub	r2,zero,r2
     604:	f800283a 	ret
     608:	014bc83a 	sub	r5,zero,r5
     60c:	39c0005c 	xori	r7,r7,1
     610:	003fe706 	br	5b0 <__alt_mem_Onchip_SRAM+0xf80005b0>
     614:	0109c83a 	sub	r4,zero,r4
     618:	01c00044 	movi	r7,1
     61c:	003fe306 	br	5ac <__alt_mem_Onchip_SRAM+0xf80005ac>
     620:	00c00044 	movi	r3,1
     624:	003fee06 	br	5e0 <__alt_mem_Onchip_SRAM+0xf80005e0>

00000628 <__modsi3>:
     628:	20001716 	blt	r4,zero,688 <__modsi3+0x60>
     62c:	000f883a 	mov	r7,zero
     630:	2005883a 	mov	r2,r4
     634:	28001216 	blt	r5,zero,680 <__modsi3+0x58>
     638:	2900162e 	bgeu	r5,r4,694 <__modsi3+0x6c>
     63c:	01800804 	movi	r6,32
     640:	00c00044 	movi	r3,1
     644:	00000106 	br	64c <__modsi3+0x24>
     648:	30000a26 	beq	r6,zero,674 <__modsi3+0x4c>
     64c:	294b883a 	add	r5,r5,r5
     650:	31bfffc4 	addi	r6,r6,-1
     654:	18c7883a 	add	r3,r3,r3
     658:	293ffb36 	bltu	r5,r4,648 <__alt_mem_Onchip_SRAM+0xf8000648>
     65c:	18000526 	beq	r3,zero,674 <__modsi3+0x4c>
     660:	1806d07a 	srli	r3,r3,1
     664:	11400136 	bltu	r2,r5,66c <__modsi3+0x44>
     668:	1145c83a 	sub	r2,r2,r5
     66c:	280ad07a 	srli	r5,r5,1
     670:	183ffb1e 	bne	r3,zero,660 <__alt_mem_Onchip_SRAM+0xf8000660>
     674:	38000126 	beq	r7,zero,67c <__modsi3+0x54>
     678:	0085c83a 	sub	r2,zero,r2
     67c:	f800283a 	ret
     680:	014bc83a 	sub	r5,zero,r5
     684:	003fec06 	br	638 <__alt_mem_Onchip_SRAM+0xf8000638>
     688:	0109c83a 	sub	r4,zero,r4
     68c:	01c00044 	movi	r7,1
     690:	003fe706 	br	630 <__alt_mem_Onchip_SRAM+0xf8000630>
     694:	00c00044 	movi	r3,1
     698:	003ff106 	br	660 <__alt_mem_Onchip_SRAM+0xf8000660>

0000069c <__udivsi3>:
     69c:	200d883a 	mov	r6,r4
     6a0:	2900152e 	bgeu	r5,r4,6f8 <__udivsi3+0x5c>
     6a4:	28001416 	blt	r5,zero,6f8 <__udivsi3+0x5c>
     6a8:	00800804 	movi	r2,32
     6ac:	00c00044 	movi	r3,1
     6b0:	00000206 	br	6bc <__udivsi3+0x20>
     6b4:	10000e26 	beq	r2,zero,6f0 <__udivsi3+0x54>
     6b8:	28000516 	blt	r5,zero,6d0 <__udivsi3+0x34>
     6bc:	294b883a 	add	r5,r5,r5
     6c0:	10bfffc4 	addi	r2,r2,-1
     6c4:	18c7883a 	add	r3,r3,r3
     6c8:	293ffa36 	bltu	r5,r4,6b4 <__alt_mem_Onchip_SRAM+0xf80006b4>
     6cc:	18000826 	beq	r3,zero,6f0 <__udivsi3+0x54>
     6d0:	0005883a 	mov	r2,zero
     6d4:	31400236 	bltu	r6,r5,6e0 <__udivsi3+0x44>
     6d8:	314dc83a 	sub	r6,r6,r5
     6dc:	10c4b03a 	or	r2,r2,r3
     6e0:	1806d07a 	srli	r3,r3,1
     6e4:	280ad07a 	srli	r5,r5,1
     6e8:	183ffa1e 	bne	r3,zero,6d4 <__alt_mem_Onchip_SRAM+0xf80006d4>
     6ec:	f800283a 	ret
     6f0:	0005883a 	mov	r2,zero
     6f4:	f800283a 	ret
     6f8:	00c00044 	movi	r3,1
     6fc:	003ff406 	br	6d0 <__alt_mem_Onchip_SRAM+0xf80006d0>

00000700 <__umodsi3>:
     700:	2005883a 	mov	r2,r4
     704:	2900122e 	bgeu	r5,r4,750 <__umodsi3+0x50>
     708:	28001116 	blt	r5,zero,750 <__umodsi3+0x50>
     70c:	01800804 	movi	r6,32
     710:	00c00044 	movi	r3,1
     714:	00000206 	br	720 <__umodsi3+0x20>
     718:	30000c26 	beq	r6,zero,74c <__umodsi3+0x4c>
     71c:	28000516 	blt	r5,zero,734 <__umodsi3+0x34>
     720:	294b883a 	add	r5,r5,r5
     724:	31bfffc4 	addi	r6,r6,-1
     728:	18c7883a 	add	r3,r3,r3
     72c:	293ffa36 	bltu	r5,r4,718 <__alt_mem_Onchip_SRAM+0xf8000718>
     730:	18000626 	beq	r3,zero,74c <__umodsi3+0x4c>
     734:	1806d07a 	srli	r3,r3,1
     738:	11400136 	bltu	r2,r5,740 <__umodsi3+0x40>
     73c:	1145c83a 	sub	r2,r2,r5
     740:	280ad07a 	srli	r5,r5,1
     744:	183ffb1e 	bne	r3,zero,734 <__alt_mem_Onchip_SRAM+0xf8000734>
     748:	f800283a 	ret
     74c:	f800283a 	ret
     750:	00c00044 	movi	r3,1
     754:	003ff706 	br	734 <__alt_mem_Onchip_SRAM+0xf8000734>

00000758 <__mulsi3>:
     758:	0005883a 	mov	r2,zero
     75c:	20000726 	beq	r4,zero,77c <__mulsi3+0x24>
     760:	20c0004c 	andi	r3,r4,1
     764:	2008d07a 	srli	r4,r4,1
     768:	18000126 	beq	r3,zero,770 <__mulsi3+0x18>
     76c:	1145883a 	add	r2,r2,r5
     770:	294b883a 	add	r5,r5,r5
     774:	203ffa1e 	bne	r4,zero,760 <__alt_mem_Onchip_SRAM+0xf8000760>
     778:	f800283a 	ret
     77c:	f800283a 	ret

00000780 <_puts_r>:
     780:	defff604 	addi	sp,sp,-40
     784:	dc000715 	stw	r16,28(sp)
     788:	2021883a 	mov	r16,r4
     78c:	2809883a 	mov	r4,r5
     790:	dc400815 	stw	r17,32(sp)
     794:	dfc00915 	stw	ra,36(sp)
     798:	2823883a 	mov	r17,r5
     79c:	00008d00 	call	8d0 <strlen>
     7a0:	10c00044 	addi	r3,r2,1
     7a4:	d8800115 	stw	r2,4(sp)
     7a8:	00800034 	movhi	r2,0
     7ac:	109aba04 	addi	r2,r2,27368
     7b0:	d8800215 	stw	r2,8(sp)
     7b4:	00800044 	movi	r2,1
     7b8:	d8800315 	stw	r2,12(sp)
     7bc:	00800084 	movi	r2,2
     7c0:	dc400015 	stw	r17,0(sp)
     7c4:	d8c00615 	stw	r3,24(sp)
     7c8:	dec00415 	stw	sp,16(sp)
     7cc:	d8800515 	stw	r2,20(sp)
     7d0:	80000226 	beq	r16,zero,7dc <_puts_r+0x5c>
     7d4:	80800e17 	ldw	r2,56(r16)
     7d8:	10001426 	beq	r2,zero,82c <_puts_r+0xac>
     7dc:	81400217 	ldw	r5,8(r16)
     7e0:	2880030b 	ldhu	r2,12(r5)
     7e4:	10c8000c 	andi	r3,r2,8192
     7e8:	1800061e 	bne	r3,zero,804 <_puts_r+0x84>
     7ec:	29001917 	ldw	r4,100(r5)
     7f0:	00f7ffc4 	movi	r3,-8193
     7f4:	10880014 	ori	r2,r2,8192
     7f8:	20c6703a 	and	r3,r4,r3
     7fc:	2880030d 	sth	r2,12(r5)
     800:	28c01915 	stw	r3,100(r5)
     804:	d9800404 	addi	r6,sp,16
     808:	8009883a 	mov	r4,r16
     80c:	0000d680 	call	d68 <__sfvwrite_r>
     810:	1000091e 	bne	r2,zero,838 <_puts_r+0xb8>
     814:	00800284 	movi	r2,10
     818:	dfc00917 	ldw	ra,36(sp)
     81c:	dc400817 	ldw	r17,32(sp)
     820:	dc000717 	ldw	r16,28(sp)
     824:	dec00a04 	addi	sp,sp,40
     828:	f800283a 	ret
     82c:	8009883a 	mov	r4,r16
     830:	0000d180 	call	d18 <__sinit>
     834:	003fe906 	br	7dc <__alt_mem_Onchip_SRAM+0xf80007dc>
     838:	00bfffc4 	movi	r2,-1
     83c:	003ff606 	br	818 <__alt_mem_Onchip_SRAM+0xf8000818>

00000840 <puts>:
     840:	00800074 	movhi	r2,1
     844:	10a1ae04 	addi	r2,r2,-31048
     848:	200b883a 	mov	r5,r4
     84c:	11000017 	ldw	r4,0(r2)
     850:	00007801 	jmpi	780 <_puts_r>

00000854 <srand>:
     854:	00800074 	movhi	r2,1
     858:	10a1ae04 	addi	r2,r2,-31048
     85c:	10800017 	ldw	r2,0(r2)
     860:	11002915 	stw	r4,164(r2)
     864:	10002a15 	stw	zero,168(r2)
     868:	f800283a 	ret

0000086c <rand>:
     86c:	00800074 	movhi	r2,1
     870:	defffe04 	addi	sp,sp,-8
     874:	10a1ae04 	addi	r2,r2,-31048
     878:	dc000015 	stw	r16,0(sp)
     87c:	14000017 	ldw	r16,0(r2)
     880:	dfc00115 	stw	ra,4(sp)
     884:	01932574 	movhi	r6,19605
     888:	81002917 	ldw	r4,164(r16)
     88c:	81402a17 	ldw	r5,168(r16)
     890:	01d614b4 	movhi	r7,22610
     894:	319fcb44 	addi	r6,r6,32557
     898:	39fd0b44 	addi	r7,r7,-3027
     89c:	00034d80 	call	34d8 <__muldi3>
     8a0:	11000044 	addi	r4,r2,1
     8a4:	2085803a 	cmpltu	r2,r4,r2
     8a8:	10c7883a 	add	r3,r2,r3
     8ac:	00a00034 	movhi	r2,32768
     8b0:	10bfffc4 	addi	r2,r2,-1
     8b4:	1884703a 	and	r2,r3,r2
     8b8:	81002915 	stw	r4,164(r16)
     8bc:	80c02a15 	stw	r3,168(r16)
     8c0:	dfc00117 	ldw	ra,4(sp)
     8c4:	dc000017 	ldw	r16,0(sp)
     8c8:	dec00204 	addi	sp,sp,8
     8cc:	f800283a 	ret

000008d0 <strlen>:
     8d0:	208000cc 	andi	r2,r4,3
     8d4:	10002026 	beq	r2,zero,958 <strlen+0x88>
     8d8:	20800007 	ldb	r2,0(r4)
     8dc:	10002026 	beq	r2,zero,960 <strlen+0x90>
     8e0:	2005883a 	mov	r2,r4
     8e4:	00000206 	br	8f0 <strlen+0x20>
     8e8:	10c00007 	ldb	r3,0(r2)
     8ec:	18001826 	beq	r3,zero,950 <strlen+0x80>
     8f0:	10800044 	addi	r2,r2,1
     8f4:	10c000cc 	andi	r3,r2,3
     8f8:	183ffb1e 	bne	r3,zero,8e8 <__alt_mem_Onchip_SRAM+0xf80008e8>
     8fc:	10c00017 	ldw	r3,0(r2)
     900:	01ffbff4 	movhi	r7,65279
     904:	39ffbfc4 	addi	r7,r7,-257
     908:	00ca303a 	nor	r5,zero,r3
     90c:	01a02074 	movhi	r6,32897
     910:	19c7883a 	add	r3,r3,r7
     914:	31a02004 	addi	r6,r6,-32640
     918:	1946703a 	and	r3,r3,r5
     91c:	1986703a 	and	r3,r3,r6
     920:	1800091e 	bne	r3,zero,948 <strlen+0x78>
     924:	10800104 	addi	r2,r2,4
     928:	10c00017 	ldw	r3,0(r2)
     92c:	19cb883a 	add	r5,r3,r7
     930:	00c6303a 	nor	r3,zero,r3
     934:	28c6703a 	and	r3,r5,r3
     938:	1986703a 	and	r3,r3,r6
     93c:	183ff926 	beq	r3,zero,924 <__alt_mem_Onchip_SRAM+0xf8000924>
     940:	00000106 	br	948 <strlen+0x78>
     944:	10800044 	addi	r2,r2,1
     948:	10c00007 	ldb	r3,0(r2)
     94c:	183ffd1e 	bne	r3,zero,944 <__alt_mem_Onchip_SRAM+0xf8000944>
     950:	1105c83a 	sub	r2,r2,r4
     954:	f800283a 	ret
     958:	2005883a 	mov	r2,r4
     95c:	003fe706 	br	8fc <__alt_mem_Onchip_SRAM+0xf80008fc>
     960:	0005883a 	mov	r2,zero
     964:	f800283a 	ret

00000968 <time>:
     968:	00800074 	movhi	r2,1
     96c:	defffc04 	addi	sp,sp,-16
     970:	10a1ae04 	addi	r2,r2,-31048
     974:	dc000215 	stw	r16,8(sp)
     978:	2021883a 	mov	r16,r4
     97c:	11000017 	ldw	r4,0(r2)
     980:	000d883a 	mov	r6,zero
     984:	d80b883a 	mov	r5,sp
     988:	dfc00315 	stw	ra,12(sp)
     98c:	00013b80 	call	13b8 <_gettimeofday_r>
     990:	10000716 	blt	r2,zero,9b0 <time+0x48>
     994:	d8800017 	ldw	r2,0(sp)
     998:	80000126 	beq	r16,zero,9a0 <time+0x38>
     99c:	80800015 	stw	r2,0(r16)
     9a0:	dfc00317 	ldw	ra,12(sp)
     9a4:	dc000217 	ldw	r16,8(sp)
     9a8:	dec00404 	addi	sp,sp,16
     9ac:	f800283a 	ret
     9b0:	00bfffc4 	movi	r2,-1
     9b4:	003ffa06 	br	9a0 <__alt_mem_Onchip_SRAM+0xf80009a0>

000009b8 <__fp_unlock>:
     9b8:	0005883a 	mov	r2,zero
     9bc:	f800283a 	ret

000009c0 <_cleanup_r>:
     9c0:	01400034 	movhi	r5,0
     9c4:	294a7304 	addi	r5,r5,10700
     9c8:	00012f41 	jmpi	12f4 <_fwalk_reent>

000009cc <__sinit.part.1>:
     9cc:	defff704 	addi	sp,sp,-36
     9d0:	00c00034 	movhi	r3,0
     9d4:	dfc00815 	stw	ra,32(sp)
     9d8:	ddc00715 	stw	r23,28(sp)
     9dc:	dd800615 	stw	r22,24(sp)
     9e0:	dd400515 	stw	r21,20(sp)
     9e4:	dd000415 	stw	r20,16(sp)
     9e8:	dcc00315 	stw	r19,12(sp)
     9ec:	dc800215 	stw	r18,8(sp)
     9f0:	dc400115 	stw	r17,4(sp)
     9f4:	dc000015 	stw	r16,0(sp)
     9f8:	18c27004 	addi	r3,r3,2496
     9fc:	24000117 	ldw	r16,4(r4)
     a00:	20c00f15 	stw	r3,60(r4)
     a04:	2080bb04 	addi	r2,r4,748
     a08:	00c000c4 	movi	r3,3
     a0c:	20c0b915 	stw	r3,740(r4)
     a10:	2080ba15 	stw	r2,744(r4)
     a14:	2000b815 	stw	zero,736(r4)
     a18:	05c00204 	movi	r23,8
     a1c:	00800104 	movi	r2,4
     a20:	2025883a 	mov	r18,r4
     a24:	b80d883a 	mov	r6,r23
     a28:	81001704 	addi	r4,r16,92
     a2c:	000b883a 	mov	r5,zero
     a30:	80000015 	stw	zero,0(r16)
     a34:	80000115 	stw	zero,4(r16)
     a38:	80000215 	stw	zero,8(r16)
     a3c:	8080030d 	sth	r2,12(r16)
     a40:	80001915 	stw	zero,100(r16)
     a44:	8000038d 	sth	zero,14(r16)
     a48:	80000415 	stw	zero,16(r16)
     a4c:	80000515 	stw	zero,20(r16)
     a50:	80000615 	stw	zero,24(r16)
     a54:	0001fa80 	call	1fa8 <memset>
     a58:	05800034 	movhi	r22,0
     a5c:	94400217 	ldw	r17,8(r18)
     a60:	05400034 	movhi	r21,0
     a64:	05000034 	movhi	r20,0
     a68:	04c00034 	movhi	r19,0
     a6c:	b589a204 	addi	r22,r22,9864
     a70:	ad49b904 	addi	r21,r21,9956
     a74:	a509d804 	addi	r20,r20,10080
     a78:	9cc9ef04 	addi	r19,r19,10172
     a7c:	85800815 	stw	r22,32(r16)
     a80:	85400915 	stw	r21,36(r16)
     a84:	85000a15 	stw	r20,40(r16)
     a88:	84c00b15 	stw	r19,44(r16)
     a8c:	84000715 	stw	r16,28(r16)
     a90:	00800284 	movi	r2,10
     a94:	8880030d 	sth	r2,12(r17)
     a98:	00800044 	movi	r2,1
     a9c:	b80d883a 	mov	r6,r23
     aa0:	89001704 	addi	r4,r17,92
     aa4:	000b883a 	mov	r5,zero
     aa8:	88000015 	stw	zero,0(r17)
     aac:	88000115 	stw	zero,4(r17)
     ab0:	88000215 	stw	zero,8(r17)
     ab4:	88001915 	stw	zero,100(r17)
     ab8:	8880038d 	sth	r2,14(r17)
     abc:	88000415 	stw	zero,16(r17)
     ac0:	88000515 	stw	zero,20(r17)
     ac4:	88000615 	stw	zero,24(r17)
     ac8:	0001fa80 	call	1fa8 <memset>
     acc:	94000317 	ldw	r16,12(r18)
     ad0:	00800484 	movi	r2,18
     ad4:	8c400715 	stw	r17,28(r17)
     ad8:	8d800815 	stw	r22,32(r17)
     adc:	8d400915 	stw	r21,36(r17)
     ae0:	8d000a15 	stw	r20,40(r17)
     ae4:	8cc00b15 	stw	r19,44(r17)
     ae8:	8080030d 	sth	r2,12(r16)
     aec:	00800084 	movi	r2,2
     af0:	80000015 	stw	zero,0(r16)
     af4:	80000115 	stw	zero,4(r16)
     af8:	80000215 	stw	zero,8(r16)
     afc:	80001915 	stw	zero,100(r16)
     b00:	8080038d 	sth	r2,14(r16)
     b04:	80000415 	stw	zero,16(r16)
     b08:	80000515 	stw	zero,20(r16)
     b0c:	80000615 	stw	zero,24(r16)
     b10:	b80d883a 	mov	r6,r23
     b14:	000b883a 	mov	r5,zero
     b18:	81001704 	addi	r4,r16,92
     b1c:	0001fa80 	call	1fa8 <memset>
     b20:	00800044 	movi	r2,1
     b24:	84000715 	stw	r16,28(r16)
     b28:	85800815 	stw	r22,32(r16)
     b2c:	85400915 	stw	r21,36(r16)
     b30:	85000a15 	stw	r20,40(r16)
     b34:	84c00b15 	stw	r19,44(r16)
     b38:	90800e15 	stw	r2,56(r18)
     b3c:	dfc00817 	ldw	ra,32(sp)
     b40:	ddc00717 	ldw	r23,28(sp)
     b44:	dd800617 	ldw	r22,24(sp)
     b48:	dd400517 	ldw	r21,20(sp)
     b4c:	dd000417 	ldw	r20,16(sp)
     b50:	dcc00317 	ldw	r19,12(sp)
     b54:	dc800217 	ldw	r18,8(sp)
     b58:	dc400117 	ldw	r17,4(sp)
     b5c:	dc000017 	ldw	r16,0(sp)
     b60:	dec00904 	addi	sp,sp,36
     b64:	f800283a 	ret

00000b68 <__fp_lock>:
     b68:	0005883a 	mov	r2,zero
     b6c:	f800283a 	ret

00000b70 <__sfmoreglue>:
     b70:	defffc04 	addi	sp,sp,-16
     b74:	dc800215 	stw	r18,8(sp)
     b78:	2825883a 	mov	r18,r5
     b7c:	dc000015 	stw	r16,0(sp)
     b80:	01401a04 	movi	r5,104
     b84:	2021883a 	mov	r16,r4
     b88:	913fffc4 	addi	r4,r18,-1
     b8c:	dfc00315 	stw	ra,12(sp)
     b90:	dc400115 	stw	r17,4(sp)
     b94:	00007580 	call	758 <__mulsi3>
     b98:	8009883a 	mov	r4,r16
     b9c:	11401d04 	addi	r5,r2,116
     ba0:	1023883a 	mov	r17,r2
     ba4:	00014140 	call	1414 <_malloc_r>
     ba8:	1021883a 	mov	r16,r2
     bac:	10000726 	beq	r2,zero,bcc <__sfmoreglue+0x5c>
     bb0:	11000304 	addi	r4,r2,12
     bb4:	10000015 	stw	zero,0(r2)
     bb8:	14800115 	stw	r18,4(r2)
     bbc:	11000215 	stw	r4,8(r2)
     bc0:	89801a04 	addi	r6,r17,104
     bc4:	000b883a 	mov	r5,zero
     bc8:	0001fa80 	call	1fa8 <memset>
     bcc:	8005883a 	mov	r2,r16
     bd0:	dfc00317 	ldw	ra,12(sp)
     bd4:	dc800217 	ldw	r18,8(sp)
     bd8:	dc400117 	ldw	r17,4(sp)
     bdc:	dc000017 	ldw	r16,0(sp)
     be0:	dec00404 	addi	sp,sp,16
     be4:	f800283a 	ret

00000be8 <__sfp>:
     be8:	defffb04 	addi	sp,sp,-20
     bec:	dc000015 	stw	r16,0(sp)
     bf0:	04000074 	movhi	r16,1
     bf4:	8421ad04 	addi	r16,r16,-31052
     bf8:	dcc00315 	stw	r19,12(sp)
     bfc:	2027883a 	mov	r19,r4
     c00:	81000017 	ldw	r4,0(r16)
     c04:	dfc00415 	stw	ra,16(sp)
     c08:	dc800215 	stw	r18,8(sp)
     c0c:	20800e17 	ldw	r2,56(r4)
     c10:	dc400115 	stw	r17,4(sp)
     c14:	1000021e 	bne	r2,zero,c20 <__sfp+0x38>
     c18:	00009cc0 	call	9cc <__sinit.part.1>
     c1c:	81000017 	ldw	r4,0(r16)
     c20:	2480b804 	addi	r18,r4,736
     c24:	047fffc4 	movi	r17,-1
     c28:	91000117 	ldw	r4,4(r18)
     c2c:	94000217 	ldw	r16,8(r18)
     c30:	213fffc4 	addi	r4,r4,-1
     c34:	20000a16 	blt	r4,zero,c60 <__sfp+0x78>
     c38:	8080030f 	ldh	r2,12(r16)
     c3c:	10000c26 	beq	r2,zero,c70 <__sfp+0x88>
     c40:	80c01d04 	addi	r3,r16,116
     c44:	00000206 	br	c50 <__sfp+0x68>
     c48:	18bfe60f 	ldh	r2,-104(r3)
     c4c:	10000826 	beq	r2,zero,c70 <__sfp+0x88>
     c50:	213fffc4 	addi	r4,r4,-1
     c54:	1c3ffd04 	addi	r16,r3,-12
     c58:	18c01a04 	addi	r3,r3,104
     c5c:	247ffa1e 	bne	r4,r17,c48 <__alt_mem_Onchip_SRAM+0xf8000c48>
     c60:	90800017 	ldw	r2,0(r18)
     c64:	10001d26 	beq	r2,zero,cdc <__sfp+0xf4>
     c68:	1025883a 	mov	r18,r2
     c6c:	003fee06 	br	c28 <__alt_mem_Onchip_SRAM+0xf8000c28>
     c70:	00bfffc4 	movi	r2,-1
     c74:	8080038d 	sth	r2,14(r16)
     c78:	00800044 	movi	r2,1
     c7c:	8080030d 	sth	r2,12(r16)
     c80:	80001915 	stw	zero,100(r16)
     c84:	80000015 	stw	zero,0(r16)
     c88:	80000215 	stw	zero,8(r16)
     c8c:	80000115 	stw	zero,4(r16)
     c90:	80000415 	stw	zero,16(r16)
     c94:	80000515 	stw	zero,20(r16)
     c98:	80000615 	stw	zero,24(r16)
     c9c:	01800204 	movi	r6,8
     ca0:	000b883a 	mov	r5,zero
     ca4:	81001704 	addi	r4,r16,92
     ca8:	0001fa80 	call	1fa8 <memset>
     cac:	8005883a 	mov	r2,r16
     cb0:	80000c15 	stw	zero,48(r16)
     cb4:	80000d15 	stw	zero,52(r16)
     cb8:	80001115 	stw	zero,68(r16)
     cbc:	80001215 	stw	zero,72(r16)
     cc0:	dfc00417 	ldw	ra,16(sp)
     cc4:	dcc00317 	ldw	r19,12(sp)
     cc8:	dc800217 	ldw	r18,8(sp)
     ccc:	dc400117 	ldw	r17,4(sp)
     cd0:	dc000017 	ldw	r16,0(sp)
     cd4:	dec00504 	addi	sp,sp,20
     cd8:	f800283a 	ret
     cdc:	01400104 	movi	r5,4
     ce0:	9809883a 	mov	r4,r19
     ce4:	0000b700 	call	b70 <__sfmoreglue>
     ce8:	90800015 	stw	r2,0(r18)
     cec:	103fde1e 	bne	r2,zero,c68 <__alt_mem_Onchip_SRAM+0xf8000c68>
     cf0:	00800304 	movi	r2,12
     cf4:	98800015 	stw	r2,0(r19)
     cf8:	0005883a 	mov	r2,zero
     cfc:	003ff006 	br	cc0 <__alt_mem_Onchip_SRAM+0xf8000cc0>

00000d00 <_cleanup>:
     d00:	00800074 	movhi	r2,1
     d04:	10a1ad04 	addi	r2,r2,-31052
     d08:	11000017 	ldw	r4,0(r2)
     d0c:	01400034 	movhi	r5,0
     d10:	294a7304 	addi	r5,r5,10700
     d14:	00012f41 	jmpi	12f4 <_fwalk_reent>

00000d18 <__sinit>:
     d18:	20800e17 	ldw	r2,56(r4)
     d1c:	10000126 	beq	r2,zero,d24 <__sinit+0xc>
     d20:	f800283a 	ret
     d24:	00009cc1 	jmpi	9cc <__sinit.part.1>

00000d28 <__sfp_lock_acquire>:
     d28:	f800283a 	ret

00000d2c <__sfp_lock_release>:
     d2c:	f800283a 	ret

00000d30 <__sinit_lock_acquire>:
     d30:	f800283a 	ret

00000d34 <__sinit_lock_release>:
     d34:	f800283a 	ret

00000d38 <__fp_lock_all>:
     d38:	00800074 	movhi	r2,1
     d3c:	10a1ae04 	addi	r2,r2,-31048
     d40:	11000017 	ldw	r4,0(r2)
     d44:	01400034 	movhi	r5,0
     d48:	2942da04 	addi	r5,r5,2920
     d4c:	00012301 	jmpi	1230 <_fwalk>

00000d50 <__fp_unlock_all>:
     d50:	00800074 	movhi	r2,1
     d54:	10a1ae04 	addi	r2,r2,-31048
     d58:	11000017 	ldw	r4,0(r2)
     d5c:	01400034 	movhi	r5,0
     d60:	29426e04 	addi	r5,r5,2488
     d64:	00012301 	jmpi	1230 <_fwalk>

00000d68 <__sfvwrite_r>:
     d68:	30800217 	ldw	r2,8(r6)
     d6c:	10006726 	beq	r2,zero,f0c <__sfvwrite_r+0x1a4>
     d70:	28c0030b 	ldhu	r3,12(r5)
     d74:	defff404 	addi	sp,sp,-48
     d78:	dd400715 	stw	r21,28(sp)
     d7c:	dd000615 	stw	r20,24(sp)
     d80:	dc000215 	stw	r16,8(sp)
     d84:	dfc00b15 	stw	ra,44(sp)
     d88:	df000a15 	stw	fp,40(sp)
     d8c:	ddc00915 	stw	r23,36(sp)
     d90:	dd800815 	stw	r22,32(sp)
     d94:	dcc00515 	stw	r19,20(sp)
     d98:	dc800415 	stw	r18,16(sp)
     d9c:	dc400315 	stw	r17,12(sp)
     da0:	1880020c 	andi	r2,r3,8
     da4:	2821883a 	mov	r16,r5
     da8:	202b883a 	mov	r21,r4
     dac:	3029883a 	mov	r20,r6
     db0:	10002726 	beq	r2,zero,e50 <__sfvwrite_r+0xe8>
     db4:	28800417 	ldw	r2,16(r5)
     db8:	10002526 	beq	r2,zero,e50 <__sfvwrite_r+0xe8>
     dbc:	1880008c 	andi	r2,r3,2
     dc0:	a4400017 	ldw	r17,0(r20)
     dc4:	10002a26 	beq	r2,zero,e70 <__sfvwrite_r+0x108>
     dc8:	05a00034 	movhi	r22,32768
     dcc:	0027883a 	mov	r19,zero
     dd0:	0025883a 	mov	r18,zero
     dd4:	b5bf0004 	addi	r22,r22,-1024
     dd8:	980d883a 	mov	r6,r19
     ddc:	a809883a 	mov	r4,r21
     de0:	90004626 	beq	r18,zero,efc <__sfvwrite_r+0x194>
     de4:	900f883a 	mov	r7,r18
     de8:	b480022e 	bgeu	r22,r18,df4 <__sfvwrite_r+0x8c>
     dec:	01e00034 	movhi	r7,32768
     df0:	39ff0004 	addi	r7,r7,-1024
     df4:	80800917 	ldw	r2,36(r16)
     df8:	81400717 	ldw	r5,28(r16)
     dfc:	103ee83a 	callr	r2
     e00:	00805a0e 	bge	zero,r2,f6c <__sfvwrite_r+0x204>
     e04:	a0c00217 	ldw	r3,8(r20)
     e08:	98a7883a 	add	r19,r19,r2
     e0c:	90a5c83a 	sub	r18,r18,r2
     e10:	1885c83a 	sub	r2,r3,r2
     e14:	a0800215 	stw	r2,8(r20)
     e18:	103fef1e 	bne	r2,zero,dd8 <__alt_mem_Onchip_SRAM+0xf8000dd8>
     e1c:	0005883a 	mov	r2,zero
     e20:	dfc00b17 	ldw	ra,44(sp)
     e24:	df000a17 	ldw	fp,40(sp)
     e28:	ddc00917 	ldw	r23,36(sp)
     e2c:	dd800817 	ldw	r22,32(sp)
     e30:	dd400717 	ldw	r21,28(sp)
     e34:	dd000617 	ldw	r20,24(sp)
     e38:	dcc00517 	ldw	r19,20(sp)
     e3c:	dc800417 	ldw	r18,16(sp)
     e40:	dc400317 	ldw	r17,12(sp)
     e44:	dc000217 	ldw	r16,8(sp)
     e48:	dec00c04 	addi	sp,sp,48
     e4c:	f800283a 	ret
     e50:	800b883a 	mov	r5,r16
     e54:	a809883a 	mov	r4,r21
     e58:	00028240 	call	2824 <__swsetup_r>
     e5c:	1000ee1e 	bne	r2,zero,1218 <__sfvwrite_r+0x4b0>
     e60:	80c0030b 	ldhu	r3,12(r16)
     e64:	a4400017 	ldw	r17,0(r20)
     e68:	1880008c 	andi	r2,r3,2
     e6c:	103fd61e 	bne	r2,zero,dc8 <__alt_mem_Onchip_SRAM+0xf8000dc8>
     e70:	1880004c 	andi	r2,r3,1
     e74:	1000421e 	bne	r2,zero,f80 <__sfvwrite_r+0x218>
     e78:	0039883a 	mov	fp,zero
     e7c:	0025883a 	mov	r18,zero
     e80:	90001a26 	beq	r18,zero,eec <__sfvwrite_r+0x184>
     e84:	1880800c 	andi	r2,r3,512
     e88:	84c00217 	ldw	r19,8(r16)
     e8c:	10002126 	beq	r2,zero,f14 <__sfvwrite_r+0x1ac>
     e90:	982f883a 	mov	r23,r19
     e94:	94c09636 	bltu	r18,r19,10f0 <__sfvwrite_r+0x388>
     e98:	1881200c 	andi	r2,r3,1152
     e9c:	1000a11e 	bne	r2,zero,1124 <__sfvwrite_r+0x3bc>
     ea0:	81000017 	ldw	r4,0(r16)
     ea4:	b80d883a 	mov	r6,r23
     ea8:	e00b883a 	mov	r5,fp
     eac:	0001e4c0 	call	1e4c <memmove>
     eb0:	80c00217 	ldw	r3,8(r16)
     eb4:	81000017 	ldw	r4,0(r16)
     eb8:	9005883a 	mov	r2,r18
     ebc:	1ce7c83a 	sub	r19,r3,r19
     ec0:	25cf883a 	add	r7,r4,r23
     ec4:	84c00215 	stw	r19,8(r16)
     ec8:	81c00015 	stw	r7,0(r16)
     ecc:	a0c00217 	ldw	r3,8(r20)
     ed0:	e0b9883a 	add	fp,fp,r2
     ed4:	90a5c83a 	sub	r18,r18,r2
     ed8:	18a7c83a 	sub	r19,r3,r2
     edc:	a4c00215 	stw	r19,8(r20)
     ee0:	983fce26 	beq	r19,zero,e1c <__alt_mem_Onchip_SRAM+0xf8000e1c>
     ee4:	80c0030b 	ldhu	r3,12(r16)
     ee8:	903fe61e 	bne	r18,zero,e84 <__alt_mem_Onchip_SRAM+0xf8000e84>
     eec:	8f000017 	ldw	fp,0(r17)
     ef0:	8c800117 	ldw	r18,4(r17)
     ef4:	8c400204 	addi	r17,r17,8
     ef8:	003fe106 	br	e80 <__alt_mem_Onchip_SRAM+0xf8000e80>
     efc:	8cc00017 	ldw	r19,0(r17)
     f00:	8c800117 	ldw	r18,4(r17)
     f04:	8c400204 	addi	r17,r17,8
     f08:	003fb306 	br	dd8 <__alt_mem_Onchip_SRAM+0xf8000dd8>
     f0c:	0005883a 	mov	r2,zero
     f10:	f800283a 	ret
     f14:	81000017 	ldw	r4,0(r16)
     f18:	80800417 	ldw	r2,16(r16)
     f1c:	11005a36 	bltu	r2,r4,1088 <__sfvwrite_r+0x320>
     f20:	85c00517 	ldw	r23,20(r16)
     f24:	95c05836 	bltu	r18,r23,1088 <__sfvwrite_r+0x320>
     f28:	00a00034 	movhi	r2,32768
     f2c:	10bfffc4 	addi	r2,r2,-1
     f30:	9009883a 	mov	r4,r18
     f34:	1480012e 	bgeu	r2,r18,f3c <__sfvwrite_r+0x1d4>
     f38:	1009883a 	mov	r4,r2
     f3c:	b80b883a 	mov	r5,r23
     f40:	00005a40 	call	5a4 <__divsi3>
     f44:	b80b883a 	mov	r5,r23
     f48:	1009883a 	mov	r4,r2
     f4c:	00007580 	call	758 <__mulsi3>
     f50:	81400717 	ldw	r5,28(r16)
     f54:	80c00917 	ldw	r3,36(r16)
     f58:	100f883a 	mov	r7,r2
     f5c:	e00d883a 	mov	r6,fp
     f60:	a809883a 	mov	r4,r21
     f64:	183ee83a 	callr	r3
     f68:	00bfd816 	blt	zero,r2,ecc <__alt_mem_Onchip_SRAM+0xf8000ecc>
     f6c:	8080030b 	ldhu	r2,12(r16)
     f70:	10801014 	ori	r2,r2,64
     f74:	8080030d 	sth	r2,12(r16)
     f78:	00bfffc4 	movi	r2,-1
     f7c:	003fa806 	br	e20 <__alt_mem_Onchip_SRAM+0xf8000e20>
     f80:	0027883a 	mov	r19,zero
     f84:	0011883a 	mov	r8,zero
     f88:	0039883a 	mov	fp,zero
     f8c:	0025883a 	mov	r18,zero
     f90:	90001f26 	beq	r18,zero,1010 <__sfvwrite_r+0x2a8>
     f94:	40005a26 	beq	r8,zero,1100 <__sfvwrite_r+0x398>
     f98:	982d883a 	mov	r22,r19
     f9c:	94c0012e 	bgeu	r18,r19,fa4 <__sfvwrite_r+0x23c>
     fa0:	902d883a 	mov	r22,r18
     fa4:	81000017 	ldw	r4,0(r16)
     fa8:	80800417 	ldw	r2,16(r16)
     fac:	b02f883a 	mov	r23,r22
     fb0:	81c00517 	ldw	r7,20(r16)
     fb4:	1100032e 	bgeu	r2,r4,fc4 <__sfvwrite_r+0x25c>
     fb8:	80c00217 	ldw	r3,8(r16)
     fbc:	38c7883a 	add	r3,r7,r3
     fc0:	1d801816 	blt	r3,r22,1024 <__sfvwrite_r+0x2bc>
     fc4:	b1c03e16 	blt	r22,r7,10c0 <__sfvwrite_r+0x358>
     fc8:	80800917 	ldw	r2,36(r16)
     fcc:	81400717 	ldw	r5,28(r16)
     fd0:	e00d883a 	mov	r6,fp
     fd4:	da000115 	stw	r8,4(sp)
     fd8:	a809883a 	mov	r4,r21
     fdc:	103ee83a 	callr	r2
     fe0:	102f883a 	mov	r23,r2
     fe4:	da000117 	ldw	r8,4(sp)
     fe8:	00bfe00e 	bge	zero,r2,f6c <__alt_mem_Onchip_SRAM+0xf8000f6c>
     fec:	9de7c83a 	sub	r19,r19,r23
     ff0:	98001f26 	beq	r19,zero,1070 <__sfvwrite_r+0x308>
     ff4:	a0800217 	ldw	r2,8(r20)
     ff8:	e5f9883a 	add	fp,fp,r23
     ffc:	95e5c83a 	sub	r18,r18,r23
    1000:	15efc83a 	sub	r23,r2,r23
    1004:	a5c00215 	stw	r23,8(r20)
    1008:	b83f8426 	beq	r23,zero,e1c <__alt_mem_Onchip_SRAM+0xf8000e1c>
    100c:	903fe11e 	bne	r18,zero,f94 <__alt_mem_Onchip_SRAM+0xf8000f94>
    1010:	8f000017 	ldw	fp,0(r17)
    1014:	8c800117 	ldw	r18,4(r17)
    1018:	0011883a 	mov	r8,zero
    101c:	8c400204 	addi	r17,r17,8
    1020:	003fdb06 	br	f90 <__alt_mem_Onchip_SRAM+0xf8000f90>
    1024:	180d883a 	mov	r6,r3
    1028:	e00b883a 	mov	r5,fp
    102c:	da000115 	stw	r8,4(sp)
    1030:	d8c00015 	stw	r3,0(sp)
    1034:	0001e4c0 	call	1e4c <memmove>
    1038:	d8c00017 	ldw	r3,0(sp)
    103c:	80800017 	ldw	r2,0(r16)
    1040:	800b883a 	mov	r5,r16
    1044:	a809883a 	mov	r4,r21
    1048:	10c5883a 	add	r2,r2,r3
    104c:	80800015 	stw	r2,0(r16)
    1050:	d8c00015 	stw	r3,0(sp)
    1054:	0002cec0 	call	2cec <_fflush_r>
    1058:	d8c00017 	ldw	r3,0(sp)
    105c:	da000117 	ldw	r8,4(sp)
    1060:	103fc21e 	bne	r2,zero,f6c <__alt_mem_Onchip_SRAM+0xf8000f6c>
    1064:	182f883a 	mov	r23,r3
    1068:	9de7c83a 	sub	r19,r19,r23
    106c:	983fe11e 	bne	r19,zero,ff4 <__alt_mem_Onchip_SRAM+0xf8000ff4>
    1070:	800b883a 	mov	r5,r16
    1074:	a809883a 	mov	r4,r21
    1078:	0002cec0 	call	2cec <_fflush_r>
    107c:	103fbb1e 	bne	r2,zero,f6c <__alt_mem_Onchip_SRAM+0xf8000f6c>
    1080:	0011883a 	mov	r8,zero
    1084:	003fdb06 	br	ff4 <__alt_mem_Onchip_SRAM+0xf8000ff4>
    1088:	94c0012e 	bgeu	r18,r19,1090 <__sfvwrite_r+0x328>
    108c:	9027883a 	mov	r19,r18
    1090:	980d883a 	mov	r6,r19
    1094:	e00b883a 	mov	r5,fp
    1098:	0001e4c0 	call	1e4c <memmove>
    109c:	80800217 	ldw	r2,8(r16)
    10a0:	80c00017 	ldw	r3,0(r16)
    10a4:	14c5c83a 	sub	r2,r2,r19
    10a8:	1cc7883a 	add	r3,r3,r19
    10ac:	80800215 	stw	r2,8(r16)
    10b0:	80c00015 	stw	r3,0(r16)
    10b4:	10004326 	beq	r2,zero,11c4 <__sfvwrite_r+0x45c>
    10b8:	9805883a 	mov	r2,r19
    10bc:	003f8306 	br	ecc <__alt_mem_Onchip_SRAM+0xf8000ecc>
    10c0:	b00d883a 	mov	r6,r22
    10c4:	e00b883a 	mov	r5,fp
    10c8:	da000115 	stw	r8,4(sp)
    10cc:	0001e4c0 	call	1e4c <memmove>
    10d0:	80800217 	ldw	r2,8(r16)
    10d4:	80c00017 	ldw	r3,0(r16)
    10d8:	da000117 	ldw	r8,4(sp)
    10dc:	1585c83a 	sub	r2,r2,r22
    10e0:	1dad883a 	add	r22,r3,r22
    10e4:	80800215 	stw	r2,8(r16)
    10e8:	85800015 	stw	r22,0(r16)
    10ec:	003fbf06 	br	fec <__alt_mem_Onchip_SRAM+0xf8000fec>
    10f0:	81000017 	ldw	r4,0(r16)
    10f4:	9027883a 	mov	r19,r18
    10f8:	902f883a 	mov	r23,r18
    10fc:	003f6906 	br	ea4 <__alt_mem_Onchip_SRAM+0xf8000ea4>
    1100:	900d883a 	mov	r6,r18
    1104:	01400284 	movi	r5,10
    1108:	e009883a 	mov	r4,fp
    110c:	0001c200 	call	1c20 <memchr>
    1110:	10003e26 	beq	r2,zero,120c <__sfvwrite_r+0x4a4>
    1114:	10800044 	addi	r2,r2,1
    1118:	1727c83a 	sub	r19,r2,fp
    111c:	02000044 	movi	r8,1
    1120:	003f9d06 	br	f98 <__alt_mem_Onchip_SRAM+0xf8000f98>
    1124:	80800517 	ldw	r2,20(r16)
    1128:	81400417 	ldw	r5,16(r16)
    112c:	81c00017 	ldw	r7,0(r16)
    1130:	10a7883a 	add	r19,r2,r2
    1134:	9885883a 	add	r2,r19,r2
    1138:	1026d7fa 	srli	r19,r2,31
    113c:	396dc83a 	sub	r22,r7,r5
    1140:	b1000044 	addi	r4,r22,1
    1144:	9885883a 	add	r2,r19,r2
    1148:	1027d07a 	srai	r19,r2,1
    114c:	2485883a 	add	r2,r4,r18
    1150:	980d883a 	mov	r6,r19
    1154:	9880022e 	bgeu	r19,r2,1160 <__sfvwrite_r+0x3f8>
    1158:	1027883a 	mov	r19,r2
    115c:	100d883a 	mov	r6,r2
    1160:	18c1000c 	andi	r3,r3,1024
    1164:	18001c26 	beq	r3,zero,11d8 <__sfvwrite_r+0x470>
    1168:	300b883a 	mov	r5,r6
    116c:	a809883a 	mov	r4,r21
    1170:	00014140 	call	1414 <_malloc_r>
    1174:	102f883a 	mov	r23,r2
    1178:	10002926 	beq	r2,zero,1220 <__sfvwrite_r+0x4b8>
    117c:	81400417 	ldw	r5,16(r16)
    1180:	b00d883a 	mov	r6,r22
    1184:	1009883a 	mov	r4,r2
    1188:	0001d040 	call	1d04 <memcpy>
    118c:	8080030b 	ldhu	r2,12(r16)
    1190:	00fedfc4 	movi	r3,-1153
    1194:	10c4703a 	and	r2,r2,r3
    1198:	10802014 	ori	r2,r2,128
    119c:	8080030d 	sth	r2,12(r16)
    11a0:	bd89883a 	add	r4,r23,r22
    11a4:	9d8fc83a 	sub	r7,r19,r22
    11a8:	85c00415 	stw	r23,16(r16)
    11ac:	84c00515 	stw	r19,20(r16)
    11b0:	81000015 	stw	r4,0(r16)
    11b4:	9027883a 	mov	r19,r18
    11b8:	81c00215 	stw	r7,8(r16)
    11bc:	902f883a 	mov	r23,r18
    11c0:	003f3806 	br	ea4 <__alt_mem_Onchip_SRAM+0xf8000ea4>
    11c4:	800b883a 	mov	r5,r16
    11c8:	a809883a 	mov	r4,r21
    11cc:	0002cec0 	call	2cec <_fflush_r>
    11d0:	103fb926 	beq	r2,zero,10b8 <__alt_mem_Onchip_SRAM+0xf80010b8>
    11d4:	003f6506 	br	f6c <__alt_mem_Onchip_SRAM+0xf8000f6c>
    11d8:	a809883a 	mov	r4,r21
    11dc:	00020d00 	call	20d0 <_realloc_r>
    11e0:	102f883a 	mov	r23,r2
    11e4:	103fee1e 	bne	r2,zero,11a0 <__alt_mem_Onchip_SRAM+0xf80011a0>
    11e8:	81400417 	ldw	r5,16(r16)
    11ec:	a809883a 	mov	r4,r21
    11f0:	0002e9c0 	call	2e9c <_free_r>
    11f4:	8080030b 	ldhu	r2,12(r16)
    11f8:	00ffdfc4 	movi	r3,-129
    11fc:	1884703a 	and	r2,r3,r2
    1200:	00c00304 	movi	r3,12
    1204:	a8c00015 	stw	r3,0(r21)
    1208:	003f5906 	br	f70 <__alt_mem_Onchip_SRAM+0xf8000f70>
    120c:	94c00044 	addi	r19,r18,1
    1210:	02000044 	movi	r8,1
    1214:	003f6006 	br	f98 <__alt_mem_Onchip_SRAM+0xf8000f98>
    1218:	00bfffc4 	movi	r2,-1
    121c:	003f0006 	br	e20 <__alt_mem_Onchip_SRAM+0xf8000e20>
    1220:	00800304 	movi	r2,12
    1224:	a8800015 	stw	r2,0(r21)
    1228:	8080030b 	ldhu	r2,12(r16)
    122c:	003f5006 	br	f70 <__alt_mem_Onchip_SRAM+0xf8000f70>

00001230 <_fwalk>:
    1230:	defff704 	addi	sp,sp,-36
    1234:	dd000415 	stw	r20,16(sp)
    1238:	dfc00815 	stw	ra,32(sp)
    123c:	ddc00715 	stw	r23,28(sp)
    1240:	dd800615 	stw	r22,24(sp)
    1244:	dd400515 	stw	r21,20(sp)
    1248:	dcc00315 	stw	r19,12(sp)
    124c:	dc800215 	stw	r18,8(sp)
    1250:	dc400115 	stw	r17,4(sp)
    1254:	dc000015 	stw	r16,0(sp)
    1258:	2500b804 	addi	r20,r4,736
    125c:	a0002326 	beq	r20,zero,12ec <_fwalk+0xbc>
    1260:	282b883a 	mov	r21,r5
    1264:	002f883a 	mov	r23,zero
    1268:	05800044 	movi	r22,1
    126c:	04ffffc4 	movi	r19,-1
    1270:	a4400117 	ldw	r17,4(r20)
    1274:	a4800217 	ldw	r18,8(r20)
    1278:	8c7fffc4 	addi	r17,r17,-1
    127c:	88000d16 	blt	r17,zero,12b4 <_fwalk+0x84>
    1280:	94000304 	addi	r16,r18,12
    1284:	94800384 	addi	r18,r18,14
    1288:	8080000b 	ldhu	r2,0(r16)
    128c:	8c7fffc4 	addi	r17,r17,-1
    1290:	813ffd04 	addi	r4,r16,-12
    1294:	b080042e 	bgeu	r22,r2,12a8 <_fwalk+0x78>
    1298:	9080000f 	ldh	r2,0(r18)
    129c:	14c00226 	beq	r2,r19,12a8 <_fwalk+0x78>
    12a0:	a83ee83a 	callr	r21
    12a4:	b8aeb03a 	or	r23,r23,r2
    12a8:	84001a04 	addi	r16,r16,104
    12ac:	94801a04 	addi	r18,r18,104
    12b0:	8cfff51e 	bne	r17,r19,1288 <__alt_mem_Onchip_SRAM+0xf8001288>
    12b4:	a5000017 	ldw	r20,0(r20)
    12b8:	a03fed1e 	bne	r20,zero,1270 <__alt_mem_Onchip_SRAM+0xf8001270>
    12bc:	b805883a 	mov	r2,r23
    12c0:	dfc00817 	ldw	ra,32(sp)
    12c4:	ddc00717 	ldw	r23,28(sp)
    12c8:	dd800617 	ldw	r22,24(sp)
    12cc:	dd400517 	ldw	r21,20(sp)
    12d0:	dd000417 	ldw	r20,16(sp)
    12d4:	dcc00317 	ldw	r19,12(sp)
    12d8:	dc800217 	ldw	r18,8(sp)
    12dc:	dc400117 	ldw	r17,4(sp)
    12e0:	dc000017 	ldw	r16,0(sp)
    12e4:	dec00904 	addi	sp,sp,36
    12e8:	f800283a 	ret
    12ec:	002f883a 	mov	r23,zero
    12f0:	003ff206 	br	12bc <__alt_mem_Onchip_SRAM+0xf80012bc>

000012f4 <_fwalk_reent>:
    12f4:	defff704 	addi	sp,sp,-36
    12f8:	dd000415 	stw	r20,16(sp)
    12fc:	dfc00815 	stw	ra,32(sp)
    1300:	ddc00715 	stw	r23,28(sp)
    1304:	dd800615 	stw	r22,24(sp)
    1308:	dd400515 	stw	r21,20(sp)
    130c:	dcc00315 	stw	r19,12(sp)
    1310:	dc800215 	stw	r18,8(sp)
    1314:	dc400115 	stw	r17,4(sp)
    1318:	dc000015 	stw	r16,0(sp)
    131c:	2500b804 	addi	r20,r4,736
    1320:	a0002326 	beq	r20,zero,13b0 <_fwalk_reent+0xbc>
    1324:	282b883a 	mov	r21,r5
    1328:	2027883a 	mov	r19,r4
    132c:	002f883a 	mov	r23,zero
    1330:	05800044 	movi	r22,1
    1334:	04bfffc4 	movi	r18,-1
    1338:	a4400117 	ldw	r17,4(r20)
    133c:	a4000217 	ldw	r16,8(r20)
    1340:	8c7fffc4 	addi	r17,r17,-1
    1344:	88000c16 	blt	r17,zero,1378 <_fwalk_reent+0x84>
    1348:	84000304 	addi	r16,r16,12
    134c:	8080000b 	ldhu	r2,0(r16)
    1350:	8c7fffc4 	addi	r17,r17,-1
    1354:	817ffd04 	addi	r5,r16,-12
    1358:	b080052e 	bgeu	r22,r2,1370 <_fwalk_reent+0x7c>
    135c:	8080008f 	ldh	r2,2(r16)
    1360:	9809883a 	mov	r4,r19
    1364:	14800226 	beq	r2,r18,1370 <_fwalk_reent+0x7c>
    1368:	a83ee83a 	callr	r21
    136c:	b8aeb03a 	or	r23,r23,r2
    1370:	84001a04 	addi	r16,r16,104
    1374:	8cbff51e 	bne	r17,r18,134c <__alt_mem_Onchip_SRAM+0xf800134c>
    1378:	a5000017 	ldw	r20,0(r20)
    137c:	a03fee1e 	bne	r20,zero,1338 <__alt_mem_Onchip_SRAM+0xf8001338>
    1380:	b805883a 	mov	r2,r23
    1384:	dfc00817 	ldw	ra,32(sp)
    1388:	ddc00717 	ldw	r23,28(sp)
    138c:	dd800617 	ldw	r22,24(sp)
    1390:	dd400517 	ldw	r21,20(sp)
    1394:	dd000417 	ldw	r20,16(sp)
    1398:	dcc00317 	ldw	r19,12(sp)
    139c:	dc800217 	ldw	r18,8(sp)
    13a0:	dc400117 	ldw	r17,4(sp)
    13a4:	dc000017 	ldw	r16,0(sp)
    13a8:	dec00904 	addi	sp,sp,36
    13ac:	f800283a 	ret
    13b0:	002f883a 	mov	r23,zero
    13b4:	003ff206 	br	1380 <__alt_mem_Onchip_SRAM+0xf8001380>

000013b8 <_gettimeofday_r>:
    13b8:	defffd04 	addi	sp,sp,-12
    13bc:	2805883a 	mov	r2,r5
    13c0:	dc000015 	stw	r16,0(sp)
    13c4:	04000074 	movhi	r16,1
    13c8:	dc400115 	stw	r17,4(sp)
    13cc:	84286b04 	addi	r16,r16,-24148
    13d0:	2023883a 	mov	r17,r4
    13d4:	300b883a 	mov	r5,r6
    13d8:	1009883a 	mov	r4,r2
    13dc:	dfc00215 	stw	ra,8(sp)
    13e0:	80000015 	stw	zero,0(r16)
    13e4:	00038180 	call	3818 <gettimeofday>
    13e8:	00ffffc4 	movi	r3,-1
    13ec:	10c00526 	beq	r2,r3,1404 <_gettimeofday_r+0x4c>
    13f0:	dfc00217 	ldw	ra,8(sp)
    13f4:	dc400117 	ldw	r17,4(sp)
    13f8:	dc000017 	ldw	r16,0(sp)
    13fc:	dec00304 	addi	sp,sp,12
    1400:	f800283a 	ret
    1404:	80c00017 	ldw	r3,0(r16)
    1408:	183ff926 	beq	r3,zero,13f0 <__alt_mem_Onchip_SRAM+0xf80013f0>
    140c:	88c00015 	stw	r3,0(r17)
    1410:	003ff706 	br	13f0 <__alt_mem_Onchip_SRAM+0xf80013f0>

00001414 <_malloc_r>:
    1414:	defff504 	addi	sp,sp,-44
    1418:	dc800315 	stw	r18,12(sp)
    141c:	dfc00a15 	stw	ra,40(sp)
    1420:	df000915 	stw	fp,36(sp)
    1424:	ddc00815 	stw	r23,32(sp)
    1428:	dd800715 	stw	r22,28(sp)
    142c:	dd400615 	stw	r21,24(sp)
    1430:	dd000515 	stw	r20,20(sp)
    1434:	dcc00415 	stw	r19,16(sp)
    1438:	dc400215 	stw	r17,8(sp)
    143c:	dc000115 	stw	r16,4(sp)
    1440:	288002c4 	addi	r2,r5,11
    1444:	00c00584 	movi	r3,22
    1448:	2025883a 	mov	r18,r4
    144c:	18807f2e 	bgeu	r3,r2,164c <_malloc_r+0x238>
    1450:	047ffe04 	movi	r17,-8
    1454:	1462703a 	and	r17,r2,r17
    1458:	8800a316 	blt	r17,zero,16e8 <_malloc_r+0x2d4>
    145c:	8940a236 	bltu	r17,r5,16e8 <_malloc_r+0x2d4>
    1460:	0003d740 	call	3d74 <__malloc_lock>
    1464:	00807dc4 	movi	r2,503
    1468:	1441e92e 	bgeu	r2,r17,1c10 <_malloc_r+0x7fc>
    146c:	8804d27a 	srli	r2,r17,9
    1470:	1000a126 	beq	r2,zero,16f8 <_malloc_r+0x2e4>
    1474:	00c00104 	movi	r3,4
    1478:	18811e36 	bltu	r3,r2,18f4 <_malloc_r+0x4e0>
    147c:	8804d1ba 	srli	r2,r17,6
    1480:	12000e44 	addi	r8,r2,57
    1484:	11c00e04 	addi	r7,r2,56
    1488:	4209883a 	add	r4,r8,r8
    148c:	04c00034 	movhi	r19,0
    1490:	2109883a 	add	r4,r4,r4
    1494:	9cdc1804 	addi	r19,r19,28768
    1498:	2109883a 	add	r4,r4,r4
    149c:	9909883a 	add	r4,r19,r4
    14a0:	24000117 	ldw	r16,4(r4)
    14a4:	213ffe04 	addi	r4,r4,-8
    14a8:	24009726 	beq	r4,r16,1708 <_malloc_r+0x2f4>
    14ac:	80800117 	ldw	r2,4(r16)
    14b0:	01bfff04 	movi	r6,-4
    14b4:	014003c4 	movi	r5,15
    14b8:	1184703a 	and	r2,r2,r6
    14bc:	1447c83a 	sub	r3,r2,r17
    14c0:	28c00716 	blt	r5,r3,14e0 <_malloc_r+0xcc>
    14c4:	1800920e 	bge	r3,zero,1710 <_malloc_r+0x2fc>
    14c8:	84000317 	ldw	r16,12(r16)
    14cc:	24008e26 	beq	r4,r16,1708 <_malloc_r+0x2f4>
    14d0:	80800117 	ldw	r2,4(r16)
    14d4:	1184703a 	and	r2,r2,r6
    14d8:	1447c83a 	sub	r3,r2,r17
    14dc:	28fff90e 	bge	r5,r3,14c4 <__alt_mem_Onchip_SRAM+0xf80014c4>
    14e0:	3809883a 	mov	r4,r7
    14e4:	01800034 	movhi	r6,0
    14e8:	9c000417 	ldw	r16,16(r19)
    14ec:	319c1804 	addi	r6,r6,28768
    14f0:	32000204 	addi	r8,r6,8
    14f4:	82013426 	beq	r16,r8,19c8 <_malloc_r+0x5b4>
    14f8:	80c00117 	ldw	r3,4(r16)
    14fc:	00bfff04 	movi	r2,-4
    1500:	188e703a 	and	r7,r3,r2
    1504:	3c45c83a 	sub	r2,r7,r17
    1508:	00c003c4 	movi	r3,15
    150c:	18811f16 	blt	r3,r2,198c <_malloc_r+0x578>
    1510:	32000515 	stw	r8,20(r6)
    1514:	32000415 	stw	r8,16(r6)
    1518:	10007f0e 	bge	r2,zero,1718 <_malloc_r+0x304>
    151c:	00807fc4 	movi	r2,511
    1520:	11c0fd36 	bltu	r2,r7,1918 <_malloc_r+0x504>
    1524:	3806d0fa 	srli	r3,r7,3
    1528:	01c00044 	movi	r7,1
    152c:	30800117 	ldw	r2,4(r6)
    1530:	19400044 	addi	r5,r3,1
    1534:	294b883a 	add	r5,r5,r5
    1538:	1807d0ba 	srai	r3,r3,2
    153c:	294b883a 	add	r5,r5,r5
    1540:	294b883a 	add	r5,r5,r5
    1544:	298b883a 	add	r5,r5,r6
    1548:	38c6983a 	sll	r3,r7,r3
    154c:	29c00017 	ldw	r7,0(r5)
    1550:	2a7ffe04 	addi	r9,r5,-8
    1554:	1886b03a 	or	r3,r3,r2
    1558:	82400315 	stw	r9,12(r16)
    155c:	81c00215 	stw	r7,8(r16)
    1560:	30c00115 	stw	r3,4(r6)
    1564:	2c000015 	stw	r16,0(r5)
    1568:	3c000315 	stw	r16,12(r7)
    156c:	2005d0ba 	srai	r2,r4,2
    1570:	01400044 	movi	r5,1
    1574:	288a983a 	sll	r5,r5,r2
    1578:	19406f36 	bltu	r3,r5,1738 <_malloc_r+0x324>
    157c:	28c4703a 	and	r2,r5,r3
    1580:	10000a1e 	bne	r2,zero,15ac <_malloc_r+0x198>
    1584:	00bfff04 	movi	r2,-4
    1588:	294b883a 	add	r5,r5,r5
    158c:	2088703a 	and	r4,r4,r2
    1590:	28c4703a 	and	r2,r5,r3
    1594:	21000104 	addi	r4,r4,4
    1598:	1000041e 	bne	r2,zero,15ac <_malloc_r+0x198>
    159c:	294b883a 	add	r5,r5,r5
    15a0:	28c4703a 	and	r2,r5,r3
    15a4:	21000104 	addi	r4,r4,4
    15a8:	103ffc26 	beq	r2,zero,159c <__alt_mem_Onchip_SRAM+0xf800159c>
    15ac:	02bfff04 	movi	r10,-4
    15b0:	024003c4 	movi	r9,15
    15b4:	21800044 	addi	r6,r4,1
    15b8:	318d883a 	add	r6,r6,r6
    15bc:	318d883a 	add	r6,r6,r6
    15c0:	318d883a 	add	r6,r6,r6
    15c4:	998d883a 	add	r6,r19,r6
    15c8:	333ffe04 	addi	r12,r6,-8
    15cc:	2017883a 	mov	r11,r4
    15d0:	31800104 	addi	r6,r6,4
    15d4:	34000017 	ldw	r16,0(r6)
    15d8:	31fffd04 	addi	r7,r6,-12
    15dc:	81c0041e 	bne	r16,r7,15f0 <_malloc_r+0x1dc>
    15e0:	0000fb06 	br	19d0 <_malloc_r+0x5bc>
    15e4:	1801030e 	bge	r3,zero,19f4 <_malloc_r+0x5e0>
    15e8:	84000317 	ldw	r16,12(r16)
    15ec:	81c0f826 	beq	r16,r7,19d0 <_malloc_r+0x5bc>
    15f0:	80800117 	ldw	r2,4(r16)
    15f4:	1284703a 	and	r2,r2,r10
    15f8:	1447c83a 	sub	r3,r2,r17
    15fc:	48fff90e 	bge	r9,r3,15e4 <__alt_mem_Onchip_SRAM+0xf80015e4>
    1600:	80800317 	ldw	r2,12(r16)
    1604:	81000217 	ldw	r4,8(r16)
    1608:	89400054 	ori	r5,r17,1
    160c:	81400115 	stw	r5,4(r16)
    1610:	20800315 	stw	r2,12(r4)
    1614:	11000215 	stw	r4,8(r2)
    1618:	8463883a 	add	r17,r16,r17
    161c:	9c400515 	stw	r17,20(r19)
    1620:	9c400415 	stw	r17,16(r19)
    1624:	18800054 	ori	r2,r3,1
    1628:	88800115 	stw	r2,4(r17)
    162c:	8a000315 	stw	r8,12(r17)
    1630:	8a000215 	stw	r8,8(r17)
    1634:	88e3883a 	add	r17,r17,r3
    1638:	88c00015 	stw	r3,0(r17)
    163c:	9009883a 	mov	r4,r18
    1640:	0003d980 	call	3d98 <__malloc_unlock>
    1644:	80800204 	addi	r2,r16,8
    1648:	00001b06 	br	16b8 <_malloc_r+0x2a4>
    164c:	04400404 	movi	r17,16
    1650:	89402536 	bltu	r17,r5,16e8 <_malloc_r+0x2d4>
    1654:	0003d740 	call	3d74 <__malloc_lock>
    1658:	00800184 	movi	r2,6
    165c:	01000084 	movi	r4,2
    1660:	04c00034 	movhi	r19,0
    1664:	1085883a 	add	r2,r2,r2
    1668:	9cdc1804 	addi	r19,r19,28768
    166c:	1085883a 	add	r2,r2,r2
    1670:	9885883a 	add	r2,r19,r2
    1674:	14000117 	ldw	r16,4(r2)
    1678:	10fffe04 	addi	r3,r2,-8
    167c:	80c0d926 	beq	r16,r3,19e4 <_malloc_r+0x5d0>
    1680:	80c00117 	ldw	r3,4(r16)
    1684:	81000317 	ldw	r4,12(r16)
    1688:	00bfff04 	movi	r2,-4
    168c:	1884703a 	and	r2,r3,r2
    1690:	81400217 	ldw	r5,8(r16)
    1694:	8085883a 	add	r2,r16,r2
    1698:	10c00117 	ldw	r3,4(r2)
    169c:	29000315 	stw	r4,12(r5)
    16a0:	21400215 	stw	r5,8(r4)
    16a4:	18c00054 	ori	r3,r3,1
    16a8:	10c00115 	stw	r3,4(r2)
    16ac:	9009883a 	mov	r4,r18
    16b0:	0003d980 	call	3d98 <__malloc_unlock>
    16b4:	80800204 	addi	r2,r16,8
    16b8:	dfc00a17 	ldw	ra,40(sp)
    16bc:	df000917 	ldw	fp,36(sp)
    16c0:	ddc00817 	ldw	r23,32(sp)
    16c4:	dd800717 	ldw	r22,28(sp)
    16c8:	dd400617 	ldw	r21,24(sp)
    16cc:	dd000517 	ldw	r20,20(sp)
    16d0:	dcc00417 	ldw	r19,16(sp)
    16d4:	dc800317 	ldw	r18,12(sp)
    16d8:	dc400217 	ldw	r17,8(sp)
    16dc:	dc000117 	ldw	r16,4(sp)
    16e0:	dec00b04 	addi	sp,sp,44
    16e4:	f800283a 	ret
    16e8:	00800304 	movi	r2,12
    16ec:	90800015 	stw	r2,0(r18)
    16f0:	0005883a 	mov	r2,zero
    16f4:	003ff006 	br	16b8 <__alt_mem_Onchip_SRAM+0xf80016b8>
    16f8:	01002004 	movi	r4,128
    16fc:	02001004 	movi	r8,64
    1700:	01c00fc4 	movi	r7,63
    1704:	003f6106 	br	148c <__alt_mem_Onchip_SRAM+0xf800148c>
    1708:	4009883a 	mov	r4,r8
    170c:	003f7506 	br	14e4 <__alt_mem_Onchip_SRAM+0xf80014e4>
    1710:	81000317 	ldw	r4,12(r16)
    1714:	003fde06 	br	1690 <__alt_mem_Onchip_SRAM+0xf8001690>
    1718:	81c5883a 	add	r2,r16,r7
    171c:	11400117 	ldw	r5,4(r2)
    1720:	9009883a 	mov	r4,r18
    1724:	29400054 	ori	r5,r5,1
    1728:	11400115 	stw	r5,4(r2)
    172c:	0003d980 	call	3d98 <__malloc_unlock>
    1730:	80800204 	addi	r2,r16,8
    1734:	003fe006 	br	16b8 <__alt_mem_Onchip_SRAM+0xf80016b8>
    1738:	9c000217 	ldw	r16,8(r19)
    173c:	00bfff04 	movi	r2,-4
    1740:	85800117 	ldw	r22,4(r16)
    1744:	b0ac703a 	and	r22,r22,r2
    1748:	b4400336 	bltu	r22,r17,1758 <_malloc_r+0x344>
    174c:	b445c83a 	sub	r2,r22,r17
    1750:	00c003c4 	movi	r3,15
    1754:	18805d16 	blt	r3,r2,18cc <_malloc_r+0x4b8>
    1758:	05c00074 	movhi	r23,1
    175c:	00800074 	movhi	r2,1
    1760:	10a86e04 	addi	r2,r2,-24136
    1764:	bde1af04 	addi	r23,r23,-31044
    1768:	15400017 	ldw	r21,0(r2)
    176c:	b8c00017 	ldw	r3,0(r23)
    1770:	00bfffc4 	movi	r2,-1
    1774:	858d883a 	add	r6,r16,r22
    1778:	8d6b883a 	add	r21,r17,r21
    177c:	1880ea26 	beq	r3,r2,1b28 <_malloc_r+0x714>
    1780:	ad4403c4 	addi	r21,r21,4111
    1784:	00bc0004 	movi	r2,-4096
    1788:	a8aa703a 	and	r21,r21,r2
    178c:	a80b883a 	mov	r5,r21
    1790:	9009883a 	mov	r4,r18
    1794:	d9800015 	stw	r6,0(sp)
    1798:	00026340 	call	2634 <_sbrk_r>
    179c:	1029883a 	mov	r20,r2
    17a0:	00bfffc4 	movi	r2,-1
    17a4:	d9800017 	ldw	r6,0(sp)
    17a8:	a080e826 	beq	r20,r2,1b4c <_malloc_r+0x738>
    17ac:	a180a636 	bltu	r20,r6,1a48 <_malloc_r+0x634>
    17b0:	07000074 	movhi	fp,1
    17b4:	e7287a04 	addi	fp,fp,-24088
    17b8:	e0800017 	ldw	r2,0(fp)
    17bc:	a887883a 	add	r3,r21,r2
    17c0:	e0c00015 	stw	r3,0(fp)
    17c4:	3500e626 	beq	r6,r20,1b60 <_malloc_r+0x74c>
    17c8:	b9000017 	ldw	r4,0(r23)
    17cc:	00bfffc4 	movi	r2,-1
    17d0:	2080ee26 	beq	r4,r2,1b8c <_malloc_r+0x778>
    17d4:	a185c83a 	sub	r2,r20,r6
    17d8:	10c5883a 	add	r2,r2,r3
    17dc:	e0800015 	stw	r2,0(fp)
    17e0:	a0c001cc 	andi	r3,r20,7
    17e4:	1800bc26 	beq	r3,zero,1ad8 <_malloc_r+0x6c4>
    17e8:	a0e9c83a 	sub	r20,r20,r3
    17ec:	00840204 	movi	r2,4104
    17f0:	a5000204 	addi	r20,r20,8
    17f4:	10c7c83a 	sub	r3,r2,r3
    17f8:	a545883a 	add	r2,r20,r21
    17fc:	1083ffcc 	andi	r2,r2,4095
    1800:	18abc83a 	sub	r21,r3,r2
    1804:	a80b883a 	mov	r5,r21
    1808:	9009883a 	mov	r4,r18
    180c:	00026340 	call	2634 <_sbrk_r>
    1810:	00ffffc4 	movi	r3,-1
    1814:	10c0e126 	beq	r2,r3,1b9c <_malloc_r+0x788>
    1818:	1505c83a 	sub	r2,r2,r20
    181c:	1545883a 	add	r2,r2,r21
    1820:	10800054 	ori	r2,r2,1
    1824:	e0c00017 	ldw	r3,0(fp)
    1828:	9d000215 	stw	r20,8(r19)
    182c:	a0800115 	stw	r2,4(r20)
    1830:	a8c7883a 	add	r3,r21,r3
    1834:	e0c00015 	stw	r3,0(fp)
    1838:	84c00e26 	beq	r16,r19,1874 <_malloc_r+0x460>
    183c:	018003c4 	movi	r6,15
    1840:	3580a72e 	bgeu	r6,r22,1ae0 <_malloc_r+0x6cc>
    1844:	81400117 	ldw	r5,4(r16)
    1848:	013ffe04 	movi	r4,-8
    184c:	b0bffd04 	addi	r2,r22,-12
    1850:	1104703a 	and	r2,r2,r4
    1854:	2900004c 	andi	r4,r5,1
    1858:	2088b03a 	or	r4,r4,r2
    185c:	81000115 	stw	r4,4(r16)
    1860:	01400144 	movi	r5,5
    1864:	8089883a 	add	r4,r16,r2
    1868:	21400115 	stw	r5,4(r4)
    186c:	21400215 	stw	r5,8(r4)
    1870:	3080cd36 	bltu	r6,r2,1ba8 <_malloc_r+0x794>
    1874:	00800074 	movhi	r2,1
    1878:	10a86d04 	addi	r2,r2,-24140
    187c:	11000017 	ldw	r4,0(r2)
    1880:	20c0012e 	bgeu	r4,r3,1888 <_malloc_r+0x474>
    1884:	10c00015 	stw	r3,0(r2)
    1888:	00800074 	movhi	r2,1
    188c:	10a86c04 	addi	r2,r2,-24144
    1890:	11000017 	ldw	r4,0(r2)
    1894:	9c000217 	ldw	r16,8(r19)
    1898:	20c0012e 	bgeu	r4,r3,18a0 <_malloc_r+0x48c>
    189c:	10c00015 	stw	r3,0(r2)
    18a0:	80c00117 	ldw	r3,4(r16)
    18a4:	00bfff04 	movi	r2,-4
    18a8:	1886703a 	and	r3,r3,r2
    18ac:	1c45c83a 	sub	r2,r3,r17
    18b0:	1c400236 	bltu	r3,r17,18bc <_malloc_r+0x4a8>
    18b4:	00c003c4 	movi	r3,15
    18b8:	18800416 	blt	r3,r2,18cc <_malloc_r+0x4b8>
    18bc:	9009883a 	mov	r4,r18
    18c0:	0003d980 	call	3d98 <__malloc_unlock>
    18c4:	0005883a 	mov	r2,zero
    18c8:	003f7b06 	br	16b8 <__alt_mem_Onchip_SRAM+0xf80016b8>
    18cc:	88c00054 	ori	r3,r17,1
    18d0:	80c00115 	stw	r3,4(r16)
    18d4:	8463883a 	add	r17,r16,r17
    18d8:	10800054 	ori	r2,r2,1
    18dc:	9c400215 	stw	r17,8(r19)
    18e0:	88800115 	stw	r2,4(r17)
    18e4:	9009883a 	mov	r4,r18
    18e8:	0003d980 	call	3d98 <__malloc_unlock>
    18ec:	80800204 	addi	r2,r16,8
    18f0:	003f7106 	br	16b8 <__alt_mem_Onchip_SRAM+0xf80016b8>
    18f4:	00c00504 	movi	r3,20
    18f8:	18804a2e 	bgeu	r3,r2,1a24 <_malloc_r+0x610>
    18fc:	00c01504 	movi	r3,84
    1900:	18806e36 	bltu	r3,r2,1abc <_malloc_r+0x6a8>
    1904:	8804d33a 	srli	r2,r17,12
    1908:	12001bc4 	addi	r8,r2,111
    190c:	11c01b84 	addi	r7,r2,110
    1910:	4209883a 	add	r4,r8,r8
    1914:	003edd06 	br	148c <__alt_mem_Onchip_SRAM+0xf800148c>
    1918:	3804d27a 	srli	r2,r7,9
    191c:	00c00104 	movi	r3,4
    1920:	1880442e 	bgeu	r3,r2,1a34 <_malloc_r+0x620>
    1924:	00c00504 	movi	r3,20
    1928:	18808136 	bltu	r3,r2,1b30 <_malloc_r+0x71c>
    192c:	11401704 	addi	r5,r2,92
    1930:	10c016c4 	addi	r3,r2,91
    1934:	294b883a 	add	r5,r5,r5
    1938:	294b883a 	add	r5,r5,r5
    193c:	294b883a 	add	r5,r5,r5
    1940:	994b883a 	add	r5,r19,r5
    1944:	28800017 	ldw	r2,0(r5)
    1948:	01800034 	movhi	r6,0
    194c:	297ffe04 	addi	r5,r5,-8
    1950:	319c1804 	addi	r6,r6,28768
    1954:	28806526 	beq	r5,r2,1aec <_malloc_r+0x6d8>
    1958:	01bfff04 	movi	r6,-4
    195c:	10c00117 	ldw	r3,4(r2)
    1960:	1986703a 	and	r3,r3,r6
    1964:	38c0022e 	bgeu	r7,r3,1970 <_malloc_r+0x55c>
    1968:	10800217 	ldw	r2,8(r2)
    196c:	28bffb1e 	bne	r5,r2,195c <__alt_mem_Onchip_SRAM+0xf800195c>
    1970:	11400317 	ldw	r5,12(r2)
    1974:	98c00117 	ldw	r3,4(r19)
    1978:	81400315 	stw	r5,12(r16)
    197c:	80800215 	stw	r2,8(r16)
    1980:	2c000215 	stw	r16,8(r5)
    1984:	14000315 	stw	r16,12(r2)
    1988:	003ef806 	br	156c <__alt_mem_Onchip_SRAM+0xf800156c>
    198c:	88c00054 	ori	r3,r17,1
    1990:	80c00115 	stw	r3,4(r16)
    1994:	8463883a 	add	r17,r16,r17
    1998:	34400515 	stw	r17,20(r6)
    199c:	34400415 	stw	r17,16(r6)
    19a0:	10c00054 	ori	r3,r2,1
    19a4:	8a000315 	stw	r8,12(r17)
    19a8:	8a000215 	stw	r8,8(r17)
    19ac:	88c00115 	stw	r3,4(r17)
    19b0:	88a3883a 	add	r17,r17,r2
    19b4:	88800015 	stw	r2,0(r17)
    19b8:	9009883a 	mov	r4,r18
    19bc:	0003d980 	call	3d98 <__malloc_unlock>
    19c0:	80800204 	addi	r2,r16,8
    19c4:	003f3c06 	br	16b8 <__alt_mem_Onchip_SRAM+0xf80016b8>
    19c8:	30c00117 	ldw	r3,4(r6)
    19cc:	003ee706 	br	156c <__alt_mem_Onchip_SRAM+0xf800156c>
    19d0:	5ac00044 	addi	r11,r11,1
    19d4:	588000cc 	andi	r2,r11,3
    19d8:	31800204 	addi	r6,r6,8
    19dc:	103efd1e 	bne	r2,zero,15d4 <__alt_mem_Onchip_SRAM+0xf80015d4>
    19e0:	00002406 	br	1a74 <_malloc_r+0x660>
    19e4:	14000317 	ldw	r16,12(r2)
    19e8:	143f251e 	bne	r2,r16,1680 <__alt_mem_Onchip_SRAM+0xf8001680>
    19ec:	21000084 	addi	r4,r4,2
    19f0:	003ebc06 	br	14e4 <__alt_mem_Onchip_SRAM+0xf80014e4>
    19f4:	8085883a 	add	r2,r16,r2
    19f8:	10c00117 	ldw	r3,4(r2)
    19fc:	81000317 	ldw	r4,12(r16)
    1a00:	81400217 	ldw	r5,8(r16)
    1a04:	18c00054 	ori	r3,r3,1
    1a08:	10c00115 	stw	r3,4(r2)
    1a0c:	29000315 	stw	r4,12(r5)
    1a10:	21400215 	stw	r5,8(r4)
    1a14:	9009883a 	mov	r4,r18
    1a18:	0003d980 	call	3d98 <__malloc_unlock>
    1a1c:	80800204 	addi	r2,r16,8
    1a20:	003f2506 	br	16b8 <__alt_mem_Onchip_SRAM+0xf80016b8>
    1a24:	12001704 	addi	r8,r2,92
    1a28:	11c016c4 	addi	r7,r2,91
    1a2c:	4209883a 	add	r4,r8,r8
    1a30:	003e9606 	br	148c <__alt_mem_Onchip_SRAM+0xf800148c>
    1a34:	3804d1ba 	srli	r2,r7,6
    1a38:	11400e44 	addi	r5,r2,57
    1a3c:	10c00e04 	addi	r3,r2,56
    1a40:	294b883a 	add	r5,r5,r5
    1a44:	003fbc06 	br	1938 <__alt_mem_Onchip_SRAM+0xf8001938>
    1a48:	84ff5926 	beq	r16,r19,17b0 <__alt_mem_Onchip_SRAM+0xf80017b0>
    1a4c:	00800034 	movhi	r2,0
    1a50:	109c1804 	addi	r2,r2,28768
    1a54:	14000217 	ldw	r16,8(r2)
    1a58:	00bfff04 	movi	r2,-4
    1a5c:	80c00117 	ldw	r3,4(r16)
    1a60:	1886703a 	and	r3,r3,r2
    1a64:	003f9106 	br	18ac <__alt_mem_Onchip_SRAM+0xf80018ac>
    1a68:	60800217 	ldw	r2,8(r12)
    1a6c:	213fffc4 	addi	r4,r4,-1
    1a70:	1300651e 	bne	r2,r12,1c08 <_malloc_r+0x7f4>
    1a74:	208000cc 	andi	r2,r4,3
    1a78:	633ffe04 	addi	r12,r12,-8
    1a7c:	103ffa1e 	bne	r2,zero,1a68 <__alt_mem_Onchip_SRAM+0xf8001a68>
    1a80:	98800117 	ldw	r2,4(r19)
    1a84:	0146303a 	nor	r3,zero,r5
    1a88:	1884703a 	and	r2,r3,r2
    1a8c:	98800115 	stw	r2,4(r19)
    1a90:	294b883a 	add	r5,r5,r5
    1a94:	117f2836 	bltu	r2,r5,1738 <__alt_mem_Onchip_SRAM+0xf8001738>
    1a98:	283f2726 	beq	r5,zero,1738 <__alt_mem_Onchip_SRAM+0xf8001738>
    1a9c:	2886703a 	and	r3,r5,r2
    1aa0:	5809883a 	mov	r4,r11
    1aa4:	183ec31e 	bne	r3,zero,15b4 <__alt_mem_Onchip_SRAM+0xf80015b4>
    1aa8:	294b883a 	add	r5,r5,r5
    1aac:	2886703a 	and	r3,r5,r2
    1ab0:	21000104 	addi	r4,r4,4
    1ab4:	183ffc26 	beq	r3,zero,1aa8 <__alt_mem_Onchip_SRAM+0xf8001aa8>
    1ab8:	003ebe06 	br	15b4 <__alt_mem_Onchip_SRAM+0xf80015b4>
    1abc:	00c05504 	movi	r3,340
    1ac0:	18801236 	bltu	r3,r2,1b0c <_malloc_r+0x6f8>
    1ac4:	8804d3fa 	srli	r2,r17,15
    1ac8:	12001e04 	addi	r8,r2,120
    1acc:	11c01dc4 	addi	r7,r2,119
    1ad0:	4209883a 	add	r4,r8,r8
    1ad4:	003e6d06 	br	148c <__alt_mem_Onchip_SRAM+0xf800148c>
    1ad8:	00c40004 	movi	r3,4096
    1adc:	003f4606 	br	17f8 <__alt_mem_Onchip_SRAM+0xf80017f8>
    1ae0:	00800044 	movi	r2,1
    1ae4:	a0800115 	stw	r2,4(r20)
    1ae8:	003f7406 	br	18bc <__alt_mem_Onchip_SRAM+0xf80018bc>
    1aec:	1805d0ba 	srai	r2,r3,2
    1af0:	01c00044 	movi	r7,1
    1af4:	30c00117 	ldw	r3,4(r6)
    1af8:	388e983a 	sll	r7,r7,r2
    1afc:	2805883a 	mov	r2,r5
    1b00:	38c6b03a 	or	r3,r7,r3
    1b04:	30c00115 	stw	r3,4(r6)
    1b08:	003f9b06 	br	1978 <__alt_mem_Onchip_SRAM+0xf8001978>
    1b0c:	00c15504 	movi	r3,1364
    1b10:	18801a36 	bltu	r3,r2,1b7c <_malloc_r+0x768>
    1b14:	8804d4ba 	srli	r2,r17,18
    1b18:	12001f44 	addi	r8,r2,125
    1b1c:	11c01f04 	addi	r7,r2,124
    1b20:	4209883a 	add	r4,r8,r8
    1b24:	003e5906 	br	148c <__alt_mem_Onchip_SRAM+0xf800148c>
    1b28:	ad400404 	addi	r21,r21,16
    1b2c:	003f1706 	br	178c <__alt_mem_Onchip_SRAM+0xf800178c>
    1b30:	00c01504 	movi	r3,84
    1b34:	18802336 	bltu	r3,r2,1bc4 <_malloc_r+0x7b0>
    1b38:	3804d33a 	srli	r2,r7,12
    1b3c:	11401bc4 	addi	r5,r2,111
    1b40:	10c01b84 	addi	r3,r2,110
    1b44:	294b883a 	add	r5,r5,r5
    1b48:	003f7b06 	br	1938 <__alt_mem_Onchip_SRAM+0xf8001938>
    1b4c:	9c000217 	ldw	r16,8(r19)
    1b50:	00bfff04 	movi	r2,-4
    1b54:	80c00117 	ldw	r3,4(r16)
    1b58:	1886703a 	and	r3,r3,r2
    1b5c:	003f5306 	br	18ac <__alt_mem_Onchip_SRAM+0xf80018ac>
    1b60:	3083ffcc 	andi	r2,r6,4095
    1b64:	103f181e 	bne	r2,zero,17c8 <__alt_mem_Onchip_SRAM+0xf80017c8>
    1b68:	99000217 	ldw	r4,8(r19)
    1b6c:	b545883a 	add	r2,r22,r21
    1b70:	10800054 	ori	r2,r2,1
    1b74:	20800115 	stw	r2,4(r4)
    1b78:	003f3e06 	br	1874 <__alt_mem_Onchip_SRAM+0xf8001874>
    1b7c:	01003f84 	movi	r4,254
    1b80:	02001fc4 	movi	r8,127
    1b84:	01c01f84 	movi	r7,126
    1b88:	003e4006 	br	148c <__alt_mem_Onchip_SRAM+0xf800148c>
    1b8c:	00800074 	movhi	r2,1
    1b90:	10a1af04 	addi	r2,r2,-31044
    1b94:	15000015 	stw	r20,0(r2)
    1b98:	003f1106 	br	17e0 <__alt_mem_Onchip_SRAM+0xf80017e0>
    1b9c:	00800044 	movi	r2,1
    1ba0:	002b883a 	mov	r21,zero
    1ba4:	003f1f06 	br	1824 <__alt_mem_Onchip_SRAM+0xf8001824>
    1ba8:	81400204 	addi	r5,r16,8
    1bac:	9009883a 	mov	r4,r18
    1bb0:	0002e9c0 	call	2e9c <_free_r>
    1bb4:	00800074 	movhi	r2,1
    1bb8:	10a87a04 	addi	r2,r2,-24088
    1bbc:	10c00017 	ldw	r3,0(r2)
    1bc0:	003f2c06 	br	1874 <__alt_mem_Onchip_SRAM+0xf8001874>
    1bc4:	00c05504 	movi	r3,340
    1bc8:	18800536 	bltu	r3,r2,1be0 <_malloc_r+0x7cc>
    1bcc:	3804d3fa 	srli	r2,r7,15
    1bd0:	11401e04 	addi	r5,r2,120
    1bd4:	10c01dc4 	addi	r3,r2,119
    1bd8:	294b883a 	add	r5,r5,r5
    1bdc:	003f5606 	br	1938 <__alt_mem_Onchip_SRAM+0xf8001938>
    1be0:	00c15504 	movi	r3,1364
    1be4:	18800536 	bltu	r3,r2,1bfc <_malloc_r+0x7e8>
    1be8:	3804d4ba 	srli	r2,r7,18
    1bec:	11401f44 	addi	r5,r2,125
    1bf0:	10c01f04 	addi	r3,r2,124
    1bf4:	294b883a 	add	r5,r5,r5
    1bf8:	003f4f06 	br	1938 <__alt_mem_Onchip_SRAM+0xf8001938>
    1bfc:	01403f84 	movi	r5,254
    1c00:	00c01f84 	movi	r3,126
    1c04:	003f4c06 	br	1938 <__alt_mem_Onchip_SRAM+0xf8001938>
    1c08:	98800117 	ldw	r2,4(r19)
    1c0c:	003fa006 	br	1a90 <__alt_mem_Onchip_SRAM+0xf8001a90>
    1c10:	8808d0fa 	srli	r4,r17,3
    1c14:	20800044 	addi	r2,r4,1
    1c18:	1085883a 	add	r2,r2,r2
    1c1c:	003e9006 	br	1660 <__alt_mem_Onchip_SRAM+0xf8001660>

00001c20 <memchr>:
    1c20:	208000cc 	andi	r2,r4,3
    1c24:	280f883a 	mov	r7,r5
    1c28:	10003426 	beq	r2,zero,1cfc <memchr+0xdc>
    1c2c:	30bfffc4 	addi	r2,r6,-1
    1c30:	30001a26 	beq	r6,zero,1c9c <memchr+0x7c>
    1c34:	20c00003 	ldbu	r3,0(r4)
    1c38:	29803fcc 	andi	r6,r5,255
    1c3c:	30c0051e 	bne	r6,r3,1c54 <memchr+0x34>
    1c40:	00001806 	br	1ca4 <memchr+0x84>
    1c44:	10001526 	beq	r2,zero,1c9c <memchr+0x7c>
    1c48:	20c00003 	ldbu	r3,0(r4)
    1c4c:	10bfffc4 	addi	r2,r2,-1
    1c50:	30c01426 	beq	r6,r3,1ca4 <memchr+0x84>
    1c54:	21000044 	addi	r4,r4,1
    1c58:	20c000cc 	andi	r3,r4,3
    1c5c:	183ff91e 	bne	r3,zero,1c44 <__alt_mem_Onchip_SRAM+0xf8001c44>
    1c60:	020000c4 	movi	r8,3
    1c64:	40801136 	bltu	r8,r2,1cac <memchr+0x8c>
    1c68:	10000c26 	beq	r2,zero,1c9c <memchr+0x7c>
    1c6c:	20c00003 	ldbu	r3,0(r4)
    1c70:	29403fcc 	andi	r5,r5,255
    1c74:	28c00b26 	beq	r5,r3,1ca4 <memchr+0x84>
    1c78:	20c00044 	addi	r3,r4,1
    1c7c:	39803fcc 	andi	r6,r7,255
    1c80:	2089883a 	add	r4,r4,r2
    1c84:	00000306 	br	1c94 <memchr+0x74>
    1c88:	18c00044 	addi	r3,r3,1
    1c8c:	197fffc3 	ldbu	r5,-1(r3)
    1c90:	31400526 	beq	r6,r5,1ca8 <memchr+0x88>
    1c94:	1805883a 	mov	r2,r3
    1c98:	20fffb1e 	bne	r4,r3,1c88 <__alt_mem_Onchip_SRAM+0xf8001c88>
    1c9c:	0005883a 	mov	r2,zero
    1ca0:	f800283a 	ret
    1ca4:	2005883a 	mov	r2,r4
    1ca8:	f800283a 	ret
    1cac:	28c03fcc 	andi	r3,r5,255
    1cb0:	1812923a 	slli	r9,r3,8
    1cb4:	02ffbff4 	movhi	r11,65279
    1cb8:	02a02074 	movhi	r10,32897
    1cbc:	48d2b03a 	or	r9,r9,r3
    1cc0:	4806943a 	slli	r3,r9,16
    1cc4:	5affbfc4 	addi	r11,r11,-257
    1cc8:	52a02004 	addi	r10,r10,-32640
    1ccc:	48d2b03a 	or	r9,r9,r3
    1cd0:	20c00017 	ldw	r3,0(r4)
    1cd4:	48c6f03a 	xor	r3,r9,r3
    1cd8:	1acd883a 	add	r6,r3,r11
    1cdc:	00c6303a 	nor	r3,zero,r3
    1ce0:	30c6703a 	and	r3,r6,r3
    1ce4:	1a86703a 	and	r3,r3,r10
    1ce8:	183fe01e 	bne	r3,zero,1c6c <__alt_mem_Onchip_SRAM+0xf8001c6c>
    1cec:	10bfff04 	addi	r2,r2,-4
    1cf0:	21000104 	addi	r4,r4,4
    1cf4:	40bff636 	bltu	r8,r2,1cd0 <__alt_mem_Onchip_SRAM+0xf8001cd0>
    1cf8:	003fdb06 	br	1c68 <__alt_mem_Onchip_SRAM+0xf8001c68>
    1cfc:	3005883a 	mov	r2,r6
    1d00:	003fd706 	br	1c60 <__alt_mem_Onchip_SRAM+0xf8001c60>

00001d04 <memcpy>:
    1d04:	defffd04 	addi	sp,sp,-12
    1d08:	dfc00215 	stw	ra,8(sp)
    1d0c:	dc400115 	stw	r17,4(sp)
    1d10:	dc000015 	stw	r16,0(sp)
    1d14:	00c003c4 	movi	r3,15
    1d18:	2005883a 	mov	r2,r4
    1d1c:	1980452e 	bgeu	r3,r6,1e34 <memcpy+0x130>
    1d20:	2906b03a 	or	r3,r5,r4
    1d24:	18c000cc 	andi	r3,r3,3
    1d28:	1800441e 	bne	r3,zero,1e3c <memcpy+0x138>
    1d2c:	347ffc04 	addi	r17,r6,-16
    1d30:	8822d13a 	srli	r17,r17,4
    1d34:	28c00104 	addi	r3,r5,4
    1d38:	23400104 	addi	r13,r4,4
    1d3c:	8820913a 	slli	r16,r17,4
    1d40:	2b000204 	addi	r12,r5,8
    1d44:	22c00204 	addi	r11,r4,8
    1d48:	84000504 	addi	r16,r16,20
    1d4c:	2a800304 	addi	r10,r5,12
    1d50:	22400304 	addi	r9,r4,12
    1d54:	2c21883a 	add	r16,r5,r16
    1d58:	2811883a 	mov	r8,r5
    1d5c:	200f883a 	mov	r7,r4
    1d60:	41000017 	ldw	r4,0(r8)
    1d64:	1fc00017 	ldw	ra,0(r3)
    1d68:	63c00017 	ldw	r15,0(r12)
    1d6c:	39000015 	stw	r4,0(r7)
    1d70:	53800017 	ldw	r14,0(r10)
    1d74:	6fc00015 	stw	ra,0(r13)
    1d78:	5bc00015 	stw	r15,0(r11)
    1d7c:	4b800015 	stw	r14,0(r9)
    1d80:	18c00404 	addi	r3,r3,16
    1d84:	39c00404 	addi	r7,r7,16
    1d88:	42000404 	addi	r8,r8,16
    1d8c:	6b400404 	addi	r13,r13,16
    1d90:	63000404 	addi	r12,r12,16
    1d94:	5ac00404 	addi	r11,r11,16
    1d98:	52800404 	addi	r10,r10,16
    1d9c:	4a400404 	addi	r9,r9,16
    1da0:	1c3fef1e 	bne	r3,r16,1d60 <__alt_mem_Onchip_SRAM+0xf8001d60>
    1da4:	89c00044 	addi	r7,r17,1
    1da8:	380e913a 	slli	r7,r7,4
    1dac:	310003cc 	andi	r4,r6,15
    1db0:	02c000c4 	movi	r11,3
    1db4:	11c7883a 	add	r3,r2,r7
    1db8:	29cb883a 	add	r5,r5,r7
    1dbc:	5900212e 	bgeu	r11,r4,1e44 <memcpy+0x140>
    1dc0:	1813883a 	mov	r9,r3
    1dc4:	2811883a 	mov	r8,r5
    1dc8:	200f883a 	mov	r7,r4
    1dcc:	42800017 	ldw	r10,0(r8)
    1dd0:	4a400104 	addi	r9,r9,4
    1dd4:	39ffff04 	addi	r7,r7,-4
    1dd8:	4abfff15 	stw	r10,-4(r9)
    1ddc:	42000104 	addi	r8,r8,4
    1de0:	59fffa36 	bltu	r11,r7,1dcc <__alt_mem_Onchip_SRAM+0xf8001dcc>
    1de4:	213fff04 	addi	r4,r4,-4
    1de8:	2008d0ba 	srli	r4,r4,2
    1dec:	318000cc 	andi	r6,r6,3
    1df0:	21000044 	addi	r4,r4,1
    1df4:	2109883a 	add	r4,r4,r4
    1df8:	2109883a 	add	r4,r4,r4
    1dfc:	1907883a 	add	r3,r3,r4
    1e00:	290b883a 	add	r5,r5,r4
    1e04:	30000626 	beq	r6,zero,1e20 <memcpy+0x11c>
    1e08:	198d883a 	add	r6,r3,r6
    1e0c:	29c00003 	ldbu	r7,0(r5)
    1e10:	18c00044 	addi	r3,r3,1
    1e14:	29400044 	addi	r5,r5,1
    1e18:	19ffffc5 	stb	r7,-1(r3)
    1e1c:	19bffb1e 	bne	r3,r6,1e0c <__alt_mem_Onchip_SRAM+0xf8001e0c>
    1e20:	dfc00217 	ldw	ra,8(sp)
    1e24:	dc400117 	ldw	r17,4(sp)
    1e28:	dc000017 	ldw	r16,0(sp)
    1e2c:	dec00304 	addi	sp,sp,12
    1e30:	f800283a 	ret
    1e34:	2007883a 	mov	r3,r4
    1e38:	003ff206 	br	1e04 <__alt_mem_Onchip_SRAM+0xf8001e04>
    1e3c:	2007883a 	mov	r3,r4
    1e40:	003ff106 	br	1e08 <__alt_mem_Onchip_SRAM+0xf8001e08>
    1e44:	200d883a 	mov	r6,r4
    1e48:	003fee06 	br	1e04 <__alt_mem_Onchip_SRAM+0xf8001e04>

00001e4c <memmove>:
    1e4c:	2005883a 	mov	r2,r4
    1e50:	29000b2e 	bgeu	r5,r4,1e80 <memmove+0x34>
    1e54:	298f883a 	add	r7,r5,r6
    1e58:	21c0092e 	bgeu	r4,r7,1e80 <memmove+0x34>
    1e5c:	2187883a 	add	r3,r4,r6
    1e60:	198bc83a 	sub	r5,r3,r6
    1e64:	30004826 	beq	r6,zero,1f88 <memmove+0x13c>
    1e68:	39ffffc4 	addi	r7,r7,-1
    1e6c:	39000003 	ldbu	r4,0(r7)
    1e70:	18ffffc4 	addi	r3,r3,-1
    1e74:	19000005 	stb	r4,0(r3)
    1e78:	28fffb1e 	bne	r5,r3,1e68 <__alt_mem_Onchip_SRAM+0xf8001e68>
    1e7c:	f800283a 	ret
    1e80:	00c003c4 	movi	r3,15
    1e84:	1980412e 	bgeu	r3,r6,1f8c <memmove+0x140>
    1e88:	2886b03a 	or	r3,r5,r2
    1e8c:	18c000cc 	andi	r3,r3,3
    1e90:	1800401e 	bne	r3,zero,1f94 <memmove+0x148>
    1e94:	33fffc04 	addi	r15,r6,-16
    1e98:	781ed13a 	srli	r15,r15,4
    1e9c:	28c00104 	addi	r3,r5,4
    1ea0:	13400104 	addi	r13,r2,4
    1ea4:	781c913a 	slli	r14,r15,4
    1ea8:	2b000204 	addi	r12,r5,8
    1eac:	12c00204 	addi	r11,r2,8
    1eb0:	73800504 	addi	r14,r14,20
    1eb4:	2a800304 	addi	r10,r5,12
    1eb8:	12400304 	addi	r9,r2,12
    1ebc:	2b9d883a 	add	r14,r5,r14
    1ec0:	2811883a 	mov	r8,r5
    1ec4:	100f883a 	mov	r7,r2
    1ec8:	41000017 	ldw	r4,0(r8)
    1ecc:	39c00404 	addi	r7,r7,16
    1ed0:	18c00404 	addi	r3,r3,16
    1ed4:	393ffc15 	stw	r4,-16(r7)
    1ed8:	193ffc17 	ldw	r4,-16(r3)
    1edc:	6b400404 	addi	r13,r13,16
    1ee0:	5ac00404 	addi	r11,r11,16
    1ee4:	693ffc15 	stw	r4,-16(r13)
    1ee8:	61000017 	ldw	r4,0(r12)
    1eec:	4a400404 	addi	r9,r9,16
    1ef0:	42000404 	addi	r8,r8,16
    1ef4:	593ffc15 	stw	r4,-16(r11)
    1ef8:	51000017 	ldw	r4,0(r10)
    1efc:	63000404 	addi	r12,r12,16
    1f00:	52800404 	addi	r10,r10,16
    1f04:	493ffc15 	stw	r4,-16(r9)
    1f08:	1bbfef1e 	bne	r3,r14,1ec8 <__alt_mem_Onchip_SRAM+0xf8001ec8>
    1f0c:	79000044 	addi	r4,r15,1
    1f10:	2008913a 	slli	r4,r4,4
    1f14:	328003cc 	andi	r10,r6,15
    1f18:	02c000c4 	movi	r11,3
    1f1c:	1107883a 	add	r3,r2,r4
    1f20:	290b883a 	add	r5,r5,r4
    1f24:	5a801e2e 	bgeu	r11,r10,1fa0 <memmove+0x154>
    1f28:	1813883a 	mov	r9,r3
    1f2c:	2811883a 	mov	r8,r5
    1f30:	500f883a 	mov	r7,r10
    1f34:	41000017 	ldw	r4,0(r8)
    1f38:	4a400104 	addi	r9,r9,4
    1f3c:	39ffff04 	addi	r7,r7,-4
    1f40:	493fff15 	stw	r4,-4(r9)
    1f44:	42000104 	addi	r8,r8,4
    1f48:	59fffa36 	bltu	r11,r7,1f34 <__alt_mem_Onchip_SRAM+0xf8001f34>
    1f4c:	513fff04 	addi	r4,r10,-4
    1f50:	2008d0ba 	srli	r4,r4,2
    1f54:	318000cc 	andi	r6,r6,3
    1f58:	21000044 	addi	r4,r4,1
    1f5c:	2109883a 	add	r4,r4,r4
    1f60:	2109883a 	add	r4,r4,r4
    1f64:	1907883a 	add	r3,r3,r4
    1f68:	290b883a 	add	r5,r5,r4
    1f6c:	30000b26 	beq	r6,zero,1f9c <memmove+0x150>
    1f70:	198d883a 	add	r6,r3,r6
    1f74:	29c00003 	ldbu	r7,0(r5)
    1f78:	18c00044 	addi	r3,r3,1
    1f7c:	29400044 	addi	r5,r5,1
    1f80:	19ffffc5 	stb	r7,-1(r3)
    1f84:	19bffb1e 	bne	r3,r6,1f74 <__alt_mem_Onchip_SRAM+0xf8001f74>
    1f88:	f800283a 	ret
    1f8c:	1007883a 	mov	r3,r2
    1f90:	003ff606 	br	1f6c <__alt_mem_Onchip_SRAM+0xf8001f6c>
    1f94:	1007883a 	mov	r3,r2
    1f98:	003ff506 	br	1f70 <__alt_mem_Onchip_SRAM+0xf8001f70>
    1f9c:	f800283a 	ret
    1fa0:	500d883a 	mov	r6,r10
    1fa4:	003ff106 	br	1f6c <__alt_mem_Onchip_SRAM+0xf8001f6c>

00001fa8 <memset>:
    1fa8:	20c000cc 	andi	r3,r4,3
    1fac:	2005883a 	mov	r2,r4
    1fb0:	18004426 	beq	r3,zero,20c4 <memset+0x11c>
    1fb4:	31ffffc4 	addi	r7,r6,-1
    1fb8:	30004026 	beq	r6,zero,20bc <memset+0x114>
    1fbc:	2813883a 	mov	r9,r5
    1fc0:	200d883a 	mov	r6,r4
    1fc4:	2007883a 	mov	r3,r4
    1fc8:	00000406 	br	1fdc <memset+0x34>
    1fcc:	3a3fffc4 	addi	r8,r7,-1
    1fd0:	31800044 	addi	r6,r6,1
    1fd4:	38003926 	beq	r7,zero,20bc <memset+0x114>
    1fd8:	400f883a 	mov	r7,r8
    1fdc:	18c00044 	addi	r3,r3,1
    1fe0:	32400005 	stb	r9,0(r6)
    1fe4:	1a0000cc 	andi	r8,r3,3
    1fe8:	403ff81e 	bne	r8,zero,1fcc <__alt_mem_Onchip_SRAM+0xf8001fcc>
    1fec:	010000c4 	movi	r4,3
    1ff0:	21c02d2e 	bgeu	r4,r7,20a8 <memset+0x100>
    1ff4:	29003fcc 	andi	r4,r5,255
    1ff8:	200c923a 	slli	r6,r4,8
    1ffc:	3108b03a 	or	r4,r6,r4
    2000:	200c943a 	slli	r6,r4,16
    2004:	218cb03a 	or	r6,r4,r6
    2008:	010003c4 	movi	r4,15
    200c:	21c0182e 	bgeu	r4,r7,2070 <memset+0xc8>
    2010:	3b3ffc04 	addi	r12,r7,-16
    2014:	6018d13a 	srli	r12,r12,4
    2018:	1a000104 	addi	r8,r3,4
    201c:	1ac00204 	addi	r11,r3,8
    2020:	6008913a 	slli	r4,r12,4
    2024:	1a800304 	addi	r10,r3,12
    2028:	1813883a 	mov	r9,r3
    202c:	21000504 	addi	r4,r4,20
    2030:	1909883a 	add	r4,r3,r4
    2034:	49800015 	stw	r6,0(r9)
    2038:	41800015 	stw	r6,0(r8)
    203c:	59800015 	stw	r6,0(r11)
    2040:	51800015 	stw	r6,0(r10)
    2044:	42000404 	addi	r8,r8,16
    2048:	4a400404 	addi	r9,r9,16
    204c:	5ac00404 	addi	r11,r11,16
    2050:	52800404 	addi	r10,r10,16
    2054:	413ff71e 	bne	r8,r4,2034 <__alt_mem_Onchip_SRAM+0xf8002034>
    2058:	63000044 	addi	r12,r12,1
    205c:	6018913a 	slli	r12,r12,4
    2060:	39c003cc 	andi	r7,r7,15
    2064:	010000c4 	movi	r4,3
    2068:	1b07883a 	add	r3,r3,r12
    206c:	21c00e2e 	bgeu	r4,r7,20a8 <memset+0x100>
    2070:	1813883a 	mov	r9,r3
    2074:	3811883a 	mov	r8,r7
    2078:	010000c4 	movi	r4,3
    207c:	49800015 	stw	r6,0(r9)
    2080:	423fff04 	addi	r8,r8,-4
    2084:	4a400104 	addi	r9,r9,4
    2088:	223ffc36 	bltu	r4,r8,207c <__alt_mem_Onchip_SRAM+0xf800207c>
    208c:	393fff04 	addi	r4,r7,-4
    2090:	2008d0ba 	srli	r4,r4,2
    2094:	39c000cc 	andi	r7,r7,3
    2098:	21000044 	addi	r4,r4,1
    209c:	2109883a 	add	r4,r4,r4
    20a0:	2109883a 	add	r4,r4,r4
    20a4:	1907883a 	add	r3,r3,r4
    20a8:	38000526 	beq	r7,zero,20c0 <memset+0x118>
    20ac:	19cf883a 	add	r7,r3,r7
    20b0:	19400005 	stb	r5,0(r3)
    20b4:	18c00044 	addi	r3,r3,1
    20b8:	38fffd1e 	bne	r7,r3,20b0 <__alt_mem_Onchip_SRAM+0xf80020b0>
    20bc:	f800283a 	ret
    20c0:	f800283a 	ret
    20c4:	2007883a 	mov	r3,r4
    20c8:	300f883a 	mov	r7,r6
    20cc:	003fc706 	br	1fec <__alt_mem_Onchip_SRAM+0xf8001fec>

000020d0 <_realloc_r>:
    20d0:	defff604 	addi	sp,sp,-40
    20d4:	dc800215 	stw	r18,8(sp)
    20d8:	dfc00915 	stw	ra,36(sp)
    20dc:	df000815 	stw	fp,32(sp)
    20e0:	ddc00715 	stw	r23,28(sp)
    20e4:	dd800615 	stw	r22,24(sp)
    20e8:	dd400515 	stw	r21,20(sp)
    20ec:	dd000415 	stw	r20,16(sp)
    20f0:	dcc00315 	stw	r19,12(sp)
    20f4:	dc400115 	stw	r17,4(sp)
    20f8:	dc000015 	stw	r16,0(sp)
    20fc:	3025883a 	mov	r18,r6
    2100:	2800b726 	beq	r5,zero,23e0 <_realloc_r+0x310>
    2104:	282b883a 	mov	r21,r5
    2108:	2029883a 	mov	r20,r4
    210c:	0003d740 	call	3d74 <__malloc_lock>
    2110:	a8bfff17 	ldw	r2,-4(r21)
    2114:	043fff04 	movi	r16,-4
    2118:	90c002c4 	addi	r3,r18,11
    211c:	01000584 	movi	r4,22
    2120:	acfffe04 	addi	r19,r21,-8
    2124:	1420703a 	and	r16,r2,r16
    2128:	20c0332e 	bgeu	r4,r3,21f8 <_realloc_r+0x128>
    212c:	047ffe04 	movi	r17,-8
    2130:	1c62703a 	and	r17,r3,r17
    2134:	8807883a 	mov	r3,r17
    2138:	88005816 	blt	r17,zero,229c <_realloc_r+0x1cc>
    213c:	8c805736 	bltu	r17,r18,229c <_realloc_r+0x1cc>
    2140:	80c0300e 	bge	r16,r3,2204 <_realloc_r+0x134>
    2144:	07000034 	movhi	fp,0
    2148:	e71c1804 	addi	fp,fp,28768
    214c:	e1c00217 	ldw	r7,8(fp)
    2150:	9c09883a 	add	r4,r19,r16
    2154:	22000117 	ldw	r8,4(r4)
    2158:	21c06326 	beq	r4,r7,22e8 <_realloc_r+0x218>
    215c:	017fff84 	movi	r5,-2
    2160:	414a703a 	and	r5,r8,r5
    2164:	214b883a 	add	r5,r4,r5
    2168:	29800117 	ldw	r6,4(r5)
    216c:	3180004c 	andi	r6,r6,1
    2170:	30003f26 	beq	r6,zero,2270 <_realloc_r+0x1a0>
    2174:	1080004c 	andi	r2,r2,1
    2178:	10008326 	beq	r2,zero,2388 <_realloc_r+0x2b8>
    217c:	900b883a 	mov	r5,r18
    2180:	a009883a 	mov	r4,r20
    2184:	00014140 	call	1414 <_malloc_r>
    2188:	1025883a 	mov	r18,r2
    218c:	10011e26 	beq	r2,zero,2608 <_realloc_r+0x538>
    2190:	a93fff17 	ldw	r4,-4(r21)
    2194:	10fffe04 	addi	r3,r2,-8
    2198:	00bfff84 	movi	r2,-2
    219c:	2084703a 	and	r2,r4,r2
    21a0:	9885883a 	add	r2,r19,r2
    21a4:	1880ee26 	beq	r3,r2,2560 <_realloc_r+0x490>
    21a8:	81bfff04 	addi	r6,r16,-4
    21ac:	00800904 	movi	r2,36
    21b0:	1180b836 	bltu	r2,r6,2494 <_realloc_r+0x3c4>
    21b4:	00c004c4 	movi	r3,19
    21b8:	19809636 	bltu	r3,r6,2414 <_realloc_r+0x344>
    21bc:	9005883a 	mov	r2,r18
    21c0:	a807883a 	mov	r3,r21
    21c4:	19000017 	ldw	r4,0(r3)
    21c8:	11000015 	stw	r4,0(r2)
    21cc:	19000117 	ldw	r4,4(r3)
    21d0:	11000115 	stw	r4,4(r2)
    21d4:	18c00217 	ldw	r3,8(r3)
    21d8:	10c00215 	stw	r3,8(r2)
    21dc:	a80b883a 	mov	r5,r21
    21e0:	a009883a 	mov	r4,r20
    21e4:	0002e9c0 	call	2e9c <_free_r>
    21e8:	a009883a 	mov	r4,r20
    21ec:	0003d980 	call	3d98 <__malloc_unlock>
    21f0:	9005883a 	mov	r2,r18
    21f4:	00001206 	br	2240 <_realloc_r+0x170>
    21f8:	00c00404 	movi	r3,16
    21fc:	1823883a 	mov	r17,r3
    2200:	003fce06 	br	213c <__alt_mem_Onchip_SRAM+0xf800213c>
    2204:	a825883a 	mov	r18,r21
    2208:	8445c83a 	sub	r2,r16,r17
    220c:	00c003c4 	movi	r3,15
    2210:	18802636 	bltu	r3,r2,22ac <_realloc_r+0x1dc>
    2214:	99800117 	ldw	r6,4(r19)
    2218:	9c07883a 	add	r3,r19,r16
    221c:	3180004c 	andi	r6,r6,1
    2220:	3420b03a 	or	r16,r6,r16
    2224:	9c000115 	stw	r16,4(r19)
    2228:	18800117 	ldw	r2,4(r3)
    222c:	10800054 	ori	r2,r2,1
    2230:	18800115 	stw	r2,4(r3)
    2234:	a009883a 	mov	r4,r20
    2238:	0003d980 	call	3d98 <__malloc_unlock>
    223c:	9005883a 	mov	r2,r18
    2240:	dfc00917 	ldw	ra,36(sp)
    2244:	df000817 	ldw	fp,32(sp)
    2248:	ddc00717 	ldw	r23,28(sp)
    224c:	dd800617 	ldw	r22,24(sp)
    2250:	dd400517 	ldw	r21,20(sp)
    2254:	dd000417 	ldw	r20,16(sp)
    2258:	dcc00317 	ldw	r19,12(sp)
    225c:	dc800217 	ldw	r18,8(sp)
    2260:	dc400117 	ldw	r17,4(sp)
    2264:	dc000017 	ldw	r16,0(sp)
    2268:	dec00a04 	addi	sp,sp,40
    226c:	f800283a 	ret
    2270:	017fff04 	movi	r5,-4
    2274:	414a703a 	and	r5,r8,r5
    2278:	814d883a 	add	r6,r16,r5
    227c:	30c01f16 	blt	r6,r3,22fc <_realloc_r+0x22c>
    2280:	20800317 	ldw	r2,12(r4)
    2284:	20c00217 	ldw	r3,8(r4)
    2288:	a825883a 	mov	r18,r21
    228c:	3021883a 	mov	r16,r6
    2290:	18800315 	stw	r2,12(r3)
    2294:	10c00215 	stw	r3,8(r2)
    2298:	003fdb06 	br	2208 <__alt_mem_Onchip_SRAM+0xf8002208>
    229c:	00800304 	movi	r2,12
    22a0:	a0800015 	stw	r2,0(r20)
    22a4:	0005883a 	mov	r2,zero
    22a8:	003fe506 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    22ac:	98c00117 	ldw	r3,4(r19)
    22b0:	9c4b883a 	add	r5,r19,r17
    22b4:	11000054 	ori	r4,r2,1
    22b8:	18c0004c 	andi	r3,r3,1
    22bc:	1c62b03a 	or	r17,r3,r17
    22c0:	9c400115 	stw	r17,4(r19)
    22c4:	29000115 	stw	r4,4(r5)
    22c8:	2885883a 	add	r2,r5,r2
    22cc:	10c00117 	ldw	r3,4(r2)
    22d0:	29400204 	addi	r5,r5,8
    22d4:	a009883a 	mov	r4,r20
    22d8:	18c00054 	ori	r3,r3,1
    22dc:	10c00115 	stw	r3,4(r2)
    22e0:	0002e9c0 	call	2e9c <_free_r>
    22e4:	003fd306 	br	2234 <__alt_mem_Onchip_SRAM+0xf8002234>
    22e8:	017fff04 	movi	r5,-4
    22ec:	414a703a 	and	r5,r8,r5
    22f0:	89800404 	addi	r6,r17,16
    22f4:	8151883a 	add	r8,r16,r5
    22f8:	4180590e 	bge	r8,r6,2460 <_realloc_r+0x390>
    22fc:	1080004c 	andi	r2,r2,1
    2300:	103f9e1e 	bne	r2,zero,217c <__alt_mem_Onchip_SRAM+0xf800217c>
    2304:	adbffe17 	ldw	r22,-8(r21)
    2308:	00bfff04 	movi	r2,-4
    230c:	9dadc83a 	sub	r22,r19,r22
    2310:	b1800117 	ldw	r6,4(r22)
    2314:	3084703a 	and	r2,r6,r2
    2318:	20002026 	beq	r4,zero,239c <_realloc_r+0x2cc>
    231c:	80af883a 	add	r23,r16,r2
    2320:	b96f883a 	add	r23,r23,r5
    2324:	21c05f26 	beq	r4,r7,24a4 <_realloc_r+0x3d4>
    2328:	b8c01c16 	blt	r23,r3,239c <_realloc_r+0x2cc>
    232c:	20800317 	ldw	r2,12(r4)
    2330:	20c00217 	ldw	r3,8(r4)
    2334:	81bfff04 	addi	r6,r16,-4
    2338:	01000904 	movi	r4,36
    233c:	18800315 	stw	r2,12(r3)
    2340:	10c00215 	stw	r3,8(r2)
    2344:	b0c00217 	ldw	r3,8(r22)
    2348:	b0800317 	ldw	r2,12(r22)
    234c:	b4800204 	addi	r18,r22,8
    2350:	18800315 	stw	r2,12(r3)
    2354:	10c00215 	stw	r3,8(r2)
    2358:	21801b36 	bltu	r4,r6,23c8 <_realloc_r+0x2f8>
    235c:	008004c4 	movi	r2,19
    2360:	1180352e 	bgeu	r2,r6,2438 <_realloc_r+0x368>
    2364:	a8800017 	ldw	r2,0(r21)
    2368:	b0800215 	stw	r2,8(r22)
    236c:	a8800117 	ldw	r2,4(r21)
    2370:	b0800315 	stw	r2,12(r22)
    2374:	008006c4 	movi	r2,27
    2378:	11807f36 	bltu	r2,r6,2578 <_realloc_r+0x4a8>
    237c:	b0800404 	addi	r2,r22,16
    2380:	ad400204 	addi	r21,r21,8
    2384:	00002d06 	br	243c <_realloc_r+0x36c>
    2388:	adbffe17 	ldw	r22,-8(r21)
    238c:	00bfff04 	movi	r2,-4
    2390:	9dadc83a 	sub	r22,r19,r22
    2394:	b1000117 	ldw	r4,4(r22)
    2398:	2084703a 	and	r2,r4,r2
    239c:	b03f7726 	beq	r22,zero,217c <__alt_mem_Onchip_SRAM+0xf800217c>
    23a0:	80af883a 	add	r23,r16,r2
    23a4:	b8ff7516 	blt	r23,r3,217c <__alt_mem_Onchip_SRAM+0xf800217c>
    23a8:	b0800317 	ldw	r2,12(r22)
    23ac:	b0c00217 	ldw	r3,8(r22)
    23b0:	81bfff04 	addi	r6,r16,-4
    23b4:	01000904 	movi	r4,36
    23b8:	18800315 	stw	r2,12(r3)
    23bc:	10c00215 	stw	r3,8(r2)
    23c0:	b4800204 	addi	r18,r22,8
    23c4:	21bfe52e 	bgeu	r4,r6,235c <__alt_mem_Onchip_SRAM+0xf800235c>
    23c8:	a80b883a 	mov	r5,r21
    23cc:	9009883a 	mov	r4,r18
    23d0:	0001e4c0 	call	1e4c <memmove>
    23d4:	b821883a 	mov	r16,r23
    23d8:	b027883a 	mov	r19,r22
    23dc:	003f8a06 	br	2208 <__alt_mem_Onchip_SRAM+0xf8002208>
    23e0:	300b883a 	mov	r5,r6
    23e4:	dfc00917 	ldw	ra,36(sp)
    23e8:	df000817 	ldw	fp,32(sp)
    23ec:	ddc00717 	ldw	r23,28(sp)
    23f0:	dd800617 	ldw	r22,24(sp)
    23f4:	dd400517 	ldw	r21,20(sp)
    23f8:	dd000417 	ldw	r20,16(sp)
    23fc:	dcc00317 	ldw	r19,12(sp)
    2400:	dc800217 	ldw	r18,8(sp)
    2404:	dc400117 	ldw	r17,4(sp)
    2408:	dc000017 	ldw	r16,0(sp)
    240c:	dec00a04 	addi	sp,sp,40
    2410:	00014141 	jmpi	1414 <_malloc_r>
    2414:	a8c00017 	ldw	r3,0(r21)
    2418:	90c00015 	stw	r3,0(r18)
    241c:	a8c00117 	ldw	r3,4(r21)
    2420:	90c00115 	stw	r3,4(r18)
    2424:	00c006c4 	movi	r3,27
    2428:	19804536 	bltu	r3,r6,2540 <_realloc_r+0x470>
    242c:	90800204 	addi	r2,r18,8
    2430:	a8c00204 	addi	r3,r21,8
    2434:	003f6306 	br	21c4 <__alt_mem_Onchip_SRAM+0xf80021c4>
    2438:	9005883a 	mov	r2,r18
    243c:	a8c00017 	ldw	r3,0(r21)
    2440:	b821883a 	mov	r16,r23
    2444:	b027883a 	mov	r19,r22
    2448:	10c00015 	stw	r3,0(r2)
    244c:	a8c00117 	ldw	r3,4(r21)
    2450:	10c00115 	stw	r3,4(r2)
    2454:	a8c00217 	ldw	r3,8(r21)
    2458:	10c00215 	stw	r3,8(r2)
    245c:	003f6a06 	br	2208 <__alt_mem_Onchip_SRAM+0xf8002208>
    2460:	9c67883a 	add	r19,r19,r17
    2464:	4445c83a 	sub	r2,r8,r17
    2468:	e4c00215 	stw	r19,8(fp)
    246c:	10800054 	ori	r2,r2,1
    2470:	98800115 	stw	r2,4(r19)
    2474:	a8bfff17 	ldw	r2,-4(r21)
    2478:	a009883a 	mov	r4,r20
    247c:	1080004c 	andi	r2,r2,1
    2480:	1462b03a 	or	r17,r2,r17
    2484:	ac7fff15 	stw	r17,-4(r21)
    2488:	0003d980 	call	3d98 <__malloc_unlock>
    248c:	a805883a 	mov	r2,r21
    2490:	003f6b06 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    2494:	a80b883a 	mov	r5,r21
    2498:	9009883a 	mov	r4,r18
    249c:	0001e4c0 	call	1e4c <memmove>
    24a0:	003f4e06 	br	21dc <__alt_mem_Onchip_SRAM+0xf80021dc>
    24a4:	89000404 	addi	r4,r17,16
    24a8:	b93fbc16 	blt	r23,r4,239c <__alt_mem_Onchip_SRAM+0xf800239c>
    24ac:	b0800317 	ldw	r2,12(r22)
    24b0:	b0c00217 	ldw	r3,8(r22)
    24b4:	81bfff04 	addi	r6,r16,-4
    24b8:	01000904 	movi	r4,36
    24bc:	18800315 	stw	r2,12(r3)
    24c0:	10c00215 	stw	r3,8(r2)
    24c4:	b4800204 	addi	r18,r22,8
    24c8:	21804336 	bltu	r4,r6,25d8 <_realloc_r+0x508>
    24cc:	008004c4 	movi	r2,19
    24d0:	11803f2e 	bgeu	r2,r6,25d0 <_realloc_r+0x500>
    24d4:	a8800017 	ldw	r2,0(r21)
    24d8:	b0800215 	stw	r2,8(r22)
    24dc:	a8800117 	ldw	r2,4(r21)
    24e0:	b0800315 	stw	r2,12(r22)
    24e4:	008006c4 	movi	r2,27
    24e8:	11803f36 	bltu	r2,r6,25e8 <_realloc_r+0x518>
    24ec:	b0800404 	addi	r2,r22,16
    24f0:	ad400204 	addi	r21,r21,8
    24f4:	a8c00017 	ldw	r3,0(r21)
    24f8:	10c00015 	stw	r3,0(r2)
    24fc:	a8c00117 	ldw	r3,4(r21)
    2500:	10c00115 	stw	r3,4(r2)
    2504:	a8c00217 	ldw	r3,8(r21)
    2508:	10c00215 	stw	r3,8(r2)
    250c:	b447883a 	add	r3,r22,r17
    2510:	bc45c83a 	sub	r2,r23,r17
    2514:	e0c00215 	stw	r3,8(fp)
    2518:	10800054 	ori	r2,r2,1
    251c:	18800115 	stw	r2,4(r3)
    2520:	b0800117 	ldw	r2,4(r22)
    2524:	a009883a 	mov	r4,r20
    2528:	1080004c 	andi	r2,r2,1
    252c:	1462b03a 	or	r17,r2,r17
    2530:	b4400115 	stw	r17,4(r22)
    2534:	0003d980 	call	3d98 <__malloc_unlock>
    2538:	9005883a 	mov	r2,r18
    253c:	003f4006 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    2540:	a8c00217 	ldw	r3,8(r21)
    2544:	90c00215 	stw	r3,8(r18)
    2548:	a8c00317 	ldw	r3,12(r21)
    254c:	90c00315 	stw	r3,12(r18)
    2550:	30801126 	beq	r6,r2,2598 <_realloc_r+0x4c8>
    2554:	90800404 	addi	r2,r18,16
    2558:	a8c00404 	addi	r3,r21,16
    255c:	003f1906 	br	21c4 <__alt_mem_Onchip_SRAM+0xf80021c4>
    2560:	90ffff17 	ldw	r3,-4(r18)
    2564:	00bfff04 	movi	r2,-4
    2568:	a825883a 	mov	r18,r21
    256c:	1884703a 	and	r2,r3,r2
    2570:	80a1883a 	add	r16,r16,r2
    2574:	003f2406 	br	2208 <__alt_mem_Onchip_SRAM+0xf8002208>
    2578:	a8800217 	ldw	r2,8(r21)
    257c:	b0800415 	stw	r2,16(r22)
    2580:	a8800317 	ldw	r2,12(r21)
    2584:	b0800515 	stw	r2,20(r22)
    2588:	31000a26 	beq	r6,r4,25b4 <_realloc_r+0x4e4>
    258c:	b0800604 	addi	r2,r22,24
    2590:	ad400404 	addi	r21,r21,16
    2594:	003fa906 	br	243c <__alt_mem_Onchip_SRAM+0xf800243c>
    2598:	a9000417 	ldw	r4,16(r21)
    259c:	90800604 	addi	r2,r18,24
    25a0:	a8c00604 	addi	r3,r21,24
    25a4:	91000415 	stw	r4,16(r18)
    25a8:	a9000517 	ldw	r4,20(r21)
    25ac:	91000515 	stw	r4,20(r18)
    25b0:	003f0406 	br	21c4 <__alt_mem_Onchip_SRAM+0xf80021c4>
    25b4:	a8c00417 	ldw	r3,16(r21)
    25b8:	ad400604 	addi	r21,r21,24
    25bc:	b0800804 	addi	r2,r22,32
    25c0:	b0c00615 	stw	r3,24(r22)
    25c4:	a8ffff17 	ldw	r3,-4(r21)
    25c8:	b0c00715 	stw	r3,28(r22)
    25cc:	003f9b06 	br	243c <__alt_mem_Onchip_SRAM+0xf800243c>
    25d0:	9005883a 	mov	r2,r18
    25d4:	003fc706 	br	24f4 <__alt_mem_Onchip_SRAM+0xf80024f4>
    25d8:	a80b883a 	mov	r5,r21
    25dc:	9009883a 	mov	r4,r18
    25e0:	0001e4c0 	call	1e4c <memmove>
    25e4:	003fc906 	br	250c <__alt_mem_Onchip_SRAM+0xf800250c>
    25e8:	a8800217 	ldw	r2,8(r21)
    25ec:	b0800415 	stw	r2,16(r22)
    25f0:	a8800317 	ldw	r2,12(r21)
    25f4:	b0800515 	stw	r2,20(r22)
    25f8:	31000726 	beq	r6,r4,2618 <_realloc_r+0x548>
    25fc:	b0800604 	addi	r2,r22,24
    2600:	ad400404 	addi	r21,r21,16
    2604:	003fbb06 	br	24f4 <__alt_mem_Onchip_SRAM+0xf80024f4>
    2608:	a009883a 	mov	r4,r20
    260c:	0003d980 	call	3d98 <__malloc_unlock>
    2610:	0005883a 	mov	r2,zero
    2614:	003f0a06 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    2618:	a8c00417 	ldw	r3,16(r21)
    261c:	ad400604 	addi	r21,r21,24
    2620:	b0800804 	addi	r2,r22,32
    2624:	b0c00615 	stw	r3,24(r22)
    2628:	a8ffff17 	ldw	r3,-4(r21)
    262c:	b0c00715 	stw	r3,28(r22)
    2630:	003fb006 	br	24f4 <__alt_mem_Onchip_SRAM+0xf80024f4>

00002634 <_sbrk_r>:
    2634:	defffd04 	addi	sp,sp,-12
    2638:	dc000015 	stw	r16,0(sp)
    263c:	04000074 	movhi	r16,1
    2640:	dc400115 	stw	r17,4(sp)
    2644:	84286b04 	addi	r16,r16,-24148
    2648:	2023883a 	mov	r17,r4
    264c:	2809883a 	mov	r4,r5
    2650:	dfc00215 	stw	ra,8(sp)
    2654:	80000015 	stw	zero,0(r16)
    2658:	0003f800 	call	3f80 <sbrk>
    265c:	00ffffc4 	movi	r3,-1
    2660:	10c00526 	beq	r2,r3,2678 <_sbrk_r+0x44>
    2664:	dfc00217 	ldw	ra,8(sp)
    2668:	dc400117 	ldw	r17,4(sp)
    266c:	dc000017 	ldw	r16,0(sp)
    2670:	dec00304 	addi	sp,sp,12
    2674:	f800283a 	ret
    2678:	80c00017 	ldw	r3,0(r16)
    267c:	183ff926 	beq	r3,zero,2664 <__alt_mem_Onchip_SRAM+0xf8002664>
    2680:	88c00015 	stw	r3,0(r17)
    2684:	003ff706 	br	2664 <__alt_mem_Onchip_SRAM+0xf8002664>

00002688 <__sread>:
    2688:	defffe04 	addi	sp,sp,-8
    268c:	dc000015 	stw	r16,0(sp)
    2690:	2821883a 	mov	r16,r5
    2694:	2940038f 	ldh	r5,14(r5)
    2698:	dfc00115 	stw	ra,4(sp)
    269c:	00033c80 	call	33c8 <_read_r>
    26a0:	10000716 	blt	r2,zero,26c0 <__sread+0x38>
    26a4:	80c01417 	ldw	r3,80(r16)
    26a8:	1887883a 	add	r3,r3,r2
    26ac:	80c01415 	stw	r3,80(r16)
    26b0:	dfc00117 	ldw	ra,4(sp)
    26b4:	dc000017 	ldw	r16,0(sp)
    26b8:	dec00204 	addi	sp,sp,8
    26bc:	f800283a 	ret
    26c0:	80c0030b 	ldhu	r3,12(r16)
    26c4:	18fbffcc 	andi	r3,r3,61439
    26c8:	80c0030d 	sth	r3,12(r16)
    26cc:	dfc00117 	ldw	ra,4(sp)
    26d0:	dc000017 	ldw	r16,0(sp)
    26d4:	dec00204 	addi	sp,sp,8
    26d8:	f800283a 	ret

000026dc <__seofread>:
    26dc:	0005883a 	mov	r2,zero
    26e0:	f800283a 	ret

000026e4 <__swrite>:
    26e4:	2880030b 	ldhu	r2,12(r5)
    26e8:	defffb04 	addi	sp,sp,-20
    26ec:	dcc00315 	stw	r19,12(sp)
    26f0:	dc800215 	stw	r18,8(sp)
    26f4:	dc400115 	stw	r17,4(sp)
    26f8:	dc000015 	stw	r16,0(sp)
    26fc:	dfc00415 	stw	ra,16(sp)
    2700:	10c0400c 	andi	r3,r2,256
    2704:	2821883a 	mov	r16,r5
    2708:	2023883a 	mov	r17,r4
    270c:	3025883a 	mov	r18,r6
    2710:	3827883a 	mov	r19,r7
    2714:	18000526 	beq	r3,zero,272c <__swrite+0x48>
    2718:	2940038f 	ldh	r5,14(r5)
    271c:	01c00084 	movi	r7,2
    2720:	000d883a 	mov	r6,zero
    2724:	00031ac0 	call	31ac <_lseek_r>
    2728:	8080030b 	ldhu	r2,12(r16)
    272c:	8140038f 	ldh	r5,14(r16)
    2730:	10bbffcc 	andi	r2,r2,61439
    2734:	980f883a 	mov	r7,r19
    2738:	900d883a 	mov	r6,r18
    273c:	8809883a 	mov	r4,r17
    2740:	8080030d 	sth	r2,12(r16)
    2744:	dfc00417 	ldw	ra,16(sp)
    2748:	dcc00317 	ldw	r19,12(sp)
    274c:	dc800217 	ldw	r18,8(sp)
    2750:	dc400117 	ldw	r17,4(sp)
    2754:	dc000017 	ldw	r16,0(sp)
    2758:	dec00504 	addi	sp,sp,20
    275c:	00027c41 	jmpi	27c4 <_write_r>

00002760 <__sseek>:
    2760:	defffe04 	addi	sp,sp,-8
    2764:	dc000015 	stw	r16,0(sp)
    2768:	2821883a 	mov	r16,r5
    276c:	2940038f 	ldh	r5,14(r5)
    2770:	dfc00115 	stw	ra,4(sp)
    2774:	00031ac0 	call	31ac <_lseek_r>
    2778:	00ffffc4 	movi	r3,-1
    277c:	10c00826 	beq	r2,r3,27a0 <__sseek+0x40>
    2780:	80c0030b 	ldhu	r3,12(r16)
    2784:	80801415 	stw	r2,80(r16)
    2788:	18c40014 	ori	r3,r3,4096
    278c:	80c0030d 	sth	r3,12(r16)
    2790:	dfc00117 	ldw	ra,4(sp)
    2794:	dc000017 	ldw	r16,0(sp)
    2798:	dec00204 	addi	sp,sp,8
    279c:	f800283a 	ret
    27a0:	80c0030b 	ldhu	r3,12(r16)
    27a4:	18fbffcc 	andi	r3,r3,61439
    27a8:	80c0030d 	sth	r3,12(r16)
    27ac:	dfc00117 	ldw	ra,4(sp)
    27b0:	dc000017 	ldw	r16,0(sp)
    27b4:	dec00204 	addi	sp,sp,8
    27b8:	f800283a 	ret

000027bc <__sclose>:
    27bc:	2940038f 	ldh	r5,14(r5)
    27c0:	00029781 	jmpi	2978 <_close_r>

000027c4 <_write_r>:
    27c4:	defffd04 	addi	sp,sp,-12
    27c8:	2805883a 	mov	r2,r5
    27cc:	dc000015 	stw	r16,0(sp)
    27d0:	04000074 	movhi	r16,1
    27d4:	dc400115 	stw	r17,4(sp)
    27d8:	300b883a 	mov	r5,r6
    27dc:	84286b04 	addi	r16,r16,-24148
    27e0:	2023883a 	mov	r17,r4
    27e4:	380d883a 	mov	r6,r7
    27e8:	1009883a 	mov	r4,r2
    27ec:	dfc00215 	stw	ra,8(sp)
    27f0:	80000015 	stw	zero,0(r16)
    27f4:	00042100 	call	4210 <write>
    27f8:	00ffffc4 	movi	r3,-1
    27fc:	10c00526 	beq	r2,r3,2814 <_write_r+0x50>
    2800:	dfc00217 	ldw	ra,8(sp)
    2804:	dc400117 	ldw	r17,4(sp)
    2808:	dc000017 	ldw	r16,0(sp)
    280c:	dec00304 	addi	sp,sp,12
    2810:	f800283a 	ret
    2814:	80c00017 	ldw	r3,0(r16)
    2818:	183ff926 	beq	r3,zero,2800 <__alt_mem_Onchip_SRAM+0xf8002800>
    281c:	88c00015 	stw	r3,0(r17)
    2820:	003ff706 	br	2800 <__alt_mem_Onchip_SRAM+0xf8002800>

00002824 <__swsetup_r>:
    2824:	00800074 	movhi	r2,1
    2828:	defffd04 	addi	sp,sp,-12
    282c:	10a1ae04 	addi	r2,r2,-31048
    2830:	dc400115 	stw	r17,4(sp)
    2834:	2023883a 	mov	r17,r4
    2838:	11000017 	ldw	r4,0(r2)
    283c:	dc000015 	stw	r16,0(sp)
    2840:	dfc00215 	stw	ra,8(sp)
    2844:	2821883a 	mov	r16,r5
    2848:	20000226 	beq	r4,zero,2854 <__swsetup_r+0x30>
    284c:	20800e17 	ldw	r2,56(r4)
    2850:	10003126 	beq	r2,zero,2918 <__swsetup_r+0xf4>
    2854:	8080030b 	ldhu	r2,12(r16)
    2858:	10c0020c 	andi	r3,r2,8
    285c:	1009883a 	mov	r4,r2
    2860:	18000f26 	beq	r3,zero,28a0 <__swsetup_r+0x7c>
    2864:	80c00417 	ldw	r3,16(r16)
    2868:	18001526 	beq	r3,zero,28c0 <__swsetup_r+0x9c>
    286c:	1100004c 	andi	r4,r2,1
    2870:	20001c1e 	bne	r4,zero,28e4 <__swsetup_r+0xc0>
    2874:	1080008c 	andi	r2,r2,2
    2878:	1000291e 	bne	r2,zero,2920 <__swsetup_r+0xfc>
    287c:	80800517 	ldw	r2,20(r16)
    2880:	80800215 	stw	r2,8(r16)
    2884:	18001c26 	beq	r3,zero,28f8 <__swsetup_r+0xd4>
    2888:	0005883a 	mov	r2,zero
    288c:	dfc00217 	ldw	ra,8(sp)
    2890:	dc400117 	ldw	r17,4(sp)
    2894:	dc000017 	ldw	r16,0(sp)
    2898:	dec00304 	addi	sp,sp,12
    289c:	f800283a 	ret
    28a0:	2080040c 	andi	r2,r4,16
    28a4:	10002e26 	beq	r2,zero,2960 <__swsetup_r+0x13c>
    28a8:	2080010c 	andi	r2,r4,4
    28ac:	10001e1e 	bne	r2,zero,2928 <__swsetup_r+0x104>
    28b0:	80c00417 	ldw	r3,16(r16)
    28b4:	20800214 	ori	r2,r4,8
    28b8:	8080030d 	sth	r2,12(r16)
    28bc:	183feb1e 	bne	r3,zero,286c <__alt_mem_Onchip_SRAM+0xf800286c>
    28c0:	1100a00c 	andi	r4,r2,640
    28c4:	01408004 	movi	r5,512
    28c8:	217fe826 	beq	r4,r5,286c <__alt_mem_Onchip_SRAM+0xf800286c>
    28cc:	800b883a 	mov	r5,r16
    28d0:	8809883a 	mov	r4,r17
    28d4:	000320c0 	call	320c <__smakebuf_r>
    28d8:	8080030b 	ldhu	r2,12(r16)
    28dc:	80c00417 	ldw	r3,16(r16)
    28e0:	003fe206 	br	286c <__alt_mem_Onchip_SRAM+0xf800286c>
    28e4:	80800517 	ldw	r2,20(r16)
    28e8:	80000215 	stw	zero,8(r16)
    28ec:	0085c83a 	sub	r2,zero,r2
    28f0:	80800615 	stw	r2,24(r16)
    28f4:	183fe41e 	bne	r3,zero,2888 <__alt_mem_Onchip_SRAM+0xf8002888>
    28f8:	80c0030b 	ldhu	r3,12(r16)
    28fc:	0005883a 	mov	r2,zero
    2900:	1900200c 	andi	r4,r3,128
    2904:	203fe126 	beq	r4,zero,288c <__alt_mem_Onchip_SRAM+0xf800288c>
    2908:	18c01014 	ori	r3,r3,64
    290c:	80c0030d 	sth	r3,12(r16)
    2910:	00bfffc4 	movi	r2,-1
    2914:	003fdd06 	br	288c <__alt_mem_Onchip_SRAM+0xf800288c>
    2918:	0000d180 	call	d18 <__sinit>
    291c:	003fcd06 	br	2854 <__alt_mem_Onchip_SRAM+0xf8002854>
    2920:	0005883a 	mov	r2,zero
    2924:	003fd606 	br	2880 <__alt_mem_Onchip_SRAM+0xf8002880>
    2928:	81400c17 	ldw	r5,48(r16)
    292c:	28000626 	beq	r5,zero,2948 <__swsetup_r+0x124>
    2930:	80801004 	addi	r2,r16,64
    2934:	28800326 	beq	r5,r2,2944 <__swsetup_r+0x120>
    2938:	8809883a 	mov	r4,r17
    293c:	0002e9c0 	call	2e9c <_free_r>
    2940:	8100030b 	ldhu	r4,12(r16)
    2944:	80000c15 	stw	zero,48(r16)
    2948:	80c00417 	ldw	r3,16(r16)
    294c:	00bff6c4 	movi	r2,-37
    2950:	1108703a 	and	r4,r2,r4
    2954:	80000115 	stw	zero,4(r16)
    2958:	80c00015 	stw	r3,0(r16)
    295c:	003fd506 	br	28b4 <__alt_mem_Onchip_SRAM+0xf80028b4>
    2960:	00800244 	movi	r2,9
    2964:	88800015 	stw	r2,0(r17)
    2968:	20801014 	ori	r2,r4,64
    296c:	8080030d 	sth	r2,12(r16)
    2970:	00bfffc4 	movi	r2,-1
    2974:	003fc506 	br	288c <__alt_mem_Onchip_SRAM+0xf800288c>

00002978 <_close_r>:
    2978:	defffd04 	addi	sp,sp,-12
    297c:	dc000015 	stw	r16,0(sp)
    2980:	04000074 	movhi	r16,1
    2984:	dc400115 	stw	r17,4(sp)
    2988:	84286b04 	addi	r16,r16,-24148
    298c:	2023883a 	mov	r17,r4
    2990:	2809883a 	mov	r4,r5
    2994:	dfc00215 	stw	ra,8(sp)
    2998:	80000015 	stw	zero,0(r16)
    299c:	00036200 	call	3620 <close>
    29a0:	00ffffc4 	movi	r3,-1
    29a4:	10c00526 	beq	r2,r3,29bc <_close_r+0x44>
    29a8:	dfc00217 	ldw	ra,8(sp)
    29ac:	dc400117 	ldw	r17,4(sp)
    29b0:	dc000017 	ldw	r16,0(sp)
    29b4:	dec00304 	addi	sp,sp,12
    29b8:	f800283a 	ret
    29bc:	80c00017 	ldw	r3,0(r16)
    29c0:	183ff926 	beq	r3,zero,29a8 <__alt_mem_Onchip_SRAM+0xf80029a8>
    29c4:	88c00015 	stw	r3,0(r17)
    29c8:	003ff706 	br	29a8 <__alt_mem_Onchip_SRAM+0xf80029a8>

000029cc <_fclose_r>:
    29cc:	28003926 	beq	r5,zero,2ab4 <_fclose_r+0xe8>
    29d0:	defffc04 	addi	sp,sp,-16
    29d4:	dc400115 	stw	r17,4(sp)
    29d8:	dc000015 	stw	r16,0(sp)
    29dc:	dfc00315 	stw	ra,12(sp)
    29e0:	dc800215 	stw	r18,8(sp)
    29e4:	2023883a 	mov	r17,r4
    29e8:	2821883a 	mov	r16,r5
    29ec:	20000226 	beq	r4,zero,29f8 <_fclose_r+0x2c>
    29f0:	20800e17 	ldw	r2,56(r4)
    29f4:	10002726 	beq	r2,zero,2a94 <_fclose_r+0xc8>
    29f8:	8080030f 	ldh	r2,12(r16)
    29fc:	1000071e 	bne	r2,zero,2a1c <_fclose_r+0x50>
    2a00:	0005883a 	mov	r2,zero
    2a04:	dfc00317 	ldw	ra,12(sp)
    2a08:	dc800217 	ldw	r18,8(sp)
    2a0c:	dc400117 	ldw	r17,4(sp)
    2a10:	dc000017 	ldw	r16,0(sp)
    2a14:	dec00404 	addi	sp,sp,16
    2a18:	f800283a 	ret
    2a1c:	800b883a 	mov	r5,r16
    2a20:	8809883a 	mov	r4,r17
    2a24:	0002ad00 	call	2ad0 <__sflush_r>
    2a28:	1025883a 	mov	r18,r2
    2a2c:	80800b17 	ldw	r2,44(r16)
    2a30:	10000426 	beq	r2,zero,2a44 <_fclose_r+0x78>
    2a34:	81400717 	ldw	r5,28(r16)
    2a38:	8809883a 	mov	r4,r17
    2a3c:	103ee83a 	callr	r2
    2a40:	10001616 	blt	r2,zero,2a9c <_fclose_r+0xd0>
    2a44:	8080030b 	ldhu	r2,12(r16)
    2a48:	1080200c 	andi	r2,r2,128
    2a4c:	1000151e 	bne	r2,zero,2aa4 <_fclose_r+0xd8>
    2a50:	81400c17 	ldw	r5,48(r16)
    2a54:	28000526 	beq	r5,zero,2a6c <_fclose_r+0xa0>
    2a58:	80801004 	addi	r2,r16,64
    2a5c:	28800226 	beq	r5,r2,2a68 <_fclose_r+0x9c>
    2a60:	8809883a 	mov	r4,r17
    2a64:	0002e9c0 	call	2e9c <_free_r>
    2a68:	80000c15 	stw	zero,48(r16)
    2a6c:	81401117 	ldw	r5,68(r16)
    2a70:	28000326 	beq	r5,zero,2a80 <_fclose_r+0xb4>
    2a74:	8809883a 	mov	r4,r17
    2a78:	0002e9c0 	call	2e9c <_free_r>
    2a7c:	80001115 	stw	zero,68(r16)
    2a80:	0000d280 	call	d28 <__sfp_lock_acquire>
    2a84:	8000030d 	sth	zero,12(r16)
    2a88:	0000d2c0 	call	d2c <__sfp_lock_release>
    2a8c:	9005883a 	mov	r2,r18
    2a90:	003fdc06 	br	2a04 <__alt_mem_Onchip_SRAM+0xf8002a04>
    2a94:	0000d180 	call	d18 <__sinit>
    2a98:	003fd706 	br	29f8 <__alt_mem_Onchip_SRAM+0xf80029f8>
    2a9c:	04bfffc4 	movi	r18,-1
    2aa0:	003fe806 	br	2a44 <__alt_mem_Onchip_SRAM+0xf8002a44>
    2aa4:	81400417 	ldw	r5,16(r16)
    2aa8:	8809883a 	mov	r4,r17
    2aac:	0002e9c0 	call	2e9c <_free_r>
    2ab0:	003fe706 	br	2a50 <__alt_mem_Onchip_SRAM+0xf8002a50>
    2ab4:	0005883a 	mov	r2,zero
    2ab8:	f800283a 	ret

00002abc <fclose>:
    2abc:	00800074 	movhi	r2,1
    2ac0:	10a1ae04 	addi	r2,r2,-31048
    2ac4:	200b883a 	mov	r5,r4
    2ac8:	11000017 	ldw	r4,0(r2)
    2acc:	00029cc1 	jmpi	29cc <_fclose_r>

00002ad0 <__sflush_r>:
    2ad0:	2880030b 	ldhu	r2,12(r5)
    2ad4:	defffb04 	addi	sp,sp,-20
    2ad8:	dcc00315 	stw	r19,12(sp)
    2adc:	dc400115 	stw	r17,4(sp)
    2ae0:	dfc00415 	stw	ra,16(sp)
    2ae4:	dc800215 	stw	r18,8(sp)
    2ae8:	dc000015 	stw	r16,0(sp)
    2aec:	10c0020c 	andi	r3,r2,8
    2af0:	2823883a 	mov	r17,r5
    2af4:	2027883a 	mov	r19,r4
    2af8:	1800311e 	bne	r3,zero,2bc0 <__sflush_r+0xf0>
    2afc:	28c00117 	ldw	r3,4(r5)
    2b00:	10820014 	ori	r2,r2,2048
    2b04:	2880030d 	sth	r2,12(r5)
    2b08:	00c04b0e 	bge	zero,r3,2c38 <__sflush_r+0x168>
    2b0c:	8a000a17 	ldw	r8,40(r17)
    2b10:	40002326 	beq	r8,zero,2ba0 <__sflush_r+0xd0>
    2b14:	9c000017 	ldw	r16,0(r19)
    2b18:	10c4000c 	andi	r3,r2,4096
    2b1c:	98000015 	stw	zero,0(r19)
    2b20:	18004826 	beq	r3,zero,2c44 <__sflush_r+0x174>
    2b24:	89801417 	ldw	r6,80(r17)
    2b28:	10c0010c 	andi	r3,r2,4
    2b2c:	18000626 	beq	r3,zero,2b48 <__sflush_r+0x78>
    2b30:	88c00117 	ldw	r3,4(r17)
    2b34:	88800c17 	ldw	r2,48(r17)
    2b38:	30cdc83a 	sub	r6,r6,r3
    2b3c:	10000226 	beq	r2,zero,2b48 <__sflush_r+0x78>
    2b40:	88800f17 	ldw	r2,60(r17)
    2b44:	308dc83a 	sub	r6,r6,r2
    2b48:	89400717 	ldw	r5,28(r17)
    2b4c:	000f883a 	mov	r7,zero
    2b50:	9809883a 	mov	r4,r19
    2b54:	403ee83a 	callr	r8
    2b58:	00ffffc4 	movi	r3,-1
    2b5c:	10c04426 	beq	r2,r3,2c70 <__sflush_r+0x1a0>
    2b60:	88c0030b 	ldhu	r3,12(r17)
    2b64:	89000417 	ldw	r4,16(r17)
    2b68:	88000115 	stw	zero,4(r17)
    2b6c:	197dffcc 	andi	r5,r3,63487
    2b70:	8940030d 	sth	r5,12(r17)
    2b74:	89000015 	stw	r4,0(r17)
    2b78:	18c4000c 	andi	r3,r3,4096
    2b7c:	18002c1e 	bne	r3,zero,2c30 <__sflush_r+0x160>
    2b80:	89400c17 	ldw	r5,48(r17)
    2b84:	9c000015 	stw	r16,0(r19)
    2b88:	28000526 	beq	r5,zero,2ba0 <__sflush_r+0xd0>
    2b8c:	88801004 	addi	r2,r17,64
    2b90:	28800226 	beq	r5,r2,2b9c <__sflush_r+0xcc>
    2b94:	9809883a 	mov	r4,r19
    2b98:	0002e9c0 	call	2e9c <_free_r>
    2b9c:	88000c15 	stw	zero,48(r17)
    2ba0:	0005883a 	mov	r2,zero
    2ba4:	dfc00417 	ldw	ra,16(sp)
    2ba8:	dcc00317 	ldw	r19,12(sp)
    2bac:	dc800217 	ldw	r18,8(sp)
    2bb0:	dc400117 	ldw	r17,4(sp)
    2bb4:	dc000017 	ldw	r16,0(sp)
    2bb8:	dec00504 	addi	sp,sp,20
    2bbc:	f800283a 	ret
    2bc0:	2c800417 	ldw	r18,16(r5)
    2bc4:	903ff626 	beq	r18,zero,2ba0 <__alt_mem_Onchip_SRAM+0xf8002ba0>
    2bc8:	2c000017 	ldw	r16,0(r5)
    2bcc:	108000cc 	andi	r2,r2,3
    2bd0:	2c800015 	stw	r18,0(r5)
    2bd4:	84a1c83a 	sub	r16,r16,r18
    2bd8:	1000131e 	bne	r2,zero,2c28 <__sflush_r+0x158>
    2bdc:	28800517 	ldw	r2,20(r5)
    2be0:	88800215 	stw	r2,8(r17)
    2be4:	04000316 	blt	zero,r16,2bf4 <__sflush_r+0x124>
    2be8:	003fed06 	br	2ba0 <__alt_mem_Onchip_SRAM+0xf8002ba0>
    2bec:	90a5883a 	add	r18,r18,r2
    2bf0:	043feb0e 	bge	zero,r16,2ba0 <__alt_mem_Onchip_SRAM+0xf8002ba0>
    2bf4:	88800917 	ldw	r2,36(r17)
    2bf8:	89400717 	ldw	r5,28(r17)
    2bfc:	800f883a 	mov	r7,r16
    2c00:	900d883a 	mov	r6,r18
    2c04:	9809883a 	mov	r4,r19
    2c08:	103ee83a 	callr	r2
    2c0c:	80a1c83a 	sub	r16,r16,r2
    2c10:	00bff616 	blt	zero,r2,2bec <__alt_mem_Onchip_SRAM+0xf8002bec>
    2c14:	88c0030b 	ldhu	r3,12(r17)
    2c18:	00bfffc4 	movi	r2,-1
    2c1c:	18c01014 	ori	r3,r3,64
    2c20:	88c0030d 	sth	r3,12(r17)
    2c24:	003fdf06 	br	2ba4 <__alt_mem_Onchip_SRAM+0xf8002ba4>
    2c28:	0005883a 	mov	r2,zero
    2c2c:	003fec06 	br	2be0 <__alt_mem_Onchip_SRAM+0xf8002be0>
    2c30:	88801415 	stw	r2,80(r17)
    2c34:	003fd206 	br	2b80 <__alt_mem_Onchip_SRAM+0xf8002b80>
    2c38:	28c00f17 	ldw	r3,60(r5)
    2c3c:	00ffb316 	blt	zero,r3,2b0c <__alt_mem_Onchip_SRAM+0xf8002b0c>
    2c40:	003fd706 	br	2ba0 <__alt_mem_Onchip_SRAM+0xf8002ba0>
    2c44:	89400717 	ldw	r5,28(r17)
    2c48:	000d883a 	mov	r6,zero
    2c4c:	01c00044 	movi	r7,1
    2c50:	9809883a 	mov	r4,r19
    2c54:	403ee83a 	callr	r8
    2c58:	100d883a 	mov	r6,r2
    2c5c:	00bfffc4 	movi	r2,-1
    2c60:	30801426 	beq	r6,r2,2cb4 <__sflush_r+0x1e4>
    2c64:	8880030b 	ldhu	r2,12(r17)
    2c68:	8a000a17 	ldw	r8,40(r17)
    2c6c:	003fae06 	br	2b28 <__alt_mem_Onchip_SRAM+0xf8002b28>
    2c70:	98c00017 	ldw	r3,0(r19)
    2c74:	183fba26 	beq	r3,zero,2b60 <__alt_mem_Onchip_SRAM+0xf8002b60>
    2c78:	01000744 	movi	r4,29
    2c7c:	19000626 	beq	r3,r4,2c98 <__sflush_r+0x1c8>
    2c80:	01000584 	movi	r4,22
    2c84:	19000426 	beq	r3,r4,2c98 <__sflush_r+0x1c8>
    2c88:	88c0030b 	ldhu	r3,12(r17)
    2c8c:	18c01014 	ori	r3,r3,64
    2c90:	88c0030d 	sth	r3,12(r17)
    2c94:	003fc306 	br	2ba4 <__alt_mem_Onchip_SRAM+0xf8002ba4>
    2c98:	8880030b 	ldhu	r2,12(r17)
    2c9c:	88c00417 	ldw	r3,16(r17)
    2ca0:	88000115 	stw	zero,4(r17)
    2ca4:	10bdffcc 	andi	r2,r2,63487
    2ca8:	8880030d 	sth	r2,12(r17)
    2cac:	88c00015 	stw	r3,0(r17)
    2cb0:	003fb306 	br	2b80 <__alt_mem_Onchip_SRAM+0xf8002b80>
    2cb4:	98800017 	ldw	r2,0(r19)
    2cb8:	103fea26 	beq	r2,zero,2c64 <__alt_mem_Onchip_SRAM+0xf8002c64>
    2cbc:	00c00744 	movi	r3,29
    2cc0:	10c00226 	beq	r2,r3,2ccc <__sflush_r+0x1fc>
    2cc4:	00c00584 	movi	r3,22
    2cc8:	10c0031e 	bne	r2,r3,2cd8 <__sflush_r+0x208>
    2ccc:	9c000015 	stw	r16,0(r19)
    2cd0:	0005883a 	mov	r2,zero
    2cd4:	003fb306 	br	2ba4 <__alt_mem_Onchip_SRAM+0xf8002ba4>
    2cd8:	88c0030b 	ldhu	r3,12(r17)
    2cdc:	3005883a 	mov	r2,r6
    2ce0:	18c01014 	ori	r3,r3,64
    2ce4:	88c0030d 	sth	r3,12(r17)
    2ce8:	003fae06 	br	2ba4 <__alt_mem_Onchip_SRAM+0xf8002ba4>

00002cec <_fflush_r>:
    2cec:	defffd04 	addi	sp,sp,-12
    2cf0:	dc000115 	stw	r16,4(sp)
    2cf4:	dfc00215 	stw	ra,8(sp)
    2cf8:	2021883a 	mov	r16,r4
    2cfc:	20000226 	beq	r4,zero,2d08 <_fflush_r+0x1c>
    2d00:	20800e17 	ldw	r2,56(r4)
    2d04:	10000c26 	beq	r2,zero,2d38 <_fflush_r+0x4c>
    2d08:	2880030f 	ldh	r2,12(r5)
    2d0c:	1000051e 	bne	r2,zero,2d24 <_fflush_r+0x38>
    2d10:	0005883a 	mov	r2,zero
    2d14:	dfc00217 	ldw	ra,8(sp)
    2d18:	dc000117 	ldw	r16,4(sp)
    2d1c:	dec00304 	addi	sp,sp,12
    2d20:	f800283a 	ret
    2d24:	8009883a 	mov	r4,r16
    2d28:	dfc00217 	ldw	ra,8(sp)
    2d2c:	dc000117 	ldw	r16,4(sp)
    2d30:	dec00304 	addi	sp,sp,12
    2d34:	0002ad01 	jmpi	2ad0 <__sflush_r>
    2d38:	d9400015 	stw	r5,0(sp)
    2d3c:	0000d180 	call	d18 <__sinit>
    2d40:	d9400017 	ldw	r5,0(sp)
    2d44:	003ff006 	br	2d08 <__alt_mem_Onchip_SRAM+0xf8002d08>

00002d48 <fflush>:
    2d48:	20000526 	beq	r4,zero,2d60 <fflush+0x18>
    2d4c:	00800074 	movhi	r2,1
    2d50:	10a1ae04 	addi	r2,r2,-31048
    2d54:	200b883a 	mov	r5,r4
    2d58:	11000017 	ldw	r4,0(r2)
    2d5c:	0002cec1 	jmpi	2cec <_fflush_r>
    2d60:	00800074 	movhi	r2,1
    2d64:	10a1ad04 	addi	r2,r2,-31052
    2d68:	11000017 	ldw	r4,0(r2)
    2d6c:	01400034 	movhi	r5,0
    2d70:	294b3b04 	addi	r5,r5,11500
    2d74:	00012f41 	jmpi	12f4 <_fwalk_reent>

00002d78 <_malloc_trim_r>:
    2d78:	defffb04 	addi	sp,sp,-20
    2d7c:	dcc00315 	stw	r19,12(sp)
    2d80:	04c00034 	movhi	r19,0
    2d84:	dc800215 	stw	r18,8(sp)
    2d88:	dc400115 	stw	r17,4(sp)
    2d8c:	dc000015 	stw	r16,0(sp)
    2d90:	dfc00415 	stw	ra,16(sp)
    2d94:	2821883a 	mov	r16,r5
    2d98:	9cdc1804 	addi	r19,r19,28768
    2d9c:	2025883a 	mov	r18,r4
    2da0:	0003d740 	call	3d74 <__malloc_lock>
    2da4:	98800217 	ldw	r2,8(r19)
    2da8:	14400117 	ldw	r17,4(r2)
    2dac:	00bfff04 	movi	r2,-4
    2db0:	88a2703a 	and	r17,r17,r2
    2db4:	8c21c83a 	sub	r16,r17,r16
    2db8:	8403fbc4 	addi	r16,r16,4079
    2dbc:	8020d33a 	srli	r16,r16,12
    2dc0:	0083ffc4 	movi	r2,4095
    2dc4:	843fffc4 	addi	r16,r16,-1
    2dc8:	8020933a 	slli	r16,r16,12
    2dcc:	1400060e 	bge	r2,r16,2de8 <_malloc_trim_r+0x70>
    2dd0:	000b883a 	mov	r5,zero
    2dd4:	9009883a 	mov	r4,r18
    2dd8:	00026340 	call	2634 <_sbrk_r>
    2ddc:	98c00217 	ldw	r3,8(r19)
    2de0:	1c47883a 	add	r3,r3,r17
    2de4:	10c00a26 	beq	r2,r3,2e10 <_malloc_trim_r+0x98>
    2de8:	9009883a 	mov	r4,r18
    2dec:	0003d980 	call	3d98 <__malloc_unlock>
    2df0:	0005883a 	mov	r2,zero
    2df4:	dfc00417 	ldw	ra,16(sp)
    2df8:	dcc00317 	ldw	r19,12(sp)
    2dfc:	dc800217 	ldw	r18,8(sp)
    2e00:	dc400117 	ldw	r17,4(sp)
    2e04:	dc000017 	ldw	r16,0(sp)
    2e08:	dec00504 	addi	sp,sp,20
    2e0c:	f800283a 	ret
    2e10:	040bc83a 	sub	r5,zero,r16
    2e14:	9009883a 	mov	r4,r18
    2e18:	00026340 	call	2634 <_sbrk_r>
    2e1c:	00ffffc4 	movi	r3,-1
    2e20:	10c00d26 	beq	r2,r3,2e58 <_malloc_trim_r+0xe0>
    2e24:	00c00074 	movhi	r3,1
    2e28:	18e87a04 	addi	r3,r3,-24088
    2e2c:	18800017 	ldw	r2,0(r3)
    2e30:	99000217 	ldw	r4,8(r19)
    2e34:	8c23c83a 	sub	r17,r17,r16
    2e38:	8c400054 	ori	r17,r17,1
    2e3c:	1421c83a 	sub	r16,r2,r16
    2e40:	24400115 	stw	r17,4(r4)
    2e44:	9009883a 	mov	r4,r18
    2e48:	1c000015 	stw	r16,0(r3)
    2e4c:	0003d980 	call	3d98 <__malloc_unlock>
    2e50:	00800044 	movi	r2,1
    2e54:	003fe706 	br	2df4 <__alt_mem_Onchip_SRAM+0xf8002df4>
    2e58:	000b883a 	mov	r5,zero
    2e5c:	9009883a 	mov	r4,r18
    2e60:	00026340 	call	2634 <_sbrk_r>
    2e64:	99000217 	ldw	r4,8(r19)
    2e68:	014003c4 	movi	r5,15
    2e6c:	1107c83a 	sub	r3,r2,r4
    2e70:	28ffdd0e 	bge	r5,r3,2de8 <__alt_mem_Onchip_SRAM+0xf8002de8>
    2e74:	01400074 	movhi	r5,1
    2e78:	2961af04 	addi	r5,r5,-31044
    2e7c:	29400017 	ldw	r5,0(r5)
    2e80:	18c00054 	ori	r3,r3,1
    2e84:	20c00115 	stw	r3,4(r4)
    2e88:	00c00074 	movhi	r3,1
    2e8c:	1145c83a 	sub	r2,r2,r5
    2e90:	18e87a04 	addi	r3,r3,-24088
    2e94:	18800015 	stw	r2,0(r3)
    2e98:	003fd306 	br	2de8 <__alt_mem_Onchip_SRAM+0xf8002de8>

00002e9c <_free_r>:
    2e9c:	28004126 	beq	r5,zero,2fa4 <_free_r+0x108>
    2ea0:	defffd04 	addi	sp,sp,-12
    2ea4:	dc400115 	stw	r17,4(sp)
    2ea8:	dc000015 	stw	r16,0(sp)
    2eac:	2023883a 	mov	r17,r4
    2eb0:	2821883a 	mov	r16,r5
    2eb4:	dfc00215 	stw	ra,8(sp)
    2eb8:	0003d740 	call	3d74 <__malloc_lock>
    2ebc:	81ffff17 	ldw	r7,-4(r16)
    2ec0:	00bfff84 	movi	r2,-2
    2ec4:	01000034 	movhi	r4,0
    2ec8:	81bffe04 	addi	r6,r16,-8
    2ecc:	3884703a 	and	r2,r7,r2
    2ed0:	211c1804 	addi	r4,r4,28768
    2ed4:	308b883a 	add	r5,r6,r2
    2ed8:	2a400117 	ldw	r9,4(r5)
    2edc:	22000217 	ldw	r8,8(r4)
    2ee0:	00ffff04 	movi	r3,-4
    2ee4:	48c6703a 	and	r3,r9,r3
    2ee8:	2a005726 	beq	r5,r8,3048 <_free_r+0x1ac>
    2eec:	28c00115 	stw	r3,4(r5)
    2ef0:	39c0004c 	andi	r7,r7,1
    2ef4:	3800091e 	bne	r7,zero,2f1c <_free_r+0x80>
    2ef8:	823ffe17 	ldw	r8,-8(r16)
    2efc:	22400204 	addi	r9,r4,8
    2f00:	320dc83a 	sub	r6,r6,r8
    2f04:	31c00217 	ldw	r7,8(r6)
    2f08:	1205883a 	add	r2,r2,r8
    2f0c:	3a406526 	beq	r7,r9,30a4 <_free_r+0x208>
    2f10:	32000317 	ldw	r8,12(r6)
    2f14:	3a000315 	stw	r8,12(r7)
    2f18:	41c00215 	stw	r7,8(r8)
    2f1c:	28cf883a 	add	r7,r5,r3
    2f20:	39c00117 	ldw	r7,4(r7)
    2f24:	39c0004c 	andi	r7,r7,1
    2f28:	38003a26 	beq	r7,zero,3014 <_free_r+0x178>
    2f2c:	10c00054 	ori	r3,r2,1
    2f30:	30c00115 	stw	r3,4(r6)
    2f34:	3087883a 	add	r3,r6,r2
    2f38:	18800015 	stw	r2,0(r3)
    2f3c:	00c07fc4 	movi	r3,511
    2f40:	18801936 	bltu	r3,r2,2fa8 <_free_r+0x10c>
    2f44:	1004d0fa 	srli	r2,r2,3
    2f48:	01c00044 	movi	r7,1
    2f4c:	21400117 	ldw	r5,4(r4)
    2f50:	10c00044 	addi	r3,r2,1
    2f54:	18c7883a 	add	r3,r3,r3
    2f58:	1005d0ba 	srai	r2,r2,2
    2f5c:	18c7883a 	add	r3,r3,r3
    2f60:	18c7883a 	add	r3,r3,r3
    2f64:	1907883a 	add	r3,r3,r4
    2f68:	3884983a 	sll	r2,r7,r2
    2f6c:	19c00017 	ldw	r7,0(r3)
    2f70:	1a3ffe04 	addi	r8,r3,-8
    2f74:	1144b03a 	or	r2,r2,r5
    2f78:	32000315 	stw	r8,12(r6)
    2f7c:	31c00215 	stw	r7,8(r6)
    2f80:	20800115 	stw	r2,4(r4)
    2f84:	19800015 	stw	r6,0(r3)
    2f88:	39800315 	stw	r6,12(r7)
    2f8c:	8809883a 	mov	r4,r17
    2f90:	dfc00217 	ldw	ra,8(sp)
    2f94:	dc400117 	ldw	r17,4(sp)
    2f98:	dc000017 	ldw	r16,0(sp)
    2f9c:	dec00304 	addi	sp,sp,12
    2fa0:	0003d981 	jmpi	3d98 <__malloc_unlock>
    2fa4:	f800283a 	ret
    2fa8:	100ad27a 	srli	r5,r2,9
    2fac:	00c00104 	movi	r3,4
    2fb0:	19404a36 	bltu	r3,r5,30dc <_free_r+0x240>
    2fb4:	100ad1ba 	srli	r5,r2,6
    2fb8:	28c00e44 	addi	r3,r5,57
    2fbc:	18c7883a 	add	r3,r3,r3
    2fc0:	29400e04 	addi	r5,r5,56
    2fc4:	18c7883a 	add	r3,r3,r3
    2fc8:	18c7883a 	add	r3,r3,r3
    2fcc:	1909883a 	add	r4,r3,r4
    2fd0:	20c00017 	ldw	r3,0(r4)
    2fd4:	01c00034 	movhi	r7,0
    2fd8:	213ffe04 	addi	r4,r4,-8
    2fdc:	39dc1804 	addi	r7,r7,28768
    2fe0:	20c04426 	beq	r4,r3,30f4 <_free_r+0x258>
    2fe4:	01ffff04 	movi	r7,-4
    2fe8:	19400117 	ldw	r5,4(r3)
    2fec:	29ca703a 	and	r5,r5,r7
    2ff0:	1140022e 	bgeu	r2,r5,2ffc <_free_r+0x160>
    2ff4:	18c00217 	ldw	r3,8(r3)
    2ff8:	20fffb1e 	bne	r4,r3,2fe8 <__alt_mem_Onchip_SRAM+0xf8002fe8>
    2ffc:	19000317 	ldw	r4,12(r3)
    3000:	31000315 	stw	r4,12(r6)
    3004:	30c00215 	stw	r3,8(r6)
    3008:	21800215 	stw	r6,8(r4)
    300c:	19800315 	stw	r6,12(r3)
    3010:	003fde06 	br	2f8c <__alt_mem_Onchip_SRAM+0xf8002f8c>
    3014:	29c00217 	ldw	r7,8(r5)
    3018:	10c5883a 	add	r2,r2,r3
    301c:	00c00034 	movhi	r3,0
    3020:	18dc1a04 	addi	r3,r3,28776
    3024:	38c03b26 	beq	r7,r3,3114 <_free_r+0x278>
    3028:	2a000317 	ldw	r8,12(r5)
    302c:	11400054 	ori	r5,r2,1
    3030:	3087883a 	add	r3,r6,r2
    3034:	3a000315 	stw	r8,12(r7)
    3038:	41c00215 	stw	r7,8(r8)
    303c:	31400115 	stw	r5,4(r6)
    3040:	18800015 	stw	r2,0(r3)
    3044:	003fbd06 	br	2f3c <__alt_mem_Onchip_SRAM+0xf8002f3c>
    3048:	39c0004c 	andi	r7,r7,1
    304c:	10c5883a 	add	r2,r2,r3
    3050:	3800071e 	bne	r7,zero,3070 <_free_r+0x1d4>
    3054:	81fffe17 	ldw	r7,-8(r16)
    3058:	31cdc83a 	sub	r6,r6,r7
    305c:	30c00317 	ldw	r3,12(r6)
    3060:	31400217 	ldw	r5,8(r6)
    3064:	11c5883a 	add	r2,r2,r7
    3068:	28c00315 	stw	r3,12(r5)
    306c:	19400215 	stw	r5,8(r3)
    3070:	10c00054 	ori	r3,r2,1
    3074:	30c00115 	stw	r3,4(r6)
    3078:	00c00074 	movhi	r3,1
    307c:	18e1b004 	addi	r3,r3,-31040
    3080:	18c00017 	ldw	r3,0(r3)
    3084:	21800215 	stw	r6,8(r4)
    3088:	10ffc036 	bltu	r2,r3,2f8c <__alt_mem_Onchip_SRAM+0xf8002f8c>
    308c:	00800074 	movhi	r2,1
    3090:	10a86e04 	addi	r2,r2,-24136
    3094:	11400017 	ldw	r5,0(r2)
    3098:	8809883a 	mov	r4,r17
    309c:	0002d780 	call	2d78 <_malloc_trim_r>
    30a0:	003fba06 	br	2f8c <__alt_mem_Onchip_SRAM+0xf8002f8c>
    30a4:	28c9883a 	add	r4,r5,r3
    30a8:	21000117 	ldw	r4,4(r4)
    30ac:	2100004c 	andi	r4,r4,1
    30b0:	2000391e 	bne	r4,zero,3198 <_free_r+0x2fc>
    30b4:	29c00217 	ldw	r7,8(r5)
    30b8:	29000317 	ldw	r4,12(r5)
    30bc:	1885883a 	add	r2,r3,r2
    30c0:	10c00054 	ori	r3,r2,1
    30c4:	39000315 	stw	r4,12(r7)
    30c8:	21c00215 	stw	r7,8(r4)
    30cc:	30c00115 	stw	r3,4(r6)
    30d0:	308d883a 	add	r6,r6,r2
    30d4:	30800015 	stw	r2,0(r6)
    30d8:	003fac06 	br	2f8c <__alt_mem_Onchip_SRAM+0xf8002f8c>
    30dc:	00c00504 	movi	r3,20
    30e0:	19401536 	bltu	r3,r5,3138 <_free_r+0x29c>
    30e4:	28c01704 	addi	r3,r5,92
    30e8:	18c7883a 	add	r3,r3,r3
    30ec:	294016c4 	addi	r5,r5,91
    30f0:	003fb406 	br	2fc4 <__alt_mem_Onchip_SRAM+0xf8002fc4>
    30f4:	280bd0ba 	srai	r5,r5,2
    30f8:	00c00044 	movi	r3,1
    30fc:	38800117 	ldw	r2,4(r7)
    3100:	194a983a 	sll	r5,r3,r5
    3104:	2007883a 	mov	r3,r4
    3108:	2884b03a 	or	r2,r5,r2
    310c:	38800115 	stw	r2,4(r7)
    3110:	003fbb06 	br	3000 <__alt_mem_Onchip_SRAM+0xf8003000>
    3114:	21800515 	stw	r6,20(r4)
    3118:	21800415 	stw	r6,16(r4)
    311c:	10c00054 	ori	r3,r2,1
    3120:	31c00315 	stw	r7,12(r6)
    3124:	31c00215 	stw	r7,8(r6)
    3128:	30c00115 	stw	r3,4(r6)
    312c:	308d883a 	add	r6,r6,r2
    3130:	30800015 	stw	r2,0(r6)
    3134:	003f9506 	br	2f8c <__alt_mem_Onchip_SRAM+0xf8002f8c>
    3138:	00c01504 	movi	r3,84
    313c:	19400536 	bltu	r3,r5,3154 <_free_r+0x2b8>
    3140:	100ad33a 	srli	r5,r2,12
    3144:	28c01bc4 	addi	r3,r5,111
    3148:	18c7883a 	add	r3,r3,r3
    314c:	29401b84 	addi	r5,r5,110
    3150:	003f9c06 	br	2fc4 <__alt_mem_Onchip_SRAM+0xf8002fc4>
    3154:	00c05504 	movi	r3,340
    3158:	19400536 	bltu	r3,r5,3170 <_free_r+0x2d4>
    315c:	100ad3fa 	srli	r5,r2,15
    3160:	28c01e04 	addi	r3,r5,120
    3164:	18c7883a 	add	r3,r3,r3
    3168:	29401dc4 	addi	r5,r5,119
    316c:	003f9506 	br	2fc4 <__alt_mem_Onchip_SRAM+0xf8002fc4>
    3170:	00c15504 	movi	r3,1364
    3174:	19400536 	bltu	r3,r5,318c <_free_r+0x2f0>
    3178:	100ad4ba 	srli	r5,r2,18
    317c:	28c01f44 	addi	r3,r5,125
    3180:	18c7883a 	add	r3,r3,r3
    3184:	29401f04 	addi	r5,r5,124
    3188:	003f8e06 	br	2fc4 <__alt_mem_Onchip_SRAM+0xf8002fc4>
    318c:	00c03f84 	movi	r3,254
    3190:	01401f84 	movi	r5,126
    3194:	003f8b06 	br	2fc4 <__alt_mem_Onchip_SRAM+0xf8002fc4>
    3198:	10c00054 	ori	r3,r2,1
    319c:	30c00115 	stw	r3,4(r6)
    31a0:	308d883a 	add	r6,r6,r2
    31a4:	30800015 	stw	r2,0(r6)
    31a8:	003f7806 	br	2f8c <__alt_mem_Onchip_SRAM+0xf8002f8c>

000031ac <_lseek_r>:
    31ac:	defffd04 	addi	sp,sp,-12
    31b0:	2805883a 	mov	r2,r5
    31b4:	dc000015 	stw	r16,0(sp)
    31b8:	04000074 	movhi	r16,1
    31bc:	dc400115 	stw	r17,4(sp)
    31c0:	300b883a 	mov	r5,r6
    31c4:	84286b04 	addi	r16,r16,-24148
    31c8:	2023883a 	mov	r17,r4
    31cc:	380d883a 	mov	r6,r7
    31d0:	1009883a 	mov	r4,r2
    31d4:	dfc00215 	stw	ra,8(sp)
    31d8:	80000015 	stw	zero,0(r16)
    31dc:	0003c1c0 	call	3c1c <lseek>
    31e0:	00ffffc4 	movi	r3,-1
    31e4:	10c00526 	beq	r2,r3,31fc <_lseek_r+0x50>
    31e8:	dfc00217 	ldw	ra,8(sp)
    31ec:	dc400117 	ldw	r17,4(sp)
    31f0:	dc000017 	ldw	r16,0(sp)
    31f4:	dec00304 	addi	sp,sp,12
    31f8:	f800283a 	ret
    31fc:	80c00017 	ldw	r3,0(r16)
    3200:	183ff926 	beq	r3,zero,31e8 <__alt_mem_Onchip_SRAM+0xf80031e8>
    3204:	88c00015 	stw	r3,0(r17)
    3208:	003ff706 	br	31e8 <__alt_mem_Onchip_SRAM+0xf80031e8>

0000320c <__smakebuf_r>:
    320c:	2880030b 	ldhu	r2,12(r5)
    3210:	10c0008c 	andi	r3,r2,2
    3214:	1800411e 	bne	r3,zero,331c <__smakebuf_r+0x110>
    3218:	deffec04 	addi	sp,sp,-80
    321c:	dc000f15 	stw	r16,60(sp)
    3220:	2821883a 	mov	r16,r5
    3224:	2940038f 	ldh	r5,14(r5)
    3228:	dc401015 	stw	r17,64(sp)
    322c:	dfc01315 	stw	ra,76(sp)
    3230:	dcc01215 	stw	r19,72(sp)
    3234:	dc801115 	stw	r18,68(sp)
    3238:	2023883a 	mov	r17,r4
    323c:	28001c16 	blt	r5,zero,32b0 <__smakebuf_r+0xa4>
    3240:	d80d883a 	mov	r6,sp
    3244:	00034280 	call	3428 <_fstat_r>
    3248:	10001816 	blt	r2,zero,32ac <__smakebuf_r+0xa0>
    324c:	d8800117 	ldw	r2,4(sp)
    3250:	00e00014 	movui	r3,32768
    3254:	10bc000c 	andi	r2,r2,61440
    3258:	14c80020 	cmpeqi	r19,r2,8192
    325c:	10c03726 	beq	r2,r3,333c <__smakebuf_r+0x130>
    3260:	80c0030b 	ldhu	r3,12(r16)
    3264:	18c20014 	ori	r3,r3,2048
    3268:	80c0030d 	sth	r3,12(r16)
    326c:	00c80004 	movi	r3,8192
    3270:	10c0521e 	bne	r2,r3,33bc <__smakebuf_r+0x1b0>
    3274:	8140038f 	ldh	r5,14(r16)
    3278:	8809883a 	mov	r4,r17
    327c:	00034840 	call	3484 <_isatty_r>
    3280:	10004c26 	beq	r2,zero,33b4 <__smakebuf_r+0x1a8>
    3284:	8080030b 	ldhu	r2,12(r16)
    3288:	80c010c4 	addi	r3,r16,67
    328c:	80c00015 	stw	r3,0(r16)
    3290:	10800054 	ori	r2,r2,1
    3294:	8080030d 	sth	r2,12(r16)
    3298:	00800044 	movi	r2,1
    329c:	80c00415 	stw	r3,16(r16)
    32a0:	80800515 	stw	r2,20(r16)
    32a4:	04810004 	movi	r18,1024
    32a8:	00000706 	br	32c8 <__smakebuf_r+0xbc>
    32ac:	8080030b 	ldhu	r2,12(r16)
    32b0:	10c0200c 	andi	r3,r2,128
    32b4:	18001f1e 	bne	r3,zero,3334 <__smakebuf_r+0x128>
    32b8:	04810004 	movi	r18,1024
    32bc:	10820014 	ori	r2,r2,2048
    32c0:	8080030d 	sth	r2,12(r16)
    32c4:	0027883a 	mov	r19,zero
    32c8:	900b883a 	mov	r5,r18
    32cc:	8809883a 	mov	r4,r17
    32d0:	00014140 	call	1414 <_malloc_r>
    32d4:	10002c26 	beq	r2,zero,3388 <__smakebuf_r+0x17c>
    32d8:	80c0030b 	ldhu	r3,12(r16)
    32dc:	01000034 	movhi	r4,0
    32e0:	21027004 	addi	r4,r4,2496
    32e4:	89000f15 	stw	r4,60(r17)
    32e8:	18c02014 	ori	r3,r3,128
    32ec:	80c0030d 	sth	r3,12(r16)
    32f0:	80800015 	stw	r2,0(r16)
    32f4:	80800415 	stw	r2,16(r16)
    32f8:	84800515 	stw	r18,20(r16)
    32fc:	98001a1e 	bne	r19,zero,3368 <__smakebuf_r+0x15c>
    3300:	dfc01317 	ldw	ra,76(sp)
    3304:	dcc01217 	ldw	r19,72(sp)
    3308:	dc801117 	ldw	r18,68(sp)
    330c:	dc401017 	ldw	r17,64(sp)
    3310:	dc000f17 	ldw	r16,60(sp)
    3314:	dec01404 	addi	sp,sp,80
    3318:	f800283a 	ret
    331c:	288010c4 	addi	r2,r5,67
    3320:	28800015 	stw	r2,0(r5)
    3324:	28800415 	stw	r2,16(r5)
    3328:	00800044 	movi	r2,1
    332c:	28800515 	stw	r2,20(r5)
    3330:	f800283a 	ret
    3334:	04801004 	movi	r18,64
    3338:	003fe006 	br	32bc <__alt_mem_Onchip_SRAM+0xf80032bc>
    333c:	81000a17 	ldw	r4,40(r16)
    3340:	00c00034 	movhi	r3,0
    3344:	18c9d804 	addi	r3,r3,10080
    3348:	20ffc51e 	bne	r4,r3,3260 <__alt_mem_Onchip_SRAM+0xf8003260>
    334c:	8080030b 	ldhu	r2,12(r16)
    3350:	04810004 	movi	r18,1024
    3354:	84801315 	stw	r18,76(r16)
    3358:	1484b03a 	or	r2,r2,r18
    335c:	8080030d 	sth	r2,12(r16)
    3360:	0027883a 	mov	r19,zero
    3364:	003fd806 	br	32c8 <__alt_mem_Onchip_SRAM+0xf80032c8>
    3368:	8140038f 	ldh	r5,14(r16)
    336c:	8809883a 	mov	r4,r17
    3370:	00034840 	call	3484 <_isatty_r>
    3374:	103fe226 	beq	r2,zero,3300 <__alt_mem_Onchip_SRAM+0xf8003300>
    3378:	8080030b 	ldhu	r2,12(r16)
    337c:	10800054 	ori	r2,r2,1
    3380:	8080030d 	sth	r2,12(r16)
    3384:	003fde06 	br	3300 <__alt_mem_Onchip_SRAM+0xf8003300>
    3388:	8080030b 	ldhu	r2,12(r16)
    338c:	10c0800c 	andi	r3,r2,512
    3390:	183fdb1e 	bne	r3,zero,3300 <__alt_mem_Onchip_SRAM+0xf8003300>
    3394:	10800094 	ori	r2,r2,2
    3398:	80c010c4 	addi	r3,r16,67
    339c:	8080030d 	sth	r2,12(r16)
    33a0:	00800044 	movi	r2,1
    33a4:	80c00015 	stw	r3,0(r16)
    33a8:	80c00415 	stw	r3,16(r16)
    33ac:	80800515 	stw	r2,20(r16)
    33b0:	003fd306 	br	3300 <__alt_mem_Onchip_SRAM+0xf8003300>
    33b4:	04810004 	movi	r18,1024
    33b8:	003fc306 	br	32c8 <__alt_mem_Onchip_SRAM+0xf80032c8>
    33bc:	0027883a 	mov	r19,zero
    33c0:	04810004 	movi	r18,1024
    33c4:	003fc006 	br	32c8 <__alt_mem_Onchip_SRAM+0xf80032c8>

000033c8 <_read_r>:
    33c8:	defffd04 	addi	sp,sp,-12
    33cc:	2805883a 	mov	r2,r5
    33d0:	dc000015 	stw	r16,0(sp)
    33d4:	04000074 	movhi	r16,1
    33d8:	dc400115 	stw	r17,4(sp)
    33dc:	300b883a 	mov	r5,r6
    33e0:	84286b04 	addi	r16,r16,-24148
    33e4:	2023883a 	mov	r17,r4
    33e8:	380d883a 	mov	r6,r7
    33ec:	1009883a 	mov	r4,r2
    33f0:	dfc00215 	stw	ra,8(sp)
    33f4:	80000015 	stw	zero,0(r16)
    33f8:	0003df80 	call	3df8 <read>
    33fc:	00ffffc4 	movi	r3,-1
    3400:	10c00526 	beq	r2,r3,3418 <_read_r+0x50>
    3404:	dfc00217 	ldw	ra,8(sp)
    3408:	dc400117 	ldw	r17,4(sp)
    340c:	dc000017 	ldw	r16,0(sp)
    3410:	dec00304 	addi	sp,sp,12
    3414:	f800283a 	ret
    3418:	80c00017 	ldw	r3,0(r16)
    341c:	183ff926 	beq	r3,zero,3404 <__alt_mem_Onchip_SRAM+0xf8003404>
    3420:	88c00015 	stw	r3,0(r17)
    3424:	003ff706 	br	3404 <__alt_mem_Onchip_SRAM+0xf8003404>

00003428 <_fstat_r>:
    3428:	defffd04 	addi	sp,sp,-12
    342c:	2805883a 	mov	r2,r5
    3430:	dc000015 	stw	r16,0(sp)
    3434:	04000074 	movhi	r16,1
    3438:	dc400115 	stw	r17,4(sp)
    343c:	84286b04 	addi	r16,r16,-24148
    3440:	2023883a 	mov	r17,r4
    3444:	300b883a 	mov	r5,r6
    3448:	1009883a 	mov	r4,r2
    344c:	dfc00215 	stw	ra,8(sp)
    3450:	80000015 	stw	zero,0(r16)
    3454:	00037600 	call	3760 <fstat>
    3458:	00ffffc4 	movi	r3,-1
    345c:	10c00526 	beq	r2,r3,3474 <_fstat_r+0x4c>
    3460:	dfc00217 	ldw	ra,8(sp)
    3464:	dc400117 	ldw	r17,4(sp)
    3468:	dc000017 	ldw	r16,0(sp)
    346c:	dec00304 	addi	sp,sp,12
    3470:	f800283a 	ret
    3474:	80c00017 	ldw	r3,0(r16)
    3478:	183ff926 	beq	r3,zero,3460 <__alt_mem_Onchip_SRAM+0xf8003460>
    347c:	88c00015 	stw	r3,0(r17)
    3480:	003ff706 	br	3460 <__alt_mem_Onchip_SRAM+0xf8003460>

00003484 <_isatty_r>:
    3484:	defffd04 	addi	sp,sp,-12
    3488:	dc000015 	stw	r16,0(sp)
    348c:	04000074 	movhi	r16,1
    3490:	dc400115 	stw	r17,4(sp)
    3494:	84286b04 	addi	r16,r16,-24148
    3498:	2023883a 	mov	r17,r4
    349c:	2809883a 	mov	r4,r5
    34a0:	dfc00215 	stw	ra,8(sp)
    34a4:	80000015 	stw	zero,0(r16)
    34a8:	0003a480 	call	3a48 <isatty>
    34ac:	00ffffc4 	movi	r3,-1
    34b0:	10c00526 	beq	r2,r3,34c8 <_isatty_r+0x44>
    34b4:	dfc00217 	ldw	ra,8(sp)
    34b8:	dc400117 	ldw	r17,4(sp)
    34bc:	dc000017 	ldw	r16,0(sp)
    34c0:	dec00304 	addi	sp,sp,12
    34c4:	f800283a 	ret
    34c8:	80c00017 	ldw	r3,0(r16)
    34cc:	183ff926 	beq	r3,zero,34b4 <__alt_mem_Onchip_SRAM+0xf80034b4>
    34d0:	88c00015 	stw	r3,0(r17)
    34d4:	003ff706 	br	34b4 <__alt_mem_Onchip_SRAM+0xf80034b4>

000034d8 <__muldi3>:
    34d8:	defff604 	addi	sp,sp,-40
    34dc:	dd800615 	stw	r22,24(sp)
    34e0:	dd400515 	stw	r21,20(sp)
    34e4:	dc400115 	stw	r17,4(sp)
    34e8:	357fffcc 	andi	r21,r6,65535
    34ec:	2022d43a 	srli	r17,r4,16
    34f0:	25bfffcc 	andi	r22,r4,65535
    34f4:	dcc00315 	stw	r19,12(sp)
    34f8:	dc800215 	stw	r18,8(sp)
    34fc:	2027883a 	mov	r19,r4
    3500:	2825883a 	mov	r18,r5
    3504:	b009883a 	mov	r4,r22
    3508:	a80b883a 	mov	r5,r21
    350c:	dfc00915 	stw	ra,36(sp)
    3510:	df000815 	stw	fp,32(sp)
    3514:	ddc00715 	stw	r23,28(sp)
    3518:	3839883a 	mov	fp,r7
    351c:	302ed43a 	srli	r23,r6,16
    3520:	dd000415 	stw	r20,16(sp)
    3524:	dc000015 	stw	r16,0(sp)
    3528:	3029883a 	mov	r20,r6
    352c:	00007580 	call	758 <__mulsi3>
    3530:	a80b883a 	mov	r5,r21
    3534:	8809883a 	mov	r4,r17
    3538:	1021883a 	mov	r16,r2
    353c:	00007580 	call	758 <__mulsi3>
    3540:	8809883a 	mov	r4,r17
    3544:	b80b883a 	mov	r5,r23
    3548:	102b883a 	mov	r21,r2
    354c:	00007580 	call	758 <__mulsi3>
    3550:	b80b883a 	mov	r5,r23
    3554:	b009883a 	mov	r4,r22
    3558:	1023883a 	mov	r17,r2
    355c:	00007580 	call	758 <__mulsi3>
    3560:	8006d43a 	srli	r3,r16,16
    3564:	1545883a 	add	r2,r2,r21
    3568:	1885883a 	add	r2,r3,r2
    356c:	1540022e 	bgeu	r2,r21,3578 <__muldi3+0xa0>
    3570:	00c00074 	movhi	r3,1
    3574:	88e3883a 	add	r17,r17,r3
    3578:	1006d43a 	srli	r3,r2,16
    357c:	1004943a 	slli	r2,r2,16
    3580:	e00b883a 	mov	r5,fp
    3584:	9809883a 	mov	r4,r19
    3588:	843fffcc 	andi	r16,r16,65535
    358c:	1c63883a 	add	r17,r3,r17
    3590:	1421883a 	add	r16,r2,r16
    3594:	00007580 	call	758 <__mulsi3>
    3598:	900b883a 	mov	r5,r18
    359c:	a009883a 	mov	r4,r20
    35a0:	1027883a 	mov	r19,r2
    35a4:	00007580 	call	758 <__mulsi3>
    35a8:	9885883a 	add	r2,r19,r2
    35ac:	1447883a 	add	r3,r2,r17
    35b0:	8005883a 	mov	r2,r16
    35b4:	dfc00917 	ldw	ra,36(sp)
    35b8:	df000817 	ldw	fp,32(sp)
    35bc:	ddc00717 	ldw	r23,28(sp)
    35c0:	dd800617 	ldw	r22,24(sp)
    35c4:	dd400517 	ldw	r21,20(sp)
    35c8:	dd000417 	ldw	r20,16(sp)
    35cc:	dcc00317 	ldw	r19,12(sp)
    35d0:	dc800217 	ldw	r18,8(sp)
    35d4:	dc400117 	ldw	r17,4(sp)
    35d8:	dc000017 	ldw	r16,0(sp)
    35dc:	dec00a04 	addi	sp,sp,40
    35e0:	f800283a 	ret

000035e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    35e4:	defffe04 	addi	sp,sp,-8
    35e8:	dfc00115 	stw	ra,4(sp)
    35ec:	df000015 	stw	fp,0(sp)
    35f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    35f4:	d0a00b17 	ldw	r2,-32724(gp)
    35f8:	10000326 	beq	r2,zero,3608 <alt_get_errno+0x24>
    35fc:	d0a00b17 	ldw	r2,-32724(gp)
    3600:	103ee83a 	callr	r2
    3604:	00000106 	br	360c <alt_get_errno+0x28>
    3608:	d0a6c004 	addi	r2,gp,-25856
}
    360c:	e037883a 	mov	sp,fp
    3610:	dfc00117 	ldw	ra,4(sp)
    3614:	df000017 	ldw	fp,0(sp)
    3618:	dec00204 	addi	sp,sp,8
    361c:	f800283a 	ret

00003620 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    3620:	defffb04 	addi	sp,sp,-20
    3624:	dfc00415 	stw	ra,16(sp)
    3628:	df000315 	stw	fp,12(sp)
    362c:	df000304 	addi	fp,sp,12
    3630:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    3634:	e0bfff17 	ldw	r2,-4(fp)
    3638:	10000816 	blt	r2,zero,365c <close+0x3c>
    363c:	01400304 	movi	r5,12
    3640:	e13fff17 	ldw	r4,-4(fp)
    3644:	00007580 	call	758 <__mulsi3>
    3648:	1007883a 	mov	r3,r2
    364c:	00800034 	movhi	r2,0
    3650:	109d2404 	addi	r2,r2,29840
    3654:	1885883a 	add	r2,r3,r2
    3658:	00000106 	br	3660 <close+0x40>
    365c:	0005883a 	mov	r2,zero
    3660:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    3664:	e0bffd17 	ldw	r2,-12(fp)
    3668:	10001926 	beq	r2,zero,36d0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    366c:	e0bffd17 	ldw	r2,-12(fp)
    3670:	10800017 	ldw	r2,0(r2)
    3674:	10800417 	ldw	r2,16(r2)
    3678:	10000626 	beq	r2,zero,3694 <close+0x74>
    367c:	e0bffd17 	ldw	r2,-12(fp)
    3680:	10800017 	ldw	r2,0(r2)
    3684:	10800417 	ldw	r2,16(r2)
    3688:	e13ffd17 	ldw	r4,-12(fp)
    368c:	103ee83a 	callr	r2
    3690:	00000106 	br	3698 <close+0x78>
    3694:	0005883a 	mov	r2,zero
    3698:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    369c:	e13fff17 	ldw	r4,-4(fp)
    36a0:	0003efc0 	call	3efc <alt_release_fd>
    if (rval < 0)
    36a4:	e0bffe17 	ldw	r2,-8(fp)
    36a8:	1000070e 	bge	r2,zero,36c8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    36ac:	00035e40 	call	35e4 <alt_get_errno>
    36b0:	1007883a 	mov	r3,r2
    36b4:	e0bffe17 	ldw	r2,-8(fp)
    36b8:	0085c83a 	sub	r2,zero,r2
    36bc:	18800015 	stw	r2,0(r3)
      return -1;
    36c0:	00bfffc4 	movi	r2,-1
    36c4:	00000706 	br	36e4 <close+0xc4>
    }
    return 0;
    36c8:	0005883a 	mov	r2,zero
    36cc:	00000506 	br	36e4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    36d0:	00035e40 	call	35e4 <alt_get_errno>
    36d4:	1007883a 	mov	r3,r2
    36d8:	00801444 	movi	r2,81
    36dc:	18800015 	stw	r2,0(r3)
    return -1;
    36e0:	00bfffc4 	movi	r2,-1
  }
}
    36e4:	e037883a 	mov	sp,fp
    36e8:	dfc00117 	ldw	ra,4(sp)
    36ec:	df000017 	ldw	fp,0(sp)
    36f0:	dec00204 	addi	sp,sp,8
    36f4:	f800283a 	ret

000036f8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    36f8:	defffc04 	addi	sp,sp,-16
    36fc:	df000315 	stw	fp,12(sp)
    3700:	df000304 	addi	fp,sp,12
    3704:	e13ffd15 	stw	r4,-12(fp)
    3708:	e17ffe15 	stw	r5,-8(fp)
    370c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    3710:	e0bfff17 	ldw	r2,-4(fp)
}
    3714:	e037883a 	mov	sp,fp
    3718:	df000017 	ldw	fp,0(sp)
    371c:	dec00104 	addi	sp,sp,4
    3720:	f800283a 	ret

00003724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3724:	defffe04 	addi	sp,sp,-8
    3728:	dfc00115 	stw	ra,4(sp)
    372c:	df000015 	stw	fp,0(sp)
    3730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3734:	d0a00b17 	ldw	r2,-32724(gp)
    3738:	10000326 	beq	r2,zero,3748 <alt_get_errno+0x24>
    373c:	d0a00b17 	ldw	r2,-32724(gp)
    3740:	103ee83a 	callr	r2
    3744:	00000106 	br	374c <alt_get_errno+0x28>
    3748:	d0a6c004 	addi	r2,gp,-25856
}
    374c:	e037883a 	mov	sp,fp
    3750:	dfc00117 	ldw	ra,4(sp)
    3754:	df000017 	ldw	fp,0(sp)
    3758:	dec00204 	addi	sp,sp,8
    375c:	f800283a 	ret

00003760 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3760:	defffb04 	addi	sp,sp,-20
    3764:	dfc00415 	stw	ra,16(sp)
    3768:	df000315 	stw	fp,12(sp)
    376c:	df000304 	addi	fp,sp,12
    3770:	e13ffe15 	stw	r4,-8(fp)
    3774:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3778:	e0bffe17 	ldw	r2,-8(fp)
    377c:	10000816 	blt	r2,zero,37a0 <fstat+0x40>
    3780:	01400304 	movi	r5,12
    3784:	e13ffe17 	ldw	r4,-8(fp)
    3788:	00007580 	call	758 <__mulsi3>
    378c:	1007883a 	mov	r3,r2
    3790:	00800034 	movhi	r2,0
    3794:	109d2404 	addi	r2,r2,29840
    3798:	1885883a 	add	r2,r3,r2
    379c:	00000106 	br	37a4 <fstat+0x44>
    37a0:	0005883a 	mov	r2,zero
    37a4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    37a8:	e0bffd17 	ldw	r2,-12(fp)
    37ac:	10001026 	beq	r2,zero,37f0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    37b0:	e0bffd17 	ldw	r2,-12(fp)
    37b4:	10800017 	ldw	r2,0(r2)
    37b8:	10800817 	ldw	r2,32(r2)
    37bc:	10000726 	beq	r2,zero,37dc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    37c0:	e0bffd17 	ldw	r2,-12(fp)
    37c4:	10800017 	ldw	r2,0(r2)
    37c8:	10800817 	ldw	r2,32(r2)
    37cc:	e17fff17 	ldw	r5,-4(fp)
    37d0:	e13ffd17 	ldw	r4,-12(fp)
    37d4:	103ee83a 	callr	r2
    37d8:	00000a06 	br	3804 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    37dc:	e0bfff17 	ldw	r2,-4(fp)
    37e0:	00c80004 	movi	r3,8192
    37e4:	10c00115 	stw	r3,4(r2)
      return 0;
    37e8:	0005883a 	mov	r2,zero
    37ec:	00000506 	br	3804 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    37f0:	00037240 	call	3724 <alt_get_errno>
    37f4:	1007883a 	mov	r3,r2
    37f8:	00801444 	movi	r2,81
    37fc:	18800015 	stw	r2,0(r3)
    return -1;
    3800:	00bfffc4 	movi	r2,-1
  }
}
    3804:	e037883a 	mov	sp,fp
    3808:	dfc00117 	ldw	ra,4(sp)
    380c:	df000017 	ldw	fp,0(sp)
    3810:	dec00204 	addi	sp,sp,8
    3814:	f800283a 	ret

00003818 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
    3818:	defff404 	addi	sp,sp,-48
    381c:	dfc00b15 	stw	ra,44(sp)
    3820:	df000a15 	stw	fp,40(sp)
    3824:	dd000915 	stw	r20,36(sp)
    3828:	dcc00815 	stw	r19,32(sp)
    382c:	dc800715 	stw	r18,28(sp)
    3830:	dc400615 	stw	r17,24(sp)
    3834:	dc000515 	stw	r16,20(sp)
    3838:	df000a04 	addi	fp,sp,40
    383c:	e13ff915 	stw	r4,-28(fp)
    3840:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
    3844:	e0bffa17 	ldw	r2,-24(fp)
    3848:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    384c:	d0a6cc17 	ldw	r2,-25808(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
    3850:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    3854:	d0a6cb17 	ldw	r2,-25812(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
    3858:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
    385c:	e0bff817 	ldw	r2,-32(fp)
    3860:	10005f26 	beq	r2,zero,39e0 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    3864:	d0a6c617 	ldw	r2,-25832(gp)
    3868:	1029883a 	mov	r20,r2
    386c:	e17ff817 	ldw	r5,-32(fp)
    3870:	e13ff717 	ldw	r4,-36(fp)
    3874:	000069c0 	call	69c <__udivsi3>
    3878:	a085883a 	add	r2,r20,r2
    387c:	1007883a 	mov	r3,r2
    3880:	e0bff917 	ldw	r2,-28(fp)
    3884:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
    3888:	d0a6c717 	ldw	r2,-25828(gp)
    388c:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
    3890:	e0bff717 	ldw	r2,-36(fp)
    3894:	1021883a 	mov	r16,r2
    3898:	0023883a 	mov	r17,zero
    389c:	e17ff817 	ldw	r5,-32(fp)
    38a0:	010003f4 	movhi	r4,15
    38a4:	21109004 	addi	r4,r4,16960
    38a8:	000069c0 	call	69c <__udivsi3>
    38ac:	1025883a 	mov	r18,r2
    38b0:	0027883a 	mov	r19,zero
    38b4:	900d883a 	mov	r6,r18
    38b8:	980f883a 	mov	r7,r19
    38bc:	8009883a 	mov	r4,r16
    38c0:	880b883a 	mov	r5,r17
    38c4:	00034d80 	call	34d8 <__muldi3>
    38c8:	1009883a 	mov	r4,r2
    38cc:	180b883a 	mov	r5,r3
    38d0:	2005883a 	mov	r2,r4
    38d4:	2807883a 	mov	r3,r5
    38d8:	018003f4 	movhi	r6,15
    38dc:	31909004 	addi	r6,r6,16960
    38e0:	000f883a 	mov	r7,zero
    38e4:	1009883a 	mov	r4,r2
    38e8:	180b883a 	mov	r5,r3
    38ec:	00064c80 	call	64c8 <__umoddi3>
    38f0:	1009883a 	mov	r4,r2
    38f4:	180b883a 	mov	r5,r3
    38f8:	2005883a 	mov	r2,r4
    38fc:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
    3900:	a085883a 	add	r2,r20,r2
    3904:	1007883a 	mov	r3,r2
    3908:	e0bff917 	ldw	r2,-28(fp)
    390c:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    3910:	00001406 	br	3964 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
    3914:	e0bff917 	ldw	r2,-28(fp)
    3918:	10800017 	ldw	r2,0(r2)
    391c:	00800516 	blt	zero,r2,3934 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
    3920:	e0bff917 	ldw	r2,-28(fp)
    3924:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
    3928:	e0bff917 	ldw	r2,-28(fp)
    392c:	10000115 	stw	zero,4(r2)
          break;
    3930:	00000f06 	br	3970 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
    3934:	e0bff917 	ldw	r2,-28(fp)
    3938:	10800017 	ldw	r2,0(r2)
    393c:	10ffffc4 	addi	r3,r2,-1
    3940:	e0bff917 	ldw	r2,-28(fp)
    3944:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
    3948:	e0bff917 	ldw	r2,-28(fp)
    394c:	10c00117 	ldw	r3,4(r2)
    3950:	008003f4 	movhi	r2,15
    3954:	10909004 	addi	r2,r2,16960
    3958:	1887883a 	add	r3,r3,r2
    395c:	e0bff917 	ldw	r2,-28(fp)
    3960:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    3964:	e0bff917 	ldw	r2,-28(fp)
    3968:	10800117 	ldw	r2,4(r2)
    396c:	103fe916 	blt	r2,zero,3914 <__alt_mem_Onchip_SRAM+0xf8003914>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    3970:	00000c06 	br	39a4 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
    3974:	e0bff917 	ldw	r2,-28(fp)
    3978:	10800017 	ldw	r2,0(r2)
    397c:	10c00044 	addi	r3,r2,1
    3980:	e0bff917 	ldw	r2,-28(fp)
    3984:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
    3988:	e0bff917 	ldw	r2,-28(fp)
    398c:	10c00117 	ldw	r3,4(r2)
    3990:	00bffc74 	movhi	r2,65521
    3994:	10af7004 	addi	r2,r2,-16960
    3998:	1887883a 	add	r3,r3,r2
    399c:	e0bff917 	ldw	r2,-28(fp)
    39a0:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    39a4:	e0bff917 	ldw	r2,-28(fp)
    39a8:	10c00117 	ldw	r3,4(r2)
    39ac:	008003f4 	movhi	r2,15
    39b0:	10908fc4 	addi	r2,r2,16959
    39b4:	10ffef16 	blt	r2,r3,3974 <__alt_mem_Onchip_SRAM+0xf8003974>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
    39b8:	e0bff617 	ldw	r2,-40(fp)
    39bc:	10000626 	beq	r2,zero,39d8 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
    39c0:	d0e6c417 	ldw	r3,-25840(gp)
    39c4:	e0bff617 	ldw	r2,-40(fp)
    39c8:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    39cc:	d0e6c517 	ldw	r3,-25836(gp)
    39d0:	e0bff617 	ldw	r2,-40(fp)
    39d4:	10c00115 	stw	r3,4(r2)
    }

    return 0;
    39d8:	0005883a 	mov	r2,zero
    39dc:	00000106 	br	39e4 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
    39e0:	00bfde84 	movi	r2,-134
}
    39e4:	e6fffb04 	addi	sp,fp,-20
    39e8:	dfc00617 	ldw	ra,24(sp)
    39ec:	df000517 	ldw	fp,20(sp)
    39f0:	dd000417 	ldw	r20,16(sp)
    39f4:	dcc00317 	ldw	r19,12(sp)
    39f8:	dc800217 	ldw	r18,8(sp)
    39fc:	dc400117 	ldw	r17,4(sp)
    3a00:	dc000017 	ldw	r16,0(sp)
    3a04:	dec00704 	addi	sp,sp,28
    3a08:	f800283a 	ret

00003a0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3a0c:	defffe04 	addi	sp,sp,-8
    3a10:	dfc00115 	stw	ra,4(sp)
    3a14:	df000015 	stw	fp,0(sp)
    3a18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3a1c:	d0a00b17 	ldw	r2,-32724(gp)
    3a20:	10000326 	beq	r2,zero,3a30 <alt_get_errno+0x24>
    3a24:	d0a00b17 	ldw	r2,-32724(gp)
    3a28:	103ee83a 	callr	r2
    3a2c:	00000106 	br	3a34 <alt_get_errno+0x28>
    3a30:	d0a6c004 	addi	r2,gp,-25856
}
    3a34:	e037883a 	mov	sp,fp
    3a38:	dfc00117 	ldw	ra,4(sp)
    3a3c:	df000017 	ldw	fp,0(sp)
    3a40:	dec00204 	addi	sp,sp,8
    3a44:	f800283a 	ret

00003a48 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    3a48:	deffed04 	addi	sp,sp,-76
    3a4c:	dfc01215 	stw	ra,72(sp)
    3a50:	df001115 	stw	fp,68(sp)
    3a54:	df001104 	addi	fp,sp,68
    3a58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3a5c:	e0bfff17 	ldw	r2,-4(fp)
    3a60:	10000816 	blt	r2,zero,3a84 <isatty+0x3c>
    3a64:	01400304 	movi	r5,12
    3a68:	e13fff17 	ldw	r4,-4(fp)
    3a6c:	00007580 	call	758 <__mulsi3>
    3a70:	1007883a 	mov	r3,r2
    3a74:	00800034 	movhi	r2,0
    3a78:	109d2404 	addi	r2,r2,29840
    3a7c:	1885883a 	add	r2,r3,r2
    3a80:	00000106 	br	3a88 <isatty+0x40>
    3a84:	0005883a 	mov	r2,zero
    3a88:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    3a8c:	e0bfef17 	ldw	r2,-68(fp)
    3a90:	10000e26 	beq	r2,zero,3acc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    3a94:	e0bfef17 	ldw	r2,-68(fp)
    3a98:	10800017 	ldw	r2,0(r2)
    3a9c:	10800817 	ldw	r2,32(r2)
    3aa0:	1000021e 	bne	r2,zero,3aac <isatty+0x64>
    {
      return 1;
    3aa4:	00800044 	movi	r2,1
    3aa8:	00000d06 	br	3ae0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3aac:	e0bff004 	addi	r2,fp,-64
    3ab0:	100b883a 	mov	r5,r2
    3ab4:	e13fff17 	ldw	r4,-4(fp)
    3ab8:	00037600 	call	3760 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3abc:	e0bff117 	ldw	r2,-60(fp)
    3ac0:	10880020 	cmpeqi	r2,r2,8192
    3ac4:	10803fcc 	andi	r2,r2,255
    3ac8:	00000506 	br	3ae0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3acc:	0003a0c0 	call	3a0c <alt_get_errno>
    3ad0:	1007883a 	mov	r3,r2
    3ad4:	00801444 	movi	r2,81
    3ad8:	18800015 	stw	r2,0(r3)
    return 0;
    3adc:	0005883a 	mov	r2,zero
  }
}
    3ae0:	e037883a 	mov	sp,fp
    3ae4:	dfc00117 	ldw	ra,4(sp)
    3ae8:	df000017 	ldw	fp,0(sp)
    3aec:	dec00204 	addi	sp,sp,8
    3af0:	f800283a 	ret

00003af4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3af4:	defffc04 	addi	sp,sp,-16
    3af8:	df000315 	stw	fp,12(sp)
    3afc:	df000304 	addi	fp,sp,12
    3b00:	e13ffd15 	stw	r4,-12(fp)
    3b04:	e17ffe15 	stw	r5,-8(fp)
    3b08:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3b0c:	e0fffe17 	ldw	r3,-8(fp)
    3b10:	e0bffd17 	ldw	r2,-12(fp)
    3b14:	18800c26 	beq	r3,r2,3b48 <alt_load_section+0x54>
  {
    while( to != end )
    3b18:	00000806 	br	3b3c <alt_load_section+0x48>
    {
      *to++ = *from++;
    3b1c:	e0bffe17 	ldw	r2,-8(fp)
    3b20:	10c00104 	addi	r3,r2,4
    3b24:	e0fffe15 	stw	r3,-8(fp)
    3b28:	e0fffd17 	ldw	r3,-12(fp)
    3b2c:	19000104 	addi	r4,r3,4
    3b30:	e13ffd15 	stw	r4,-12(fp)
    3b34:	18c00017 	ldw	r3,0(r3)
    3b38:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3b3c:	e0fffe17 	ldw	r3,-8(fp)
    3b40:	e0bfff17 	ldw	r2,-4(fp)
    3b44:	18bff51e 	bne	r3,r2,3b1c <__alt_mem_Onchip_SRAM+0xf8003b1c>
    {
      *to++ = *from++;
    }
  }
}
    3b48:	0001883a 	nop
    3b4c:	e037883a 	mov	sp,fp
    3b50:	df000017 	ldw	fp,0(sp)
    3b54:	dec00104 	addi	sp,sp,4
    3b58:	f800283a 	ret

00003b5c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3b5c:	defffe04 	addi	sp,sp,-8
    3b60:	dfc00115 	stw	ra,4(sp)
    3b64:	df000015 	stw	fp,0(sp)
    3b68:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3b6c:	01800074 	movhi	r6,1
    3b70:	31a1bd04 	addi	r6,r6,-30988
    3b74:	01400034 	movhi	r5,0
    3b78:	295b0f04 	addi	r5,r5,27708
    3b7c:	01000074 	movhi	r4,1
    3b80:	2121bd04 	addi	r4,r4,-30988
    3b84:	0003af40 	call	3af4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    3b88:	01800034 	movhi	r6,0
    3b8c:	31808c04 	addi	r6,r6,560
    3b90:	01400034 	movhi	r5,0
    3b94:	29400804 	addi	r5,r5,32
    3b98:	01000034 	movhi	r4,0
    3b9c:	21000804 	addi	r4,r4,32
    3ba0:	0003af40 	call	3af4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3ba4:	01800034 	movhi	r6,0
    3ba8:	319b0f04 	addi	r6,r6,27708
    3bac:	01400034 	movhi	r5,0
    3bb0:	295ab004 	addi	r5,r5,27328
    3bb4:	01000034 	movhi	r4,0
    3bb8:	211ab004 	addi	r4,r4,27328
    3bbc:	0003af40 	call	3af4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3bc0:	00055e80 	call	55e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    3bc4:	00058380 	call	5838 <alt_icache_flush_all>
}
    3bc8:	0001883a 	nop
    3bcc:	e037883a 	mov	sp,fp
    3bd0:	dfc00117 	ldw	ra,4(sp)
    3bd4:	df000017 	ldw	fp,0(sp)
    3bd8:	dec00204 	addi	sp,sp,8
    3bdc:	f800283a 	ret

00003be0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3be0:	defffe04 	addi	sp,sp,-8
    3be4:	dfc00115 	stw	ra,4(sp)
    3be8:	df000015 	stw	fp,0(sp)
    3bec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3bf0:	d0a00b17 	ldw	r2,-32724(gp)
    3bf4:	10000326 	beq	r2,zero,3c04 <alt_get_errno+0x24>
    3bf8:	d0a00b17 	ldw	r2,-32724(gp)
    3bfc:	103ee83a 	callr	r2
    3c00:	00000106 	br	3c08 <alt_get_errno+0x28>
    3c04:	d0a6c004 	addi	r2,gp,-25856
}
    3c08:	e037883a 	mov	sp,fp
    3c0c:	dfc00117 	ldw	ra,4(sp)
    3c10:	df000017 	ldw	fp,0(sp)
    3c14:	dec00204 	addi	sp,sp,8
    3c18:	f800283a 	ret

00003c1c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3c1c:	defff904 	addi	sp,sp,-28
    3c20:	dfc00615 	stw	ra,24(sp)
    3c24:	df000515 	stw	fp,20(sp)
    3c28:	df000504 	addi	fp,sp,20
    3c2c:	e13ffd15 	stw	r4,-12(fp)
    3c30:	e17ffe15 	stw	r5,-8(fp)
    3c34:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    3c38:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3c3c:	e0bffd17 	ldw	r2,-12(fp)
    3c40:	10000816 	blt	r2,zero,3c64 <lseek+0x48>
    3c44:	01400304 	movi	r5,12
    3c48:	e13ffd17 	ldw	r4,-12(fp)
    3c4c:	00007580 	call	758 <__mulsi3>
    3c50:	1007883a 	mov	r3,r2
    3c54:	00800034 	movhi	r2,0
    3c58:	109d2404 	addi	r2,r2,29840
    3c5c:	1885883a 	add	r2,r3,r2
    3c60:	00000106 	br	3c68 <lseek+0x4c>
    3c64:	0005883a 	mov	r2,zero
    3c68:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    3c6c:	e0bffc17 	ldw	r2,-16(fp)
    3c70:	10001026 	beq	r2,zero,3cb4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3c74:	e0bffc17 	ldw	r2,-16(fp)
    3c78:	10800017 	ldw	r2,0(r2)
    3c7c:	10800717 	ldw	r2,28(r2)
    3c80:	10000926 	beq	r2,zero,3ca8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3c84:	e0bffc17 	ldw	r2,-16(fp)
    3c88:	10800017 	ldw	r2,0(r2)
    3c8c:	10800717 	ldw	r2,28(r2)
    3c90:	e1bfff17 	ldw	r6,-4(fp)
    3c94:	e17ffe17 	ldw	r5,-8(fp)
    3c98:	e13ffc17 	ldw	r4,-16(fp)
    3c9c:	103ee83a 	callr	r2
    3ca0:	e0bffb15 	stw	r2,-20(fp)
    3ca4:	00000506 	br	3cbc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3ca8:	00bfde84 	movi	r2,-134
    3cac:	e0bffb15 	stw	r2,-20(fp)
    3cb0:	00000206 	br	3cbc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    3cb4:	00bfebc4 	movi	r2,-81
    3cb8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    3cbc:	e0bffb17 	ldw	r2,-20(fp)
    3cc0:	1000070e 	bge	r2,zero,3ce0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    3cc4:	0003be00 	call	3be0 <alt_get_errno>
    3cc8:	1007883a 	mov	r3,r2
    3ccc:	e0bffb17 	ldw	r2,-20(fp)
    3cd0:	0085c83a 	sub	r2,zero,r2
    3cd4:	18800015 	stw	r2,0(r3)
    rc = -1;
    3cd8:	00bfffc4 	movi	r2,-1
    3cdc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    3ce0:	e0bffb17 	ldw	r2,-20(fp)
}
    3ce4:	e037883a 	mov	sp,fp
    3ce8:	dfc00117 	ldw	ra,4(sp)
    3cec:	df000017 	ldw	fp,0(sp)
    3cf0:	dec00204 	addi	sp,sp,8
    3cf4:	f800283a 	ret

00003cf8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3cf8:	defffd04 	addi	sp,sp,-12
    3cfc:	dfc00215 	stw	ra,8(sp)
    3d00:	df000115 	stw	fp,4(sp)
    3d04:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3d08:	0009883a 	mov	r4,zero
    3d0c:	00043440 	call	4344 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3d10:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3d14:	000437c0 	call	437c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3d18:	01800034 	movhi	r6,0
    3d1c:	319abf04 	addi	r6,r6,27388
    3d20:	01400034 	movhi	r5,0
    3d24:	295abf04 	addi	r5,r5,27388
    3d28:	01000034 	movhi	r4,0
    3d2c:	211abf04 	addi	r4,r4,27388
    3d30:	0005bdc0 	call	5bdc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3d34:	00056e80 	call	56e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3d38:	01000034 	movhi	r4,0
    3d3c:	2115d204 	addi	r4,r4,22344
    3d40:	00061680 	call	6168 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3d44:	d0a6c817 	ldw	r2,-25824(gp)
    3d48:	d0e6c917 	ldw	r3,-25820(gp)
    3d4c:	d126ca17 	ldw	r4,-25816(gp)
    3d50:	200d883a 	mov	r6,r4
    3d54:	180b883a 	mov	r5,r3
    3d58:	1009883a 	mov	r4,r2
    3d5c:	00005180 	call	518 <main>
    3d60:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3d64:	01000044 	movi	r4,1
    3d68:	00036200 	call	3620 <close>
  exit (result);
    3d6c:	e13fff17 	ldw	r4,-4(fp)
    3d70:	000617c0 	call	617c <exit>

00003d74 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3d74:	defffe04 	addi	sp,sp,-8
    3d78:	df000115 	stw	fp,4(sp)
    3d7c:	df000104 	addi	fp,sp,4
    3d80:	e13fff15 	stw	r4,-4(fp)
}
    3d84:	0001883a 	nop
    3d88:	e037883a 	mov	sp,fp
    3d8c:	df000017 	ldw	fp,0(sp)
    3d90:	dec00104 	addi	sp,sp,4
    3d94:	f800283a 	ret

00003d98 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3d98:	defffe04 	addi	sp,sp,-8
    3d9c:	df000115 	stw	fp,4(sp)
    3da0:	df000104 	addi	fp,sp,4
    3da4:	e13fff15 	stw	r4,-4(fp)
}
    3da8:	0001883a 	nop
    3dac:	e037883a 	mov	sp,fp
    3db0:	df000017 	ldw	fp,0(sp)
    3db4:	dec00104 	addi	sp,sp,4
    3db8:	f800283a 	ret

00003dbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3dbc:	defffe04 	addi	sp,sp,-8
    3dc0:	dfc00115 	stw	ra,4(sp)
    3dc4:	df000015 	stw	fp,0(sp)
    3dc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3dcc:	d0a00b17 	ldw	r2,-32724(gp)
    3dd0:	10000326 	beq	r2,zero,3de0 <alt_get_errno+0x24>
    3dd4:	d0a00b17 	ldw	r2,-32724(gp)
    3dd8:	103ee83a 	callr	r2
    3ddc:	00000106 	br	3de4 <alt_get_errno+0x28>
    3de0:	d0a6c004 	addi	r2,gp,-25856
}
    3de4:	e037883a 	mov	sp,fp
    3de8:	dfc00117 	ldw	ra,4(sp)
    3dec:	df000017 	ldw	fp,0(sp)
    3df0:	dec00204 	addi	sp,sp,8
    3df4:	f800283a 	ret

00003df8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3df8:	defff904 	addi	sp,sp,-28
    3dfc:	dfc00615 	stw	ra,24(sp)
    3e00:	df000515 	stw	fp,20(sp)
    3e04:	df000504 	addi	fp,sp,20
    3e08:	e13ffd15 	stw	r4,-12(fp)
    3e0c:	e17ffe15 	stw	r5,-8(fp)
    3e10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3e14:	e0bffd17 	ldw	r2,-12(fp)
    3e18:	10000816 	blt	r2,zero,3e3c <read+0x44>
    3e1c:	01400304 	movi	r5,12
    3e20:	e13ffd17 	ldw	r4,-12(fp)
    3e24:	00007580 	call	758 <__mulsi3>
    3e28:	1007883a 	mov	r3,r2
    3e2c:	00800034 	movhi	r2,0
    3e30:	109d2404 	addi	r2,r2,29840
    3e34:	1885883a 	add	r2,r3,r2
    3e38:	00000106 	br	3e40 <read+0x48>
    3e3c:	0005883a 	mov	r2,zero
    3e40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3e44:	e0bffb17 	ldw	r2,-20(fp)
    3e48:	10002226 	beq	r2,zero,3ed4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3e4c:	e0bffb17 	ldw	r2,-20(fp)
    3e50:	10800217 	ldw	r2,8(r2)
    3e54:	108000cc 	andi	r2,r2,3
    3e58:	10800060 	cmpeqi	r2,r2,1
    3e5c:	1000181e 	bne	r2,zero,3ec0 <read+0xc8>
        (fd->dev->read))
    3e60:	e0bffb17 	ldw	r2,-20(fp)
    3e64:	10800017 	ldw	r2,0(r2)
    3e68:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3e6c:	10001426 	beq	r2,zero,3ec0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3e70:	e0bffb17 	ldw	r2,-20(fp)
    3e74:	10800017 	ldw	r2,0(r2)
    3e78:	10800517 	ldw	r2,20(r2)
    3e7c:	e0ffff17 	ldw	r3,-4(fp)
    3e80:	180d883a 	mov	r6,r3
    3e84:	e17ffe17 	ldw	r5,-8(fp)
    3e88:	e13ffb17 	ldw	r4,-20(fp)
    3e8c:	103ee83a 	callr	r2
    3e90:	e0bffc15 	stw	r2,-16(fp)
    3e94:	e0bffc17 	ldw	r2,-16(fp)
    3e98:	1000070e 	bge	r2,zero,3eb8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    3e9c:	0003dbc0 	call	3dbc <alt_get_errno>
    3ea0:	1007883a 	mov	r3,r2
    3ea4:	e0bffc17 	ldw	r2,-16(fp)
    3ea8:	0085c83a 	sub	r2,zero,r2
    3eac:	18800015 	stw	r2,0(r3)
          return -1;
    3eb0:	00bfffc4 	movi	r2,-1
    3eb4:	00000c06 	br	3ee8 <read+0xf0>
        }
        return rval;
    3eb8:	e0bffc17 	ldw	r2,-16(fp)
    3ebc:	00000a06 	br	3ee8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3ec0:	0003dbc0 	call	3dbc <alt_get_errno>
    3ec4:	1007883a 	mov	r3,r2
    3ec8:	00800344 	movi	r2,13
    3ecc:	18800015 	stw	r2,0(r3)
    3ed0:	00000406 	br	3ee4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3ed4:	0003dbc0 	call	3dbc <alt_get_errno>
    3ed8:	1007883a 	mov	r3,r2
    3edc:	00801444 	movi	r2,81
    3ee0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3ee4:	00bfffc4 	movi	r2,-1
}
    3ee8:	e037883a 	mov	sp,fp
    3eec:	dfc00117 	ldw	ra,4(sp)
    3ef0:	df000017 	ldw	fp,0(sp)
    3ef4:	dec00204 	addi	sp,sp,8
    3ef8:	f800283a 	ret

00003efc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3efc:	defffc04 	addi	sp,sp,-16
    3f00:	dfc00315 	stw	ra,12(sp)
    3f04:	df000215 	stw	fp,8(sp)
    3f08:	dc000115 	stw	r16,4(sp)
    3f0c:	df000204 	addi	fp,sp,8
    3f10:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    3f14:	e0bffe17 	ldw	r2,-8(fp)
    3f18:	108000d0 	cmplti	r2,r2,3
    3f1c:	1000111e 	bne	r2,zero,3f64 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    3f20:	04000034 	movhi	r16,0
    3f24:	841d2404 	addi	r16,r16,29840
    3f28:	e0bffe17 	ldw	r2,-8(fp)
    3f2c:	01400304 	movi	r5,12
    3f30:	1009883a 	mov	r4,r2
    3f34:	00007580 	call	758 <__mulsi3>
    3f38:	8085883a 	add	r2,r16,r2
    3f3c:	10800204 	addi	r2,r2,8
    3f40:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3f44:	04000034 	movhi	r16,0
    3f48:	841d2404 	addi	r16,r16,29840
    3f4c:	e0bffe17 	ldw	r2,-8(fp)
    3f50:	01400304 	movi	r5,12
    3f54:	1009883a 	mov	r4,r2
    3f58:	00007580 	call	758 <__mulsi3>
    3f5c:	8085883a 	add	r2,r16,r2
    3f60:	10000015 	stw	zero,0(r2)
  }
}
    3f64:	0001883a 	nop
    3f68:	e6ffff04 	addi	sp,fp,-4
    3f6c:	dfc00217 	ldw	ra,8(sp)
    3f70:	df000117 	ldw	fp,4(sp)
    3f74:	dc000017 	ldw	r16,0(sp)
    3f78:	dec00304 	addi	sp,sp,12
    3f7c:	f800283a 	ret

00003f80 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3f80:	defff904 	addi	sp,sp,-28
    3f84:	df000615 	stw	fp,24(sp)
    3f88:	df000604 	addi	fp,sp,24
    3f8c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3f90:	0005303a 	rdctl	r2,status
    3f94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3f98:	e0fffe17 	ldw	r3,-8(fp)
    3f9c:	00bfff84 	movi	r2,-2
    3fa0:	1884703a 	and	r2,r3,r2
    3fa4:	1001703a 	wrctl	status,r2
  
  return context;
    3fa8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3fac:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3fb0:	d0a00c17 	ldw	r2,-32720(gp)
    3fb4:	10c000c4 	addi	r3,r2,3
    3fb8:	00bfff04 	movi	r2,-4
    3fbc:	1884703a 	and	r2,r3,r2
    3fc0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3fc4:	d0e00c17 	ldw	r3,-32720(gp)
    3fc8:	e0bfff17 	ldw	r2,-4(fp)
    3fcc:	1887883a 	add	r3,r3,r2
    3fd0:	00810034 	movhi	r2,1024
    3fd4:	10800004 	addi	r2,r2,0
    3fd8:	10c0062e 	bgeu	r2,r3,3ff4 <sbrk+0x74>
    3fdc:	e0bffb17 	ldw	r2,-20(fp)
    3fe0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3fe4:	e0bffa17 	ldw	r2,-24(fp)
    3fe8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3fec:	00bfffc4 	movi	r2,-1
    3ff0:	00000b06 	br	4020 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    3ff4:	d0a00c17 	ldw	r2,-32720(gp)
    3ff8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    3ffc:	d0e00c17 	ldw	r3,-32720(gp)
    4000:	e0bfff17 	ldw	r2,-4(fp)
    4004:	1885883a 	add	r2,r3,r2
    4008:	d0a00c15 	stw	r2,-32720(gp)
    400c:	e0bffb17 	ldw	r2,-20(fp)
    4010:	e0bffc15 	stw	r2,-16(fp)
    4014:	e0bffc17 	ldw	r2,-16(fp)
    4018:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    401c:	e0bffd17 	ldw	r2,-12(fp)
} 
    4020:	e037883a 	mov	sp,fp
    4024:	df000017 	ldw	fp,0(sp)
    4028:	dec00104 	addi	sp,sp,4
    402c:	f800283a 	ret

00004030 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    4030:	defffa04 	addi	sp,sp,-24
    4034:	df000515 	stw	fp,20(sp)
    4038:	df000504 	addi	fp,sp,20
    403c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4040:	0005303a 	rdctl	r2,status
    4044:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4048:	e0fffc17 	ldw	r3,-16(fp)
    404c:	00bfff84 	movi	r2,-2
    4050:	1884703a 	and	r2,r3,r2
    4054:	1001703a 	wrctl	status,r2
  
  return context;
    4058:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    405c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    4060:	e0bfff17 	ldw	r2,-4(fp)
    4064:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    4068:	e0bffd17 	ldw	r2,-12(fp)
    406c:	10800017 	ldw	r2,0(r2)
    4070:	e0fffd17 	ldw	r3,-12(fp)
    4074:	18c00117 	ldw	r3,4(r3)
    4078:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    407c:	e0bffd17 	ldw	r2,-12(fp)
    4080:	10800117 	ldw	r2,4(r2)
    4084:	e0fffd17 	ldw	r3,-12(fp)
    4088:	18c00017 	ldw	r3,0(r3)
    408c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    4090:	e0bffd17 	ldw	r2,-12(fp)
    4094:	e0fffd17 	ldw	r3,-12(fp)
    4098:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    409c:	e0bffd17 	ldw	r2,-12(fp)
    40a0:	e0fffd17 	ldw	r3,-12(fp)
    40a4:	10c00015 	stw	r3,0(r2)
    40a8:	e0bffb17 	ldw	r2,-20(fp)
    40ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    40b0:	e0bffe17 	ldw	r2,-8(fp)
    40b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    40b8:	0001883a 	nop
    40bc:	e037883a 	mov	sp,fp
    40c0:	df000017 	ldw	fp,0(sp)
    40c4:	dec00104 	addi	sp,sp,4
    40c8:	f800283a 	ret

000040cc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    40cc:	defffb04 	addi	sp,sp,-20
    40d0:	dfc00415 	stw	ra,16(sp)
    40d4:	df000315 	stw	fp,12(sp)
    40d8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    40dc:	d0a00d17 	ldw	r2,-32716(gp)
    40e0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    40e4:	d0a6cc17 	ldw	r2,-25808(gp)
    40e8:	10800044 	addi	r2,r2,1
    40ec:	d0a6cc15 	stw	r2,-25808(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    40f0:	00002e06 	br	41ac <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    40f4:	e0bffd17 	ldw	r2,-12(fp)
    40f8:	10800017 	ldw	r2,0(r2)
    40fc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    4100:	e0bffd17 	ldw	r2,-12(fp)
    4104:	10800403 	ldbu	r2,16(r2)
    4108:	10803fcc 	andi	r2,r2,255
    410c:	10000426 	beq	r2,zero,4120 <alt_tick+0x54>
    4110:	d0a6cc17 	ldw	r2,-25808(gp)
    4114:	1000021e 	bne	r2,zero,4120 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    4118:	e0bffd17 	ldw	r2,-12(fp)
    411c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    4120:	e0bffd17 	ldw	r2,-12(fp)
    4124:	10800217 	ldw	r2,8(r2)
    4128:	d0e6cc17 	ldw	r3,-25808(gp)
    412c:	18801d36 	bltu	r3,r2,41a4 <alt_tick+0xd8>
    4130:	e0bffd17 	ldw	r2,-12(fp)
    4134:	10800403 	ldbu	r2,16(r2)
    4138:	10803fcc 	andi	r2,r2,255
    413c:	1000191e 	bne	r2,zero,41a4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    4140:	e0bffd17 	ldw	r2,-12(fp)
    4144:	10800317 	ldw	r2,12(r2)
    4148:	e0fffd17 	ldw	r3,-12(fp)
    414c:	18c00517 	ldw	r3,20(r3)
    4150:	1809883a 	mov	r4,r3
    4154:	103ee83a 	callr	r2
    4158:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    415c:	e0bfff17 	ldw	r2,-4(fp)
    4160:	1000031e 	bne	r2,zero,4170 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    4164:	e13ffd17 	ldw	r4,-12(fp)
    4168:	00040300 	call	4030 <alt_alarm_stop>
    416c:	00000d06 	br	41a4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    4170:	e0bffd17 	ldw	r2,-12(fp)
    4174:	10c00217 	ldw	r3,8(r2)
    4178:	e0bfff17 	ldw	r2,-4(fp)
    417c:	1887883a 	add	r3,r3,r2
    4180:	e0bffd17 	ldw	r2,-12(fp)
    4184:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    4188:	e0bffd17 	ldw	r2,-12(fp)
    418c:	10c00217 	ldw	r3,8(r2)
    4190:	d0a6cc17 	ldw	r2,-25808(gp)
    4194:	1880032e 	bgeu	r3,r2,41a4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    4198:	e0bffd17 	ldw	r2,-12(fp)
    419c:	00c00044 	movi	r3,1
    41a0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    41a4:	e0bffe17 	ldw	r2,-8(fp)
    41a8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    41ac:	e0fffd17 	ldw	r3,-12(fp)
    41b0:	d0a00d04 	addi	r2,gp,-32716
    41b4:	18bfcf1e 	bne	r3,r2,40f4 <__alt_mem_Onchip_SRAM+0xf80040f4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    41b8:	0001883a 	nop
}
    41bc:	0001883a 	nop
    41c0:	e037883a 	mov	sp,fp
    41c4:	dfc00117 	ldw	ra,4(sp)
    41c8:	df000017 	ldw	fp,0(sp)
    41cc:	dec00204 	addi	sp,sp,8
    41d0:	f800283a 	ret

000041d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    41d4:	defffe04 	addi	sp,sp,-8
    41d8:	dfc00115 	stw	ra,4(sp)
    41dc:	df000015 	stw	fp,0(sp)
    41e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    41e4:	d0a00b17 	ldw	r2,-32724(gp)
    41e8:	10000326 	beq	r2,zero,41f8 <alt_get_errno+0x24>
    41ec:	d0a00b17 	ldw	r2,-32724(gp)
    41f0:	103ee83a 	callr	r2
    41f4:	00000106 	br	41fc <alt_get_errno+0x28>
    41f8:	d0a6c004 	addi	r2,gp,-25856
}
    41fc:	e037883a 	mov	sp,fp
    4200:	dfc00117 	ldw	ra,4(sp)
    4204:	df000017 	ldw	fp,0(sp)
    4208:	dec00204 	addi	sp,sp,8
    420c:	f800283a 	ret

00004210 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4210:	defff904 	addi	sp,sp,-28
    4214:	dfc00615 	stw	ra,24(sp)
    4218:	df000515 	stw	fp,20(sp)
    421c:	df000504 	addi	fp,sp,20
    4220:	e13ffd15 	stw	r4,-12(fp)
    4224:	e17ffe15 	stw	r5,-8(fp)
    4228:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    422c:	e0bffd17 	ldw	r2,-12(fp)
    4230:	10000816 	blt	r2,zero,4254 <write+0x44>
    4234:	01400304 	movi	r5,12
    4238:	e13ffd17 	ldw	r4,-12(fp)
    423c:	00007580 	call	758 <__mulsi3>
    4240:	1007883a 	mov	r3,r2
    4244:	00800034 	movhi	r2,0
    4248:	109d2404 	addi	r2,r2,29840
    424c:	1885883a 	add	r2,r3,r2
    4250:	00000106 	br	4258 <write+0x48>
    4254:	0005883a 	mov	r2,zero
    4258:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    425c:	e0bffb17 	ldw	r2,-20(fp)
    4260:	10002126 	beq	r2,zero,42e8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    4264:	e0bffb17 	ldw	r2,-20(fp)
    4268:	10800217 	ldw	r2,8(r2)
    426c:	108000cc 	andi	r2,r2,3
    4270:	10001826 	beq	r2,zero,42d4 <write+0xc4>
    4274:	e0bffb17 	ldw	r2,-20(fp)
    4278:	10800017 	ldw	r2,0(r2)
    427c:	10800617 	ldw	r2,24(r2)
    4280:	10001426 	beq	r2,zero,42d4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    4284:	e0bffb17 	ldw	r2,-20(fp)
    4288:	10800017 	ldw	r2,0(r2)
    428c:	10800617 	ldw	r2,24(r2)
    4290:	e0ffff17 	ldw	r3,-4(fp)
    4294:	180d883a 	mov	r6,r3
    4298:	e17ffe17 	ldw	r5,-8(fp)
    429c:	e13ffb17 	ldw	r4,-20(fp)
    42a0:	103ee83a 	callr	r2
    42a4:	e0bffc15 	stw	r2,-16(fp)
    42a8:	e0bffc17 	ldw	r2,-16(fp)
    42ac:	1000070e 	bge	r2,zero,42cc <write+0xbc>
      {
        ALT_ERRNO = -rval;
    42b0:	00041d40 	call	41d4 <alt_get_errno>
    42b4:	1007883a 	mov	r3,r2
    42b8:	e0bffc17 	ldw	r2,-16(fp)
    42bc:	0085c83a 	sub	r2,zero,r2
    42c0:	18800015 	stw	r2,0(r3)
        return -1;
    42c4:	00bfffc4 	movi	r2,-1
    42c8:	00000c06 	br	42fc <write+0xec>
      }
      return rval;
    42cc:	e0bffc17 	ldw	r2,-16(fp)
    42d0:	00000a06 	br	42fc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    42d4:	00041d40 	call	41d4 <alt_get_errno>
    42d8:	1007883a 	mov	r3,r2
    42dc:	00800344 	movi	r2,13
    42e0:	18800015 	stw	r2,0(r3)
    42e4:	00000406 	br	42f8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    42e8:	00041d40 	call	41d4 <alt_get_errno>
    42ec:	1007883a 	mov	r3,r2
    42f0:	00801444 	movi	r2,81
    42f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    42f8:	00bfffc4 	movi	r2,-1
}
    42fc:	e037883a 	mov	sp,fp
    4300:	dfc00117 	ldw	ra,4(sp)
    4304:	df000017 	ldw	fp,0(sp)
    4308:	dec00204 	addi	sp,sp,8
    430c:	f800283a 	ret

00004310 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    4310:	defffd04 	addi	sp,sp,-12
    4314:	dfc00215 	stw	ra,8(sp)
    4318:	df000115 	stw	fp,4(sp)
    431c:	df000104 	addi	fp,sp,4
    4320:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4324:	d1600804 	addi	r5,gp,-32736
    4328:	e13fff17 	ldw	r4,-4(fp)
    432c:	00056440 	call	5644 <alt_dev_llist_insert>
}
    4330:	e037883a 	mov	sp,fp
    4334:	dfc00117 	ldw	ra,4(sp)
    4338:	df000017 	ldw	fp,0(sp)
    433c:	dec00204 	addi	sp,sp,8
    4340:	f800283a 	ret

00004344 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4344:	defffd04 	addi	sp,sp,-12
    4348:	dfc00215 	stw	ra,8(sp)
    434c:	df000115 	stw	fp,4(sp)
    4350:	df000104 	addi	fp,sp,4
    4354:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    4358:	0005edc0 	call	5edc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    435c:	00800044 	movi	r2,1
    4360:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4364:	0001883a 	nop
    4368:	e037883a 	mov	sp,fp
    436c:	dfc00117 	ldw	ra,4(sp)
    4370:	df000017 	ldw	fp,0(sp)
    4374:	dec00204 	addi	sp,sp,8
    4378:	f800283a 	ret

0000437c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    437c:	defffe04 	addi	sp,sp,-8
    4380:	dfc00115 	stw	ra,4(sp)
    4384:	df000015 	stw	fp,0(sp)
    4388:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    438c:	01c00204 	movi	r7,8
    4390:	000d883a 	mov	r6,zero
    4394:	000b883a 	mov	r5,zero
    4398:	013fc834 	movhi	r4,65312
    439c:	21080004 	addi	r4,r4,8192
    43a0:	0004ed40 	call	4ed4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    43a4:	01800204 	movi	r6,8
    43a8:	000b883a 	mov	r5,zero
    43ac:	01000034 	movhi	r4,0
    43b0:	211d8e04 	addi	r4,r4,30264
    43b4:	00045580 	call	4558 <altera_avalon_jtag_uart_init>
    43b8:	01000034 	movhi	r4,0
    43bc:	211d8404 	addi	r4,r4,30224
    43c0:	00043100 	call	4310 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    43c4:	0001883a 	nop
    ALTERA_MODULAR_ADC_INIT ( JOYSTICK_ADC, JoyStick_ADC);
    43c8:	01bfffc4 	movi	r6,-1
    43cc:	017fffc4 	movi	r5,-1
    43d0:	01000074 	movhi	r4,1
    43d4:	21219c04 	addi	r4,r4,-31120
    43d8:	00050a40 	call	50a4 <altera_modular_adc_init>
}
    43dc:	0001883a 	nop
    43e0:	e037883a 	mov	sp,fp
    43e4:	dfc00117 	ldw	ra,4(sp)
    43e8:	df000017 	ldw	fp,0(sp)
    43ec:	dec00204 	addi	sp,sp,8
    43f0:	f800283a 	ret

000043f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    43f4:	defffa04 	addi	sp,sp,-24
    43f8:	dfc00515 	stw	ra,20(sp)
    43fc:	df000415 	stw	fp,16(sp)
    4400:	df000404 	addi	fp,sp,16
    4404:	e13ffd15 	stw	r4,-12(fp)
    4408:	e17ffe15 	stw	r5,-8(fp)
    440c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4410:	e0bffd17 	ldw	r2,-12(fp)
    4414:	10800017 	ldw	r2,0(r2)
    4418:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    441c:	e0bffc17 	ldw	r2,-16(fp)
    4420:	10c00a04 	addi	r3,r2,40
    4424:	e0bffd17 	ldw	r2,-12(fp)
    4428:	10800217 	ldw	r2,8(r2)
    442c:	100f883a 	mov	r7,r2
    4430:	e1bfff17 	ldw	r6,-4(fp)
    4434:	e17ffe17 	ldw	r5,-8(fp)
    4438:	1809883a 	mov	r4,r3
    443c:	0004a1c0 	call	4a1c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    4440:	e037883a 	mov	sp,fp
    4444:	dfc00117 	ldw	ra,4(sp)
    4448:	df000017 	ldw	fp,0(sp)
    444c:	dec00204 	addi	sp,sp,8
    4450:	f800283a 	ret

00004454 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4454:	defffa04 	addi	sp,sp,-24
    4458:	dfc00515 	stw	ra,20(sp)
    445c:	df000415 	stw	fp,16(sp)
    4460:	df000404 	addi	fp,sp,16
    4464:	e13ffd15 	stw	r4,-12(fp)
    4468:	e17ffe15 	stw	r5,-8(fp)
    446c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4470:	e0bffd17 	ldw	r2,-12(fp)
    4474:	10800017 	ldw	r2,0(r2)
    4478:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    447c:	e0bffc17 	ldw	r2,-16(fp)
    4480:	10c00a04 	addi	r3,r2,40
    4484:	e0bffd17 	ldw	r2,-12(fp)
    4488:	10800217 	ldw	r2,8(r2)
    448c:	100f883a 	mov	r7,r2
    4490:	e1bfff17 	ldw	r6,-4(fp)
    4494:	e17ffe17 	ldw	r5,-8(fp)
    4498:	1809883a 	mov	r4,r3
    449c:	0004c380 	call	4c38 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    44a0:	e037883a 	mov	sp,fp
    44a4:	dfc00117 	ldw	ra,4(sp)
    44a8:	df000017 	ldw	fp,0(sp)
    44ac:	dec00204 	addi	sp,sp,8
    44b0:	f800283a 	ret

000044b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    44b4:	defffc04 	addi	sp,sp,-16
    44b8:	dfc00315 	stw	ra,12(sp)
    44bc:	df000215 	stw	fp,8(sp)
    44c0:	df000204 	addi	fp,sp,8
    44c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    44c8:	e0bfff17 	ldw	r2,-4(fp)
    44cc:	10800017 	ldw	r2,0(r2)
    44d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    44d4:	e0bffe17 	ldw	r2,-8(fp)
    44d8:	10c00a04 	addi	r3,r2,40
    44dc:	e0bfff17 	ldw	r2,-4(fp)
    44e0:	10800217 	ldw	r2,8(r2)
    44e4:	100b883a 	mov	r5,r2
    44e8:	1809883a 	mov	r4,r3
    44ec:	00048c40 	call	48c4 <altera_avalon_jtag_uart_close>
}
    44f0:	e037883a 	mov	sp,fp
    44f4:	dfc00117 	ldw	ra,4(sp)
    44f8:	df000017 	ldw	fp,0(sp)
    44fc:	dec00204 	addi	sp,sp,8
    4500:	f800283a 	ret

00004504 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    4504:	defffa04 	addi	sp,sp,-24
    4508:	dfc00515 	stw	ra,20(sp)
    450c:	df000415 	stw	fp,16(sp)
    4510:	df000404 	addi	fp,sp,16
    4514:	e13ffd15 	stw	r4,-12(fp)
    4518:	e17ffe15 	stw	r5,-8(fp)
    451c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    4520:	e0bffd17 	ldw	r2,-12(fp)
    4524:	10800017 	ldw	r2,0(r2)
    4528:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    452c:	e0bffc17 	ldw	r2,-16(fp)
    4530:	10800a04 	addi	r2,r2,40
    4534:	e1bfff17 	ldw	r6,-4(fp)
    4538:	e17ffe17 	ldw	r5,-8(fp)
    453c:	1009883a 	mov	r4,r2
    4540:	000492c0 	call	492c <altera_avalon_jtag_uart_ioctl>
}
    4544:	e037883a 	mov	sp,fp
    4548:	dfc00117 	ldw	ra,4(sp)
    454c:	df000017 	ldw	fp,0(sp)
    4550:	dec00204 	addi	sp,sp,8
    4554:	f800283a 	ret

00004558 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    4558:	defffa04 	addi	sp,sp,-24
    455c:	dfc00515 	stw	ra,20(sp)
    4560:	df000415 	stw	fp,16(sp)
    4564:	df000404 	addi	fp,sp,16
    4568:	e13ffd15 	stw	r4,-12(fp)
    456c:	e17ffe15 	stw	r5,-8(fp)
    4570:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4574:	e0bffd17 	ldw	r2,-12(fp)
    4578:	00c00044 	movi	r3,1
    457c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    4580:	e0bffd17 	ldw	r2,-12(fp)
    4584:	10800017 	ldw	r2,0(r2)
    4588:	10800104 	addi	r2,r2,4
    458c:	1007883a 	mov	r3,r2
    4590:	e0bffd17 	ldw	r2,-12(fp)
    4594:	10800817 	ldw	r2,32(r2)
    4598:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    459c:	e0bffe17 	ldw	r2,-8(fp)
    45a0:	e0ffff17 	ldw	r3,-4(fp)
    45a4:	d8000015 	stw	zero,0(sp)
    45a8:	e1fffd17 	ldw	r7,-12(fp)
    45ac:	01800034 	movhi	r6,0
    45b0:	31918604 	addi	r6,r6,17944
    45b4:	180b883a 	mov	r5,r3
    45b8:	1009883a 	mov	r4,r2
    45bc:	00058580 	call	5858 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    45c0:	e0bffd17 	ldw	r2,-12(fp)
    45c4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    45c8:	e0bffd17 	ldw	r2,-12(fp)
    45cc:	10800204 	addi	r2,r2,8
    45d0:	d0e6cb17 	ldw	r3,-25812(gp)
    45d4:	e1fffd17 	ldw	r7,-12(fp)
    45d8:	01800034 	movhi	r6,0
    45dc:	31920904 	addi	r6,r6,18468
    45e0:	180b883a 	mov	r5,r3
    45e4:	1009883a 	mov	r4,r2
    45e8:	00054bc0 	call	54bc <alt_alarm_start>
    45ec:	1000040e 	bge	r2,zero,4600 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    45f0:	e0fffd17 	ldw	r3,-12(fp)
    45f4:	00a00034 	movhi	r2,32768
    45f8:	10bfffc4 	addi	r2,r2,-1
    45fc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    4600:	0001883a 	nop
    4604:	e037883a 	mov	sp,fp
    4608:	dfc00117 	ldw	ra,4(sp)
    460c:	df000017 	ldw	fp,0(sp)
    4610:	dec00204 	addi	sp,sp,8
    4614:	f800283a 	ret

00004618 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    4618:	defff804 	addi	sp,sp,-32
    461c:	df000715 	stw	fp,28(sp)
    4620:	df000704 	addi	fp,sp,28
    4624:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    4628:	e0bfff17 	ldw	r2,-4(fp)
    462c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    4630:	e0bffb17 	ldw	r2,-20(fp)
    4634:	10800017 	ldw	r2,0(r2)
    4638:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    463c:	e0bffc17 	ldw	r2,-16(fp)
    4640:	10800104 	addi	r2,r2,4
    4644:	10800037 	ldwio	r2,0(r2)
    4648:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    464c:	e0bffd17 	ldw	r2,-12(fp)
    4650:	1080c00c 	andi	r2,r2,768
    4654:	10006d26 	beq	r2,zero,480c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    4658:	e0bffd17 	ldw	r2,-12(fp)
    465c:	1080400c 	andi	r2,r2,256
    4660:	10003526 	beq	r2,zero,4738 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    4664:	00800074 	movhi	r2,1
    4668:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    466c:	e0bffb17 	ldw	r2,-20(fp)
    4670:	10800a17 	ldw	r2,40(r2)
    4674:	10800044 	addi	r2,r2,1
    4678:	1081ffcc 	andi	r2,r2,2047
    467c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    4680:	e0bffb17 	ldw	r2,-20(fp)
    4684:	10c00b17 	ldw	r3,44(r2)
    4688:	e0bffe17 	ldw	r2,-8(fp)
    468c:	18801526 	beq	r3,r2,46e4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    4690:	e0bffc17 	ldw	r2,-16(fp)
    4694:	10800037 	ldwio	r2,0(r2)
    4698:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    469c:	e0bff917 	ldw	r2,-28(fp)
    46a0:	10a0000c 	andi	r2,r2,32768
    46a4:	10001126 	beq	r2,zero,46ec <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    46a8:	e0bffb17 	ldw	r2,-20(fp)
    46ac:	10800a17 	ldw	r2,40(r2)
    46b0:	e0fff917 	ldw	r3,-28(fp)
    46b4:	1809883a 	mov	r4,r3
    46b8:	e0fffb17 	ldw	r3,-20(fp)
    46bc:	1885883a 	add	r2,r3,r2
    46c0:	10800e04 	addi	r2,r2,56
    46c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    46c8:	e0bffb17 	ldw	r2,-20(fp)
    46cc:	10800a17 	ldw	r2,40(r2)
    46d0:	10800044 	addi	r2,r2,1
    46d4:	10c1ffcc 	andi	r3,r2,2047
    46d8:	e0bffb17 	ldw	r2,-20(fp)
    46dc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    46e0:	003fe206 	br	466c <__alt_mem_Onchip_SRAM+0xf800466c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    46e4:	0001883a 	nop
    46e8:	00000106 	br	46f0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    46ec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    46f0:	e0bff917 	ldw	r2,-28(fp)
    46f4:	10bfffec 	andhi	r2,r2,65535
    46f8:	10000f26 	beq	r2,zero,4738 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    46fc:	e0bffb17 	ldw	r2,-20(fp)
    4700:	10c00817 	ldw	r3,32(r2)
    4704:	00bfff84 	movi	r2,-2
    4708:	1886703a 	and	r3,r3,r2
    470c:	e0bffb17 	ldw	r2,-20(fp)
    4710:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    4714:	e0bffc17 	ldw	r2,-16(fp)
    4718:	10800104 	addi	r2,r2,4
    471c:	1007883a 	mov	r3,r2
    4720:	e0bffb17 	ldw	r2,-20(fp)
    4724:	10800817 	ldw	r2,32(r2)
    4728:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    472c:	e0bffc17 	ldw	r2,-16(fp)
    4730:	10800104 	addi	r2,r2,4
    4734:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    4738:	e0bffd17 	ldw	r2,-12(fp)
    473c:	1080800c 	andi	r2,r2,512
    4740:	103fbe26 	beq	r2,zero,463c <__alt_mem_Onchip_SRAM+0xf800463c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    4744:	e0bffd17 	ldw	r2,-12(fp)
    4748:	1004d43a 	srli	r2,r2,16
    474c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    4750:	00001406 	br	47a4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    4754:	e0bffc17 	ldw	r2,-16(fp)
    4758:	e0fffb17 	ldw	r3,-20(fp)
    475c:	18c00d17 	ldw	r3,52(r3)
    4760:	e13ffb17 	ldw	r4,-20(fp)
    4764:	20c7883a 	add	r3,r4,r3
    4768:	18c20e04 	addi	r3,r3,2104
    476c:	18c00003 	ldbu	r3,0(r3)
    4770:	18c03fcc 	andi	r3,r3,255
    4774:	18c0201c 	xori	r3,r3,128
    4778:	18ffe004 	addi	r3,r3,-128
    477c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4780:	e0bffb17 	ldw	r2,-20(fp)
    4784:	10800d17 	ldw	r2,52(r2)
    4788:	10800044 	addi	r2,r2,1
    478c:	10c1ffcc 	andi	r3,r2,2047
    4790:	e0bffb17 	ldw	r2,-20(fp)
    4794:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    4798:	e0bffa17 	ldw	r2,-24(fp)
    479c:	10bfffc4 	addi	r2,r2,-1
    47a0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    47a4:	e0bffa17 	ldw	r2,-24(fp)
    47a8:	10000526 	beq	r2,zero,47c0 <altera_avalon_jtag_uart_irq+0x1a8>
    47ac:	e0bffb17 	ldw	r2,-20(fp)
    47b0:	10c00d17 	ldw	r3,52(r2)
    47b4:	e0bffb17 	ldw	r2,-20(fp)
    47b8:	10800c17 	ldw	r2,48(r2)
    47bc:	18bfe51e 	bne	r3,r2,4754 <__alt_mem_Onchip_SRAM+0xf8004754>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    47c0:	e0bffa17 	ldw	r2,-24(fp)
    47c4:	103f9d26 	beq	r2,zero,463c <__alt_mem_Onchip_SRAM+0xf800463c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    47c8:	e0bffb17 	ldw	r2,-20(fp)
    47cc:	10c00817 	ldw	r3,32(r2)
    47d0:	00bfff44 	movi	r2,-3
    47d4:	1886703a 	and	r3,r3,r2
    47d8:	e0bffb17 	ldw	r2,-20(fp)
    47dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    47e0:	e0bffb17 	ldw	r2,-20(fp)
    47e4:	10800017 	ldw	r2,0(r2)
    47e8:	10800104 	addi	r2,r2,4
    47ec:	1007883a 	mov	r3,r2
    47f0:	e0bffb17 	ldw	r2,-20(fp)
    47f4:	10800817 	ldw	r2,32(r2)
    47f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    47fc:	e0bffc17 	ldw	r2,-16(fp)
    4800:	10800104 	addi	r2,r2,4
    4804:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    4808:	003f8c06 	br	463c <__alt_mem_Onchip_SRAM+0xf800463c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    480c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    4810:	0001883a 	nop
    4814:	e037883a 	mov	sp,fp
    4818:	df000017 	ldw	fp,0(sp)
    481c:	dec00104 	addi	sp,sp,4
    4820:	f800283a 	ret

00004824 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    4824:	defff804 	addi	sp,sp,-32
    4828:	df000715 	stw	fp,28(sp)
    482c:	df000704 	addi	fp,sp,28
    4830:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    4834:	e0bffb17 	ldw	r2,-20(fp)
    4838:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    483c:	e0bff917 	ldw	r2,-28(fp)
    4840:	10800017 	ldw	r2,0(r2)
    4844:	10800104 	addi	r2,r2,4
    4848:	10800037 	ldwio	r2,0(r2)
    484c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    4850:	e0bffa17 	ldw	r2,-24(fp)
    4854:	1081000c 	andi	r2,r2,1024
    4858:	10000b26 	beq	r2,zero,4888 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    485c:	e0bff917 	ldw	r2,-28(fp)
    4860:	10800017 	ldw	r2,0(r2)
    4864:	10800104 	addi	r2,r2,4
    4868:	1007883a 	mov	r3,r2
    486c:	e0bff917 	ldw	r2,-28(fp)
    4870:	10800817 	ldw	r2,32(r2)
    4874:	10810014 	ori	r2,r2,1024
    4878:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    487c:	e0bff917 	ldw	r2,-28(fp)
    4880:	10000915 	stw	zero,36(r2)
    4884:	00000a06 	br	48b0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    4888:	e0bff917 	ldw	r2,-28(fp)
    488c:	10c00917 	ldw	r3,36(r2)
    4890:	00a00034 	movhi	r2,32768
    4894:	10bfff04 	addi	r2,r2,-4
    4898:	10c00536 	bltu	r2,r3,48b0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    489c:	e0bff917 	ldw	r2,-28(fp)
    48a0:	10800917 	ldw	r2,36(r2)
    48a4:	10c00044 	addi	r3,r2,1
    48a8:	e0bff917 	ldw	r2,-28(fp)
    48ac:	10c00915 	stw	r3,36(r2)
    48b0:	d0a6cb17 	ldw	r2,-25812(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    48b4:	e037883a 	mov	sp,fp
    48b8:	df000017 	ldw	fp,0(sp)
    48bc:	dec00104 	addi	sp,sp,4
    48c0:	f800283a 	ret

000048c4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    48c4:	defffd04 	addi	sp,sp,-12
    48c8:	df000215 	stw	fp,8(sp)
    48cc:	df000204 	addi	fp,sp,8
    48d0:	e13ffe15 	stw	r4,-8(fp)
    48d4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    48d8:	00000506 	br	48f0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    48dc:	e0bfff17 	ldw	r2,-4(fp)
    48e0:	1090000c 	andi	r2,r2,16384
    48e4:	10000226 	beq	r2,zero,48f0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    48e8:	00bffd44 	movi	r2,-11
    48ec:	00000b06 	br	491c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    48f0:	e0bffe17 	ldw	r2,-8(fp)
    48f4:	10c00d17 	ldw	r3,52(r2)
    48f8:	e0bffe17 	ldw	r2,-8(fp)
    48fc:	10800c17 	ldw	r2,48(r2)
    4900:	18800526 	beq	r3,r2,4918 <altera_avalon_jtag_uart_close+0x54>
    4904:	e0bffe17 	ldw	r2,-8(fp)
    4908:	10c00917 	ldw	r3,36(r2)
    490c:	e0bffe17 	ldw	r2,-8(fp)
    4910:	10800117 	ldw	r2,4(r2)
    4914:	18bff136 	bltu	r3,r2,48dc <__alt_mem_Onchip_SRAM+0xf80048dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    4918:	0005883a 	mov	r2,zero
}
    491c:	e037883a 	mov	sp,fp
    4920:	df000017 	ldw	fp,0(sp)
    4924:	dec00104 	addi	sp,sp,4
    4928:	f800283a 	ret

0000492c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    492c:	defffa04 	addi	sp,sp,-24
    4930:	df000515 	stw	fp,20(sp)
    4934:	df000504 	addi	fp,sp,20
    4938:	e13ffd15 	stw	r4,-12(fp)
    493c:	e17ffe15 	stw	r5,-8(fp)
    4940:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    4944:	00bff9c4 	movi	r2,-25
    4948:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    494c:	e0bffe17 	ldw	r2,-8(fp)
    4950:	10da8060 	cmpeqi	r3,r2,27137
    4954:	1800031e 	bne	r3,zero,4964 <altera_avalon_jtag_uart_ioctl+0x38>
    4958:	109a80a0 	cmpeqi	r2,r2,27138
    495c:	1000181e 	bne	r2,zero,49c0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    4960:	00002906 	br	4a08 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    4964:	e0bffd17 	ldw	r2,-12(fp)
    4968:	10c00117 	ldw	r3,4(r2)
    496c:	00a00034 	movhi	r2,32768
    4970:	10bfffc4 	addi	r2,r2,-1
    4974:	18802126 	beq	r3,r2,49fc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    4978:	e0bfff17 	ldw	r2,-4(fp)
    497c:	10800017 	ldw	r2,0(r2)
    4980:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    4984:	e0bffc17 	ldw	r2,-16(fp)
    4988:	10800090 	cmplti	r2,r2,2
    498c:	1000061e 	bne	r2,zero,49a8 <altera_avalon_jtag_uart_ioctl+0x7c>
    4990:	e0fffc17 	ldw	r3,-16(fp)
    4994:	00a00034 	movhi	r2,32768
    4998:	10bfffc4 	addi	r2,r2,-1
    499c:	18800226 	beq	r3,r2,49a8 <altera_avalon_jtag_uart_ioctl+0x7c>
    49a0:	e0bffc17 	ldw	r2,-16(fp)
    49a4:	00000206 	br	49b0 <altera_avalon_jtag_uart_ioctl+0x84>
    49a8:	00a00034 	movhi	r2,32768
    49ac:	10bfff84 	addi	r2,r2,-2
    49b0:	e0fffd17 	ldw	r3,-12(fp)
    49b4:	18800115 	stw	r2,4(r3)
      rc = 0;
    49b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    49bc:	00000f06 	br	49fc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    49c0:	e0bffd17 	ldw	r2,-12(fp)
    49c4:	10c00117 	ldw	r3,4(r2)
    49c8:	00a00034 	movhi	r2,32768
    49cc:	10bfffc4 	addi	r2,r2,-1
    49d0:	18800c26 	beq	r3,r2,4a04 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    49d4:	e0bffd17 	ldw	r2,-12(fp)
    49d8:	10c00917 	ldw	r3,36(r2)
    49dc:	e0bffd17 	ldw	r2,-12(fp)
    49e0:	10800117 	ldw	r2,4(r2)
    49e4:	1885803a 	cmpltu	r2,r3,r2
    49e8:	10c03fcc 	andi	r3,r2,255
    49ec:	e0bfff17 	ldw	r2,-4(fp)
    49f0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    49f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    49f8:	00000206 	br	4a04 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    49fc:	0001883a 	nop
    4a00:	00000106 	br	4a08 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    4a04:	0001883a 	nop

  default:
    break;
  }

  return rc;
    4a08:	e0bffb17 	ldw	r2,-20(fp)
}
    4a0c:	e037883a 	mov	sp,fp
    4a10:	df000017 	ldw	fp,0(sp)
    4a14:	dec00104 	addi	sp,sp,4
    4a18:	f800283a 	ret

00004a1c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    4a1c:	defff304 	addi	sp,sp,-52
    4a20:	dfc00c15 	stw	ra,48(sp)
    4a24:	df000b15 	stw	fp,44(sp)
    4a28:	df000b04 	addi	fp,sp,44
    4a2c:	e13ffc15 	stw	r4,-16(fp)
    4a30:	e17ffd15 	stw	r5,-12(fp)
    4a34:	e1bffe15 	stw	r6,-8(fp)
    4a38:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    4a3c:	e0bffd17 	ldw	r2,-12(fp)
    4a40:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4a44:	00004706 	br	4b64 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    4a48:	e0bffc17 	ldw	r2,-16(fp)
    4a4c:	10800a17 	ldw	r2,40(r2)
    4a50:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    4a54:	e0bffc17 	ldw	r2,-16(fp)
    4a58:	10800b17 	ldw	r2,44(r2)
    4a5c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    4a60:	e0fff717 	ldw	r3,-36(fp)
    4a64:	e0bff817 	ldw	r2,-32(fp)
    4a68:	18800536 	bltu	r3,r2,4a80 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    4a6c:	e0fff717 	ldw	r3,-36(fp)
    4a70:	e0bff817 	ldw	r2,-32(fp)
    4a74:	1885c83a 	sub	r2,r3,r2
    4a78:	e0bff615 	stw	r2,-40(fp)
    4a7c:	00000406 	br	4a90 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    4a80:	00c20004 	movi	r3,2048
    4a84:	e0bff817 	ldw	r2,-32(fp)
    4a88:	1885c83a 	sub	r2,r3,r2
    4a8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4a90:	e0bff617 	ldw	r2,-40(fp)
    4a94:	10001e26 	beq	r2,zero,4b10 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    4a98:	e0fffe17 	ldw	r3,-8(fp)
    4a9c:	e0bff617 	ldw	r2,-40(fp)
    4aa0:	1880022e 	bgeu	r3,r2,4aac <altera_avalon_jtag_uart_read+0x90>
        n = space;
    4aa4:	e0bffe17 	ldw	r2,-8(fp)
    4aa8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    4aac:	e0bffc17 	ldw	r2,-16(fp)
    4ab0:	10c00e04 	addi	r3,r2,56
    4ab4:	e0bff817 	ldw	r2,-32(fp)
    4ab8:	1885883a 	add	r2,r3,r2
    4abc:	e1bff617 	ldw	r6,-40(fp)
    4ac0:	100b883a 	mov	r5,r2
    4ac4:	e13ff517 	ldw	r4,-44(fp)
    4ac8:	0001d040 	call	1d04 <memcpy>
      ptr   += n;
    4acc:	e0fff517 	ldw	r3,-44(fp)
    4ad0:	e0bff617 	ldw	r2,-40(fp)
    4ad4:	1885883a 	add	r2,r3,r2
    4ad8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    4adc:	e0fffe17 	ldw	r3,-8(fp)
    4ae0:	e0bff617 	ldw	r2,-40(fp)
    4ae4:	1885c83a 	sub	r2,r3,r2
    4ae8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4aec:	e0fff817 	ldw	r3,-32(fp)
    4af0:	e0bff617 	ldw	r2,-40(fp)
    4af4:	1885883a 	add	r2,r3,r2
    4af8:	10c1ffcc 	andi	r3,r2,2047
    4afc:	e0bffc17 	ldw	r2,-16(fp)
    4b00:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4b04:	e0bffe17 	ldw	r2,-8(fp)
    4b08:	00bfcf16 	blt	zero,r2,4a48 <__alt_mem_Onchip_SRAM+0xf8004a48>
    4b0c:	00000106 	br	4b14 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    4b10:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    4b14:	e0fff517 	ldw	r3,-44(fp)
    4b18:	e0bffd17 	ldw	r2,-12(fp)
    4b1c:	1880141e 	bne	r3,r2,4b70 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    4b20:	e0bfff17 	ldw	r2,-4(fp)
    4b24:	1090000c 	andi	r2,r2,16384
    4b28:	1000131e 	bne	r2,zero,4b78 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    4b2c:	0001883a 	nop
    4b30:	e0bffc17 	ldw	r2,-16(fp)
    4b34:	10c00a17 	ldw	r3,40(r2)
    4b38:	e0bff717 	ldw	r2,-36(fp)
    4b3c:	1880051e 	bne	r3,r2,4b54 <altera_avalon_jtag_uart_read+0x138>
    4b40:	e0bffc17 	ldw	r2,-16(fp)
    4b44:	10c00917 	ldw	r3,36(r2)
    4b48:	e0bffc17 	ldw	r2,-16(fp)
    4b4c:	10800117 	ldw	r2,4(r2)
    4b50:	18bff736 	bltu	r3,r2,4b30 <__alt_mem_Onchip_SRAM+0xf8004b30>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    4b54:	e0bffc17 	ldw	r2,-16(fp)
    4b58:	10c00a17 	ldw	r3,40(r2)
    4b5c:	e0bff717 	ldw	r2,-36(fp)
    4b60:	18800726 	beq	r3,r2,4b80 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4b64:	e0bffe17 	ldw	r2,-8(fp)
    4b68:	00bfb716 	blt	zero,r2,4a48 <__alt_mem_Onchip_SRAM+0xf8004a48>
    4b6c:	00000506 	br	4b84 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    4b70:	0001883a 	nop
    4b74:	00000306 	br	4b84 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    4b78:	0001883a 	nop
    4b7c:	00000106 	br	4b84 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    4b80:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    4b84:	e0fff517 	ldw	r3,-44(fp)
    4b88:	e0bffd17 	ldw	r2,-12(fp)
    4b8c:	18801826 	beq	r3,r2,4bf0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4b90:	0005303a 	rdctl	r2,status
    4b94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b98:	e0fffb17 	ldw	r3,-20(fp)
    4b9c:	00bfff84 	movi	r2,-2
    4ba0:	1884703a 	and	r2,r3,r2
    4ba4:	1001703a 	wrctl	status,r2
  
  return context;
    4ba8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    4bac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4bb0:	e0bffc17 	ldw	r2,-16(fp)
    4bb4:	10800817 	ldw	r2,32(r2)
    4bb8:	10c00054 	ori	r3,r2,1
    4bbc:	e0bffc17 	ldw	r2,-16(fp)
    4bc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4bc4:	e0bffc17 	ldw	r2,-16(fp)
    4bc8:	10800017 	ldw	r2,0(r2)
    4bcc:	10800104 	addi	r2,r2,4
    4bd0:	1007883a 	mov	r3,r2
    4bd4:	e0bffc17 	ldw	r2,-16(fp)
    4bd8:	10800817 	ldw	r2,32(r2)
    4bdc:	18800035 	stwio	r2,0(r3)
    4be0:	e0bffa17 	ldw	r2,-24(fp)
    4be4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4be8:	e0bff917 	ldw	r2,-28(fp)
    4bec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    4bf0:	e0fff517 	ldw	r3,-44(fp)
    4bf4:	e0bffd17 	ldw	r2,-12(fp)
    4bf8:	18800426 	beq	r3,r2,4c0c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    4bfc:	e0fff517 	ldw	r3,-44(fp)
    4c00:	e0bffd17 	ldw	r2,-12(fp)
    4c04:	1885c83a 	sub	r2,r3,r2
    4c08:	00000606 	br	4c24 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    4c0c:	e0bfff17 	ldw	r2,-4(fp)
    4c10:	1090000c 	andi	r2,r2,16384
    4c14:	10000226 	beq	r2,zero,4c20 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    4c18:	00bffd44 	movi	r2,-11
    4c1c:	00000106 	br	4c24 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    4c20:	00bffec4 	movi	r2,-5
}
    4c24:	e037883a 	mov	sp,fp
    4c28:	dfc00117 	ldw	ra,4(sp)
    4c2c:	df000017 	ldw	fp,0(sp)
    4c30:	dec00204 	addi	sp,sp,8
    4c34:	f800283a 	ret

00004c38 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4c38:	defff304 	addi	sp,sp,-52
    4c3c:	dfc00c15 	stw	ra,48(sp)
    4c40:	df000b15 	stw	fp,44(sp)
    4c44:	df000b04 	addi	fp,sp,44
    4c48:	e13ffc15 	stw	r4,-16(fp)
    4c4c:	e17ffd15 	stw	r5,-12(fp)
    4c50:	e1bffe15 	stw	r6,-8(fp)
    4c54:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    4c58:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4c5c:	e0bffd17 	ldw	r2,-12(fp)
    4c60:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4c64:	00003706 	br	4d44 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    4c68:	e0bffc17 	ldw	r2,-16(fp)
    4c6c:	10800c17 	ldw	r2,48(r2)
    4c70:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    4c74:	e0bffc17 	ldw	r2,-16(fp)
    4c78:	10800d17 	ldw	r2,52(r2)
    4c7c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    4c80:	e0fff917 	ldw	r3,-28(fp)
    4c84:	e0bff517 	ldw	r2,-44(fp)
    4c88:	1880062e 	bgeu	r3,r2,4ca4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    4c8c:	e0fff517 	ldw	r3,-44(fp)
    4c90:	e0bff917 	ldw	r2,-28(fp)
    4c94:	1885c83a 	sub	r2,r3,r2
    4c98:	10bfffc4 	addi	r2,r2,-1
    4c9c:	e0bff615 	stw	r2,-40(fp)
    4ca0:	00000b06 	br	4cd0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    4ca4:	e0bff517 	ldw	r2,-44(fp)
    4ca8:	10000526 	beq	r2,zero,4cc0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    4cac:	00c20004 	movi	r3,2048
    4cb0:	e0bff917 	ldw	r2,-28(fp)
    4cb4:	1885c83a 	sub	r2,r3,r2
    4cb8:	e0bff615 	stw	r2,-40(fp)
    4cbc:	00000406 	br	4cd0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4cc0:	00c1ffc4 	movi	r3,2047
    4cc4:	e0bff917 	ldw	r2,-28(fp)
    4cc8:	1885c83a 	sub	r2,r3,r2
    4ccc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4cd0:	e0bff617 	ldw	r2,-40(fp)
    4cd4:	10001e26 	beq	r2,zero,4d50 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    4cd8:	e0fffe17 	ldw	r3,-8(fp)
    4cdc:	e0bff617 	ldw	r2,-40(fp)
    4ce0:	1880022e 	bgeu	r3,r2,4cec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    4ce4:	e0bffe17 	ldw	r2,-8(fp)
    4ce8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4cec:	e0bffc17 	ldw	r2,-16(fp)
    4cf0:	10c20e04 	addi	r3,r2,2104
    4cf4:	e0bff917 	ldw	r2,-28(fp)
    4cf8:	1885883a 	add	r2,r3,r2
    4cfc:	e1bff617 	ldw	r6,-40(fp)
    4d00:	e17ffd17 	ldw	r5,-12(fp)
    4d04:	1009883a 	mov	r4,r2
    4d08:	0001d040 	call	1d04 <memcpy>
      ptr   += n;
    4d0c:	e0fffd17 	ldw	r3,-12(fp)
    4d10:	e0bff617 	ldw	r2,-40(fp)
    4d14:	1885883a 	add	r2,r3,r2
    4d18:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    4d1c:	e0fffe17 	ldw	r3,-8(fp)
    4d20:	e0bff617 	ldw	r2,-40(fp)
    4d24:	1885c83a 	sub	r2,r3,r2
    4d28:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4d2c:	e0fff917 	ldw	r3,-28(fp)
    4d30:	e0bff617 	ldw	r2,-40(fp)
    4d34:	1885883a 	add	r2,r3,r2
    4d38:	10c1ffcc 	andi	r3,r2,2047
    4d3c:	e0bffc17 	ldw	r2,-16(fp)
    4d40:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4d44:	e0bffe17 	ldw	r2,-8(fp)
    4d48:	00bfc716 	blt	zero,r2,4c68 <__alt_mem_Onchip_SRAM+0xf8004c68>
    4d4c:	00000106 	br	4d54 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    4d50:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4d54:	0005303a 	rdctl	r2,status
    4d58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4d5c:	e0fffb17 	ldw	r3,-20(fp)
    4d60:	00bfff84 	movi	r2,-2
    4d64:	1884703a 	and	r2,r3,r2
    4d68:	1001703a 	wrctl	status,r2
  
  return context;
    4d6c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4d70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4d74:	e0bffc17 	ldw	r2,-16(fp)
    4d78:	10800817 	ldw	r2,32(r2)
    4d7c:	10c00094 	ori	r3,r2,2
    4d80:	e0bffc17 	ldw	r2,-16(fp)
    4d84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4d88:	e0bffc17 	ldw	r2,-16(fp)
    4d8c:	10800017 	ldw	r2,0(r2)
    4d90:	10800104 	addi	r2,r2,4
    4d94:	1007883a 	mov	r3,r2
    4d98:	e0bffc17 	ldw	r2,-16(fp)
    4d9c:	10800817 	ldw	r2,32(r2)
    4da0:	18800035 	stwio	r2,0(r3)
    4da4:	e0bffa17 	ldw	r2,-24(fp)
    4da8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4dac:	e0bff817 	ldw	r2,-32(fp)
    4db0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    4db4:	e0bffe17 	ldw	r2,-8(fp)
    4db8:	0080100e 	bge	zero,r2,4dfc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    4dbc:	e0bfff17 	ldw	r2,-4(fp)
    4dc0:	1090000c 	andi	r2,r2,16384
    4dc4:	1000101e 	bne	r2,zero,4e08 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4dc8:	0001883a 	nop
    4dcc:	e0bffc17 	ldw	r2,-16(fp)
    4dd0:	10c00d17 	ldw	r3,52(r2)
    4dd4:	e0bff517 	ldw	r2,-44(fp)
    4dd8:	1880051e 	bne	r3,r2,4df0 <altera_avalon_jtag_uart_write+0x1b8>
    4ddc:	e0bffc17 	ldw	r2,-16(fp)
    4de0:	10c00917 	ldw	r3,36(r2)
    4de4:	e0bffc17 	ldw	r2,-16(fp)
    4de8:	10800117 	ldw	r2,4(r2)
    4dec:	18bff736 	bltu	r3,r2,4dcc <__alt_mem_Onchip_SRAM+0xf8004dcc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    4df0:	e0bffc17 	ldw	r2,-16(fp)
    4df4:	10800917 	ldw	r2,36(r2)
    4df8:	1000051e 	bne	r2,zero,4e10 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    4dfc:	e0bffe17 	ldw	r2,-8(fp)
    4e00:	00bfd016 	blt	zero,r2,4d44 <__alt_mem_Onchip_SRAM+0xf8004d44>
    4e04:	00000306 	br	4e14 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    4e08:	0001883a 	nop
    4e0c:	00000106 	br	4e14 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    4e10:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    4e14:	e0fffd17 	ldw	r3,-12(fp)
    4e18:	e0bff717 	ldw	r2,-36(fp)
    4e1c:	18800426 	beq	r3,r2,4e30 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    4e20:	e0fffd17 	ldw	r3,-12(fp)
    4e24:	e0bff717 	ldw	r2,-36(fp)
    4e28:	1885c83a 	sub	r2,r3,r2
    4e2c:	00000606 	br	4e48 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    4e30:	e0bfff17 	ldw	r2,-4(fp)
    4e34:	1090000c 	andi	r2,r2,16384
    4e38:	10000226 	beq	r2,zero,4e44 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    4e3c:	00bffd44 	movi	r2,-11
    4e40:	00000106 	br	4e48 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    4e44:	00bffec4 	movi	r2,-5
}
    4e48:	e037883a 	mov	sp,fp
    4e4c:	dfc00117 	ldw	ra,4(sp)
    4e50:	df000017 	ldw	fp,0(sp)
    4e54:	dec00204 	addi	sp,sp,8
    4e58:	f800283a 	ret

00004e5c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4e5c:	defffa04 	addi	sp,sp,-24
    4e60:	dfc00515 	stw	ra,20(sp)
    4e64:	df000415 	stw	fp,16(sp)
    4e68:	df000404 	addi	fp,sp,16
    4e6c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    4e70:	0007883a 	mov	r3,zero
    4e74:	e0bfff17 	ldw	r2,-4(fp)
    4e78:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    4e7c:	e0bfff17 	ldw	r2,-4(fp)
    4e80:	10800104 	addi	r2,r2,4
    4e84:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4e88:	0005303a 	rdctl	r2,status
    4e8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4e90:	e0fffd17 	ldw	r3,-12(fp)
    4e94:	00bfff84 	movi	r2,-2
    4e98:	1884703a 	and	r2,r3,r2
    4e9c:	1001703a 	wrctl	status,r2
  
  return context;
    4ea0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    4ea4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    4ea8:	00040cc0 	call	40cc <alt_tick>
    4eac:	e0bffc17 	ldw	r2,-16(fp)
    4eb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4eb4:	e0bffe17 	ldw	r2,-8(fp)
    4eb8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    4ebc:	0001883a 	nop
    4ec0:	e037883a 	mov	sp,fp
    4ec4:	dfc00117 	ldw	ra,4(sp)
    4ec8:	df000017 	ldw	fp,0(sp)
    4ecc:	dec00204 	addi	sp,sp,8
    4ed0:	f800283a 	ret

00004ed4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    4ed4:	defff804 	addi	sp,sp,-32
    4ed8:	dfc00715 	stw	ra,28(sp)
    4edc:	df000615 	stw	fp,24(sp)
    4ee0:	df000604 	addi	fp,sp,24
    4ee4:	e13ffc15 	stw	r4,-16(fp)
    4ee8:	e17ffd15 	stw	r5,-12(fp)
    4eec:	e1bffe15 	stw	r6,-8(fp)
    4ef0:	e1ffff15 	stw	r7,-4(fp)
    4ef4:	e0bfff17 	ldw	r2,-4(fp)
    4ef8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4efc:	d0a6cb17 	ldw	r2,-25812(gp)
    4f00:	1000021e 	bne	r2,zero,4f0c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    4f04:	e0bffb17 	ldw	r2,-20(fp)
    4f08:	d0a6cb15 	stw	r2,-25812(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4f0c:	e0bffc17 	ldw	r2,-16(fp)
    4f10:	10800104 	addi	r2,r2,4
    4f14:	00c001c4 	movi	r3,7
    4f18:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    4f1c:	d8000015 	stw	zero,0(sp)
    4f20:	e1fffc17 	ldw	r7,-16(fp)
    4f24:	01800034 	movhi	r6,0
    4f28:	31939704 	addi	r6,r6,20060
    4f2c:	e17ffe17 	ldw	r5,-8(fp)
    4f30:	e13ffd17 	ldw	r4,-12(fp)
    4f34:	00058580 	call	5858 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    4f38:	0001883a 	nop
    4f3c:	e037883a 	mov	sp,fp
    4f40:	dfc00117 	ldw	ra,4(sp)
    4f44:	df000017 	ldw	fp,0(sp)
    4f48:	dec00204 	addi	sp,sp,8
    4f4c:	f800283a 	ret

00004f50 <alt_adc_irq>:
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
    4f50:	defff904 	addi	sp,sp,-28
    4f54:	dfc00615 	stw	ra,24(sp)
    4f58:	df000515 	stw	fp,20(sp)
    4f5c:	df000504 	addi	fp,sp,20
    4f60:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
    4f64:	e0bfff17 	ldw	r2,-4(fp)
    4f68:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr = 0;
    4f6c:	e03ffc15 	stw	zero,-16(fp)

	if(NULL != dev)
    4f70:	e0bffb17 	ldw	r2,-20(fp)
    4f74:	10001a26 	beq	r2,zero,4fe0 <alt_adc_irq+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4f78:	0005303a 	rdctl	r2,status
    4f7c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4f80:	e0fffe17 	ldw	r3,-8(fp)
    4f84:	00bfff84 	movi	r2,-2
    4f88:	1884703a 	and	r2,r3,r2
    4f8c:	1001703a 	wrctl	status,r2
  
  return context;
    4f90:	e0bffe17 	ldw	r2,-8(fp)
	{
	    cpu_sr = alt_irq_disable_all();
    4f94:	e0bffc15 	stw	r2,-16(fp)
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
    4f98:	e0bffb17 	ldw	r2,-20(fp)
    4f9c:	10800a17 	ldw	r2,40(r2)
    4fa0:	10000626 	beq	r2,zero,4fbc <alt_adc_irq+0x6c>
		{
			dev->callback (dev->callback_context);
    4fa4:	e0bffb17 	ldw	r2,-20(fp)
    4fa8:	10800a17 	ldw	r2,40(r2)
    4fac:	e0fffb17 	ldw	r3,-20(fp)
    4fb0:	18c00b17 	ldw	r3,44(r3)
    4fb4:	1809883a 	mov	r4,r3
    4fb8:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
    4fbc:	e0bffb17 	ldw	r2,-20(fp)
    4fc0:	10800c17 	ldw	r2,48(r2)
    4fc4:	1009883a 	mov	r4,r2
    4fc8:	00053fc0 	call	53fc <adc_clear_interrupt_status>
    4fcc:	e0bffc17 	ldw	r2,-16(fp)
    4fd0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4fd4:	e0bffd17 	ldw	r2,-12(fp)
    4fd8:	1001703a 	wrctl	status,r2
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
    4fdc:	0001883a 	nop
    4fe0:	0001883a 	nop
}
    4fe4:	e037883a 	mov	sp,fp
    4fe8:	dfc00117 	ldw	ra,4(sp)
    4fec:	df000017 	ldw	fp,0(sp)
    4ff0:	dec00204 	addi	sp,sp,8
    4ff4:	f800283a 	ret

00004ff8 <alt_adc_word_read>:
 * Returns:
 * 0 -> success
 * -EINVAL -> Invalid arguments
**/
int alt_adc_word_read (alt_u32 sample_store_base, alt_u32* dest_ptr, alt_u32 len)
{
    4ff8:	defff804 	addi	sp,sp,-32
    4ffc:	df000715 	stw	fp,28(sp)
    5000:	df000704 	addi	fp,sp,28
    5004:	e13ffd15 	stw	r4,-12(fp)
    5008:	e17ffe15 	stw	r5,-8(fp)
    500c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 word = 0;
    5010:	e03ff915 	stw	zero,-28(fp)
    alt_u32 word_length = len;
    5014:	e0bfff17 	ldw	r2,-4(fp)
    5018:	e0bffb15 	stw	r2,-20(fp)
    alt_u32* dest_buf = dest_ptr;
    501c:	e0bffe17 	ldw	r2,-8(fp)
    5020:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 base = sample_store_base;
    5024:	e0bffd17 	ldw	r2,-12(fp)
    5028:	e0bffc15 	stw	r2,-16(fp)
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
    502c:	e0bffa17 	ldw	r2,-24(fp)
    5030:	1000021e 	bne	r2,zero,503c <alt_adc_word_read+0x44>
    {
    	return -EINVAL;
    5034:	00bffa84 	movi	r2,-22
    5038:	00001606 	br	5094 <alt_adc_word_read+0x9c>
    }

    for(word = 0; word < word_length; word++)
    503c:	e03ff915 	stw	zero,-28(fp)
    5040:	00001006 	br	5084 <alt_adc_word_read+0x8c>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
    5044:	e0bff917 	ldw	r2,-28(fp)
    5048:	1085883a 	add	r2,r2,r2
    504c:	1085883a 	add	r2,r2,r2
    5050:	1007883a 	mov	r3,r2
    5054:	e0bffc17 	ldw	r2,-16(fp)
    5058:	1885883a 	add	r2,r3,r2
    505c:	10800037 	ldwio	r2,0(r2)
    5060:	1007883a 	mov	r3,r2
    5064:	e0bffa17 	ldw	r2,-24(fp)
    5068:	10c00015 	stw	r3,0(r2)

       dest_buf++;
    506c:	e0bffa17 	ldw	r2,-24(fp)
    5070:	10800104 	addi	r2,r2,4
    5074:	e0bffa15 	stw	r2,-24(fp)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
    5078:	e0bff917 	ldw	r2,-28(fp)
    507c:	10800044 	addi	r2,r2,1
    5080:	e0bff915 	stw	r2,-28(fp)
    5084:	e0fff917 	ldw	r3,-28(fp)
    5088:	e0bffb17 	ldw	r2,-20(fp)
    508c:	18bfed36 	bltu	r3,r2,5044 <__alt_mem_Onchip_SRAM+0xf8005044>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
    5090:	0005883a 	mov	r2,zero

}
    5094:	e037883a 	mov	sp,fp
    5098:	df000017 	ldw	fp,0(sp)
    509c:	dec00104 	addi	sp,sp,4
    50a0:	f800283a 	ret

000050a4 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
    50a4:	defffa04 	addi	sp,sp,-24
    50a8:	dfc00515 	stw	ra,20(sp)
    50ac:	df000415 	stw	fp,16(sp)
    50b0:	df000404 	addi	fp,sp,16
    50b4:	e13ffd15 	stw	r4,-12(fp)
    50b8:	e17ffe15 	stw	r5,-8(fp)
    50bc:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
    50c0:	d1600f04 	addi	r5,gp,-32708
    50c4:	e13ffd17 	ldw	r4,-12(fp)
    50c8:	00056440 	call	5644 <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
    50cc:	e0bffe17 	ldw	r2,-8(fp)
    50d0:	10000b16 	blt	r2,zero,5100 <altera_modular_adc_init+0x5c>
    50d4:	e0bfff17 	ldw	r2,-4(fp)
    50d8:	10000916 	blt	r2,zero,5100 <altera_modular_adc_init+0x5c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
    50dc:	e0bffe17 	ldw	r2,-8(fp)
    50e0:	e0ffff17 	ldw	r3,-4(fp)
    50e4:	d8000015 	stw	zero,0(sp)
    50e8:	e1fffd17 	ldw	r7,-12(fp)
    50ec:	01800034 	movhi	r6,0
    50f0:	3193d404 	addi	r6,r6,20304
    50f4:	180b883a 	mov	r5,r3
    50f8:	1009883a 	mov	r4,r2
    50fc:	00058580 	call	5858 <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
    5100:	0001883a 	nop
    5104:	e037883a 	mov	sp,fp
    5108:	dfc00117 	ldw	ra,4(sp)
    510c:	df000017 	ldw	fp,0(sp)
    5110:	dec00204 	addi	sp,sp,8
    5114:	f800283a 	ret

00005118 <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
    5118:	defffa04 	addi	sp,sp,-24
    511c:	dfc00515 	stw	ra,20(sp)
    5120:	df000415 	stw	fp,16(sp)
    5124:	df000404 	addi	fp,sp,16
    5128:	e13ffc15 	stw	r4,-16(fp)
    512c:	e17ffd15 	stw	r5,-12(fp)
    5130:	e1bffe15 	stw	r6,-8(fp)
    5134:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
    5138:	e0bffc17 	ldw	r2,-16(fp)
    513c:	e0fffd17 	ldw	r3,-12(fp)
    5140:	10c00a15 	stw	r3,40(r2)
    dev->callback_context = context;
    5144:	e0bffc17 	ldw	r2,-16(fp)
    5148:	e0fffe17 	ldw	r3,-8(fp)
    514c:	10c00b15 	stw	r3,44(r2)
    dev->sample_store_base = sample_store_base;
    5150:	e0bffc17 	ldw	r2,-16(fp)
    5154:	e0ffff17 	ldw	r3,-4(fp)
    5158:	10c00c15 	stw	r3,48(r2)
	
	if(NULL != callback)
    515c:	e0bffd17 	ldw	r2,-12(fp)
    5160:	10000726 	beq	r2,zero,5180 <alt_adc_register_callback+0x68>
	{
                adc_clear_interrupt_status(sample_store_base);
    5164:	e0bfff17 	ldw	r2,-4(fp)
    5168:	1009883a 	mov	r4,r2
    516c:	00053fc0 	call	53fc <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
    5170:	e0bfff17 	ldw	r2,-4(fp)
    5174:	1009883a 	mov	r4,r2
    5178:	00053700 	call	5370 <adc_interrupt_enable>
                adc_clear_interrupt_status(sample_store_base);
	}
	
    
	
    return ;
    517c:	00000706 	br	519c <alt_adc_register_callback+0x84>
                adc_clear_interrupt_status(sample_store_base);
		adc_interrupt_enable(sample_store_base);
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
    5180:	e0bfff17 	ldw	r2,-4(fp)
    5184:	1009883a 	mov	r4,r2
    5188:	00053b40 	call	53b4 <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
    518c:	e0bfff17 	ldw	r2,-4(fp)
    5190:	1009883a 	mov	r4,r2
    5194:	00053fc0 	call	53fc <adc_clear_interrupt_status>
	}
	
    
	
    return ;
    5198:	0001883a 	nop
}
    519c:	e037883a 	mov	sp,fp
    51a0:	dfc00117 	ldw	ra,4(sp)
    51a4:	df000017 	ldw	fp,0(sp)
    51a8:	dec00204 	addi	sp,sp,8
    51ac:	f800283a 	ret

000051b0 <altera_modular_adc_open>:

alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
    51b0:	defffc04 	addi	sp,sp,-16
    51b4:	dfc00315 	stw	ra,12(sp)
    51b8:	df000215 	stw	fp,8(sp)
    51bc:	df000204 	addi	fp,sp,8
    51c0:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = NULL;
    51c4:	e03ffe15 	stw	zero,-8(fp)

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
    51c8:	d1600f04 	addi	r5,gp,-32708
    51cc:	e13fff17 	ldw	r4,-4(fp)
    51d0:	00057a80 	call	57a8 <alt_find_dev>
    51d4:	e0bffe15 	stw	r2,-8(fp)

    return dev;
    51d8:	e0bffe17 	ldw	r2,-8(fp)
}
    51dc:	e037883a 	mov	sp,fp
    51e0:	dfc00117 	ldw	ra,4(sp)
    51e4:	df000017 	ldw	fp,0(sp)
    51e8:	dec00204 	addi	sp,sp,8
    51ec:	f800283a 	ret

000051f0 <adc_stop>:

void adc_stop(int sequencer_base)
{
    51f0:	defffe04 	addi	sp,sp,-8
    51f4:	df000115 	stw	fp,4(sp)
    51f8:	df000104 	addi	fp,sp,4
    51fc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
    5200:	e0bfff17 	ldw	r2,-4(fp)
    5204:	e0ffff17 	ldw	r3,-4(fp)
    5208:	19000037 	ldwio	r4,0(r3)
    520c:	00ffff84 	movi	r3,-2
    5210:	20c6703a 	and	r3,r4,r3
    5214:	10c00035 	stwio	r3,0(r2)
    5218:	0001883a 	nop
    521c:	e0bfff17 	ldw	r2,-4(fp)
    5220:	10800037 	ldwio	r2,0(r2)
    5224:	1080004c 	andi	r2,r2,1
    5228:	103ffc1e 	bne	r2,zero,521c <__alt_mem_Onchip_SRAM+0xf800521c>
}
    522c:	0001883a 	nop
    5230:	e037883a 	mov	sp,fp
    5234:	df000017 	ldw	fp,0(sp)
    5238:	dec00104 	addi	sp,sp,4
    523c:	f800283a 	ret

00005240 <adc_start>:

void adc_start(int sequencer_base)
{
    5240:	defffe04 	addi	sp,sp,-8
    5244:	df000115 	stw	fp,4(sp)
    5248:	df000104 	addi	fp,sp,4
    524c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
    5250:	e0bfff17 	ldw	r2,-4(fp)
    5254:	e0ffff17 	ldw	r3,-4(fp)
    5258:	18c00037 	ldwio	r3,0(r3)
    525c:	18c00054 	ori	r3,r3,1
    5260:	10c00035 	stwio	r3,0(r2)
}
    5264:	0001883a 	nop
    5268:	e037883a 	mov	sp,fp
    526c:	df000017 	ldw	fp,0(sp)
    5270:	dec00104 	addi	sp,sp,4
    5274:	f800283a 	ret

00005278 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
    5278:	defffe04 	addi	sp,sp,-8
    527c:	df000115 	stw	fp,4(sp)
    5280:	df000104 	addi	fp,sp,4
    5284:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
    5288:	e0bfff17 	ldw	r2,-4(fp)
    528c:	e0ffff17 	ldw	r3,-4(fp)
    5290:	19000037 	ldwio	r4,0(r3)
    5294:	00fffc44 	movi	r3,-15
    5298:	20c6703a 	and	r3,r4,r3
    529c:	18c00094 	ori	r3,r3,2
    52a0:	10c00035 	stwio	r3,0(r2)
}
    52a4:	0001883a 	nop
    52a8:	e037883a 	mov	sp,fp
    52ac:	df000017 	ldw	fp,0(sp)
    52b0:	dec00104 	addi	sp,sp,4
    52b4:	f800283a 	ret

000052b8 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
    52b8:	defffe04 	addi	sp,sp,-8
    52bc:	df000115 	stw	fp,4(sp)
    52c0:	df000104 	addi	fp,sp,4
    52c4:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
    52c8:	e0bfff17 	ldw	r2,-4(fp)
    52cc:	e0ffff17 	ldw	r3,-4(fp)
    52d0:	19000037 	ldwio	r4,0(r3)
    52d4:	00fffc44 	movi	r3,-15
    52d8:	20c6703a 	and	r3,r4,r3
    52dc:	10c00035 	stwio	r3,0(r2)
}
    52e0:	0001883a 	nop
    52e4:	e037883a 	mov	sp,fp
    52e8:	df000017 	ldw	fp,0(sp)
    52ec:	dec00104 	addi	sp,sp,4
    52f0:	f800283a 	ret

000052f4 <adc_recalibrate>:

void adc_recalibrate(int sequencer_base)
{
    52f4:	defffc04 	addi	sp,sp,-16
    52f8:	dfc00315 	stw	ra,12(sp)
    52fc:	df000215 	stw	fp,8(sp)
    5300:	df000204 	addi	fp,sp,8
    5304:	e13fff15 	stw	r4,-4(fp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    5308:	e0bfff17 	ldw	r2,-4(fp)
    530c:	10800037 	ldwio	r2,0(r2)
    5310:	e0bffe15 	stw	r2,-8(fp)
    adc_stop(sequencer_base);
    5314:	e13fff17 	ldw	r4,-4(fp)
    5318:	00051f00 	call	51f0 <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    531c:	e0bfff17 	ldw	r2,-4(fp)
    5320:	e0ffff17 	ldw	r3,-4(fp)
    5324:	18c00037 	ldwio	r3,0(r3)
    5328:	18c00394 	ori	r3,r3,14
    532c:	10c00035 	stwio	r3,0(r2)
    adc_start(sequencer_base);
    5330:	e13fff17 	ldw	r4,-4(fp)
    5334:	00052400 	call	5240 <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
    5338:	0001883a 	nop
    533c:	e0bfff17 	ldw	r2,-4(fp)
    5340:	10800037 	ldwio	r2,0(r2)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    5344:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
    5348:	103ffc1e 	bne	r2,zero,533c <__alt_mem_Onchip_SRAM+0xf800533c>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
    534c:	e0bfff17 	ldw	r2,-4(fp)
    5350:	e0fffe17 	ldw	r3,-8(fp)
    5354:	10c00035 	stwio	r3,0(r2)
}
    5358:	0001883a 	nop
    535c:	e037883a 	mov	sp,fp
    5360:	dfc00117 	ldw	ra,4(sp)
    5364:	df000017 	ldw	fp,0(sp)
    5368:	dec00204 	addi	sp,sp,8
    536c:	f800283a 	ret

00005370 <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
    5370:	defffe04 	addi	sp,sp,-8
    5374:	df000115 	stw	fp,4(sp)
    5378:	df000104 	addi	fp,sp,4
    537c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
    5380:	e0bfff17 	ldw	r2,-4(fp)
    5384:	10804004 	addi	r2,r2,256
    5388:	1007883a 	mov	r3,r2
    538c:	e0bfff17 	ldw	r2,-4(fp)
    5390:	10804004 	addi	r2,r2,256
    5394:	10800037 	ldwio	r2,0(r2)
    5398:	10800054 	ori	r2,r2,1
    539c:	18800035 	stwio	r2,0(r3)
}
    53a0:	0001883a 	nop
    53a4:	e037883a 	mov	sp,fp
    53a8:	df000017 	ldw	fp,0(sp)
    53ac:	dec00104 	addi	sp,sp,4
    53b0:	f800283a 	ret

000053b4 <adc_interrupt_disable>:

void adc_interrupt_disable(int sample_store_base)
{
    53b4:	defffe04 	addi	sp,sp,-8
    53b8:	df000115 	stw	fp,4(sp)
    53bc:	df000104 	addi	fp,sp,4
    53c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
    53c4:	e0bfff17 	ldw	r2,-4(fp)
    53c8:	10804004 	addi	r2,r2,256
    53cc:	1009883a 	mov	r4,r2
    53d0:	e0bfff17 	ldw	r2,-4(fp)
    53d4:	10804004 	addi	r2,r2,256
    53d8:	10c00037 	ldwio	r3,0(r2)
    53dc:	00bfff84 	movi	r2,-2
    53e0:	1884703a 	and	r2,r3,r2
    53e4:	20800035 	stwio	r2,0(r4)
}
    53e8:	0001883a 	nop
    53ec:	e037883a 	mov	sp,fp
    53f0:	df000017 	ldw	fp,0(sp)
    53f4:	dec00104 	addi	sp,sp,4
    53f8:	f800283a 	ret

000053fc <adc_clear_interrupt_status>:

void adc_clear_interrupt_status(int sample_store_base)
{
    53fc:	defffe04 	addi	sp,sp,-8
    5400:	df000115 	stw	fp,4(sp)
    5404:	df000104 	addi	fp,sp,4
    5408:	e13fff15 	stw	r4,-4(fp)
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
    540c:	e0bfff17 	ldw	r2,-4(fp)
    5410:	10804104 	addi	r2,r2,260
    5414:	1007883a 	mov	r3,r2
    5418:	e0bfff17 	ldw	r2,-4(fp)
    541c:	10804104 	addi	r2,r2,260
    5420:	10800037 	ldwio	r2,0(r2)
    5424:	10800054 	ori	r2,r2,1
    5428:	18800035 	stwio	r2,0(r3)
}
    542c:	0001883a 	nop
    5430:	e037883a 	mov	sp,fp
    5434:	df000017 	ldw	fp,0(sp)
    5438:	dec00104 	addi	sp,sp,4
    543c:	f800283a 	ret

00005440 <adc_interrupt_asserted>:

int adc_interrupt_asserted(int sample_store_base)
{
    5440:	defffe04 	addi	sp,sp,-8
    5444:	df000115 	stw	fp,4(sp)
    5448:	df000104 	addi	fp,sp,4
    544c:	e13fff15 	stw	r4,-4(fp)
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
    5450:	e0bfff17 	ldw	r2,-4(fp)
    5454:	10804104 	addi	r2,r2,260
    5458:	10800037 	ldwio	r2,0(r2)
    545c:	1080004c 	andi	r2,r2,1
    5460:	10000226 	beq	r2,zero,546c <adc_interrupt_asserted+0x2c>
    5464:	00bfffc4 	movi	r2,-1
    5468:	00000106 	br	5470 <adc_interrupt_asserted+0x30>
    546c:	0005883a 	mov	r2,zero
}
    5470:	e037883a 	mov	sp,fp
    5474:	df000017 	ldw	fp,0(sp)
    5478:	dec00104 	addi	sp,sp,4
    547c:	f800283a 	ret

00005480 <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
    5480:	defffe04 	addi	sp,sp,-8
    5484:	df000115 	stw	fp,4(sp)
    5488:	df000104 	addi	fp,sp,4
    548c:	e13fff15 	stw	r4,-4(fp)
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
    5490:	0001883a 	nop
    5494:	e0bfff17 	ldw	r2,-4(fp)
    5498:	10804104 	addi	r2,r2,260
    549c:	10800037 	ldwio	r2,0(r2)
    54a0:	1080004c 	andi	r2,r2,1
    54a4:	103ffb26 	beq	r2,zero,5494 <__alt_mem_Onchip_SRAM+0xf8005494>
}
    54a8:	0001883a 	nop
    54ac:	e037883a 	mov	sp,fp
    54b0:	df000017 	ldw	fp,0(sp)
    54b4:	dec00104 	addi	sp,sp,4
    54b8:	f800283a 	ret

000054bc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    54bc:	defff504 	addi	sp,sp,-44
    54c0:	df000a15 	stw	fp,40(sp)
    54c4:	df000a04 	addi	fp,sp,40
    54c8:	e13ffc15 	stw	r4,-16(fp)
    54cc:	e17ffd15 	stw	r5,-12(fp)
    54d0:	e1bffe15 	stw	r6,-8(fp)
    54d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    54d8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    54dc:	d0a6cb17 	ldw	r2,-25812(gp)
  
  if (alt_ticks_per_second ())
    54e0:	10003c26 	beq	r2,zero,55d4 <alt_alarm_start+0x118>
  {
    if (alarm)
    54e4:	e0bffc17 	ldw	r2,-16(fp)
    54e8:	10003826 	beq	r2,zero,55cc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    54ec:	e0bffc17 	ldw	r2,-16(fp)
    54f0:	e0fffe17 	ldw	r3,-8(fp)
    54f4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    54f8:	e0bffc17 	ldw	r2,-16(fp)
    54fc:	e0ffff17 	ldw	r3,-4(fp)
    5500:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5504:	0005303a 	rdctl	r2,status
    5508:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    550c:	e0fff917 	ldw	r3,-28(fp)
    5510:	00bfff84 	movi	r2,-2
    5514:	1884703a 	and	r2,r3,r2
    5518:	1001703a 	wrctl	status,r2
  
  return context;
    551c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    5520:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    5524:	d0a6cc17 	ldw	r2,-25808(gp)
      
      current_nticks = alt_nticks();
    5528:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    552c:	e0fffd17 	ldw	r3,-12(fp)
    5530:	e0bff617 	ldw	r2,-40(fp)
    5534:	1885883a 	add	r2,r3,r2
    5538:	10c00044 	addi	r3,r2,1
    553c:	e0bffc17 	ldw	r2,-16(fp)
    5540:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    5544:	e0bffc17 	ldw	r2,-16(fp)
    5548:	10c00217 	ldw	r3,8(r2)
    554c:	e0bff617 	ldw	r2,-40(fp)
    5550:	1880042e 	bgeu	r3,r2,5564 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    5554:	e0bffc17 	ldw	r2,-16(fp)
    5558:	00c00044 	movi	r3,1
    555c:	10c00405 	stb	r3,16(r2)
    5560:	00000206 	br	556c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    5564:	e0bffc17 	ldw	r2,-16(fp)
    5568:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    556c:	e0bffc17 	ldw	r2,-16(fp)
    5570:	d0e00d04 	addi	r3,gp,-32716
    5574:	e0fffa15 	stw	r3,-24(fp)
    5578:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    557c:	e0bffb17 	ldw	r2,-20(fp)
    5580:	e0fffa17 	ldw	r3,-24(fp)
    5584:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    5588:	e0bffa17 	ldw	r2,-24(fp)
    558c:	10c00017 	ldw	r3,0(r2)
    5590:	e0bffb17 	ldw	r2,-20(fp)
    5594:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5598:	e0bffa17 	ldw	r2,-24(fp)
    559c:	10800017 	ldw	r2,0(r2)
    55a0:	e0fffb17 	ldw	r3,-20(fp)
    55a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    55a8:	e0bffa17 	ldw	r2,-24(fp)
    55ac:	e0fffb17 	ldw	r3,-20(fp)
    55b0:	10c00015 	stw	r3,0(r2)
    55b4:	e0bff817 	ldw	r2,-32(fp)
    55b8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    55bc:	e0bff717 	ldw	r2,-36(fp)
    55c0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    55c4:	0005883a 	mov	r2,zero
    55c8:	00000306 	br	55d8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    55cc:	00bffa84 	movi	r2,-22
    55d0:	00000106 	br	55d8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    55d4:	00bfde84 	movi	r2,-134
  }
}
    55d8:	e037883a 	mov	sp,fp
    55dc:	df000017 	ldw	fp,0(sp)
    55e0:	dec00104 	addi	sp,sp,4
    55e4:	f800283a 	ret

000055e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    55e8:	deffff04 	addi	sp,sp,-4
    55ec:	df000015 	stw	fp,0(sp)
    55f0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    55f4:	0001883a 	nop
    55f8:	e037883a 	mov	sp,fp
    55fc:	df000017 	ldw	fp,0(sp)
    5600:	dec00104 	addi	sp,sp,4
    5604:	f800283a 	ret

00005608 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5608:	defffe04 	addi	sp,sp,-8
    560c:	dfc00115 	stw	ra,4(sp)
    5610:	df000015 	stw	fp,0(sp)
    5614:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5618:	d0a00b17 	ldw	r2,-32724(gp)
    561c:	10000326 	beq	r2,zero,562c <alt_get_errno+0x24>
    5620:	d0a00b17 	ldw	r2,-32724(gp)
    5624:	103ee83a 	callr	r2
    5628:	00000106 	br	5630 <alt_get_errno+0x28>
    562c:	d0a6c004 	addi	r2,gp,-25856
}
    5630:	e037883a 	mov	sp,fp
    5634:	dfc00117 	ldw	ra,4(sp)
    5638:	df000017 	ldw	fp,0(sp)
    563c:	dec00204 	addi	sp,sp,8
    5640:	f800283a 	ret

00005644 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5644:	defffa04 	addi	sp,sp,-24
    5648:	dfc00515 	stw	ra,20(sp)
    564c:	df000415 	stw	fp,16(sp)
    5650:	df000404 	addi	fp,sp,16
    5654:	e13ffe15 	stw	r4,-8(fp)
    5658:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    565c:	e0bffe17 	ldw	r2,-8(fp)
    5660:	10000326 	beq	r2,zero,5670 <alt_dev_llist_insert+0x2c>
    5664:	e0bffe17 	ldw	r2,-8(fp)
    5668:	10800217 	ldw	r2,8(r2)
    566c:	1000061e 	bne	r2,zero,5688 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    5670:	00056080 	call	5608 <alt_get_errno>
    5674:	1007883a 	mov	r3,r2
    5678:	00800584 	movi	r2,22
    567c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    5680:	00bffa84 	movi	r2,-22
    5684:	00001306 	br	56d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    5688:	e0bffe17 	ldw	r2,-8(fp)
    568c:	e0ffff17 	ldw	r3,-4(fp)
    5690:	e0fffc15 	stw	r3,-16(fp)
    5694:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5698:	e0bffd17 	ldw	r2,-12(fp)
    569c:	e0fffc17 	ldw	r3,-16(fp)
    56a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    56a4:	e0bffc17 	ldw	r2,-16(fp)
    56a8:	10c00017 	ldw	r3,0(r2)
    56ac:	e0bffd17 	ldw	r2,-12(fp)
    56b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    56b4:	e0bffc17 	ldw	r2,-16(fp)
    56b8:	10800017 	ldw	r2,0(r2)
    56bc:	e0fffd17 	ldw	r3,-12(fp)
    56c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    56c4:	e0bffc17 	ldw	r2,-16(fp)
    56c8:	e0fffd17 	ldw	r3,-12(fp)
    56cc:	10c00015 	stw	r3,0(r2)

  return 0;  
    56d0:	0005883a 	mov	r2,zero
}
    56d4:	e037883a 	mov	sp,fp
    56d8:	dfc00117 	ldw	ra,4(sp)
    56dc:	df000017 	ldw	fp,0(sp)
    56e0:	dec00204 	addi	sp,sp,8
    56e4:	f800283a 	ret

000056e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    56e8:	defffd04 	addi	sp,sp,-12
    56ec:	dfc00215 	stw	ra,8(sp)
    56f0:	df000115 	stw	fp,4(sp)
    56f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    56f8:	00800034 	movhi	r2,0
    56fc:	109aaf04 	addi	r2,r2,27324
    5700:	e0bfff15 	stw	r2,-4(fp)
    5704:	00000606 	br	5720 <_do_ctors+0x38>
        (*ctor) (); 
    5708:	e0bfff17 	ldw	r2,-4(fp)
    570c:	10800017 	ldw	r2,0(r2)
    5710:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5714:	e0bfff17 	ldw	r2,-4(fp)
    5718:	10bfff04 	addi	r2,r2,-4
    571c:	e0bfff15 	stw	r2,-4(fp)
    5720:	e0ffff17 	ldw	r3,-4(fp)
    5724:	00800034 	movhi	r2,0
    5728:	109ab004 	addi	r2,r2,27328
    572c:	18bff62e 	bgeu	r3,r2,5708 <__alt_mem_Onchip_SRAM+0xf8005708>
        (*ctor) (); 
}
    5730:	0001883a 	nop
    5734:	e037883a 	mov	sp,fp
    5738:	dfc00117 	ldw	ra,4(sp)
    573c:	df000017 	ldw	fp,0(sp)
    5740:	dec00204 	addi	sp,sp,8
    5744:	f800283a 	ret

00005748 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    5748:	defffd04 	addi	sp,sp,-12
    574c:	dfc00215 	stw	ra,8(sp)
    5750:	df000115 	stw	fp,4(sp)
    5754:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5758:	00800034 	movhi	r2,0
    575c:	109aaf04 	addi	r2,r2,27324
    5760:	e0bfff15 	stw	r2,-4(fp)
    5764:	00000606 	br	5780 <_do_dtors+0x38>
        (*dtor) (); 
    5768:	e0bfff17 	ldw	r2,-4(fp)
    576c:	10800017 	ldw	r2,0(r2)
    5770:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5774:	e0bfff17 	ldw	r2,-4(fp)
    5778:	10bfff04 	addi	r2,r2,-4
    577c:	e0bfff15 	stw	r2,-4(fp)
    5780:	e0ffff17 	ldw	r3,-4(fp)
    5784:	00800034 	movhi	r2,0
    5788:	109ab004 	addi	r2,r2,27328
    578c:	18bff62e 	bgeu	r3,r2,5768 <__alt_mem_Onchip_SRAM+0xf8005768>
        (*dtor) (); 
}
    5790:	0001883a 	nop
    5794:	e037883a 	mov	sp,fp
    5798:	dfc00117 	ldw	ra,4(sp)
    579c:	df000017 	ldw	fp,0(sp)
    57a0:	dec00204 	addi	sp,sp,8
    57a4:	f800283a 	ret

000057a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    57a8:	defffa04 	addi	sp,sp,-24
    57ac:	dfc00515 	stw	ra,20(sp)
    57b0:	df000415 	stw	fp,16(sp)
    57b4:	df000404 	addi	fp,sp,16
    57b8:	e13ffe15 	stw	r4,-8(fp)
    57bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    57c0:	e0bfff17 	ldw	r2,-4(fp)
    57c4:	10800017 	ldw	r2,0(r2)
    57c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    57cc:	e13ffe17 	ldw	r4,-8(fp)
    57d0:	00008d00 	call	8d0 <strlen>
    57d4:	10800044 	addi	r2,r2,1
    57d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    57dc:	00000d06 	br	5814 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    57e0:	e0bffc17 	ldw	r2,-16(fp)
    57e4:	10800217 	ldw	r2,8(r2)
    57e8:	e0fffd17 	ldw	r3,-12(fp)
    57ec:	180d883a 	mov	r6,r3
    57f0:	e17ffe17 	ldw	r5,-8(fp)
    57f4:	1009883a 	mov	r4,r2
    57f8:	00061b40 	call	61b4 <memcmp>
    57fc:	1000021e 	bne	r2,zero,5808 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5800:	e0bffc17 	ldw	r2,-16(fp)
    5804:	00000706 	br	5824 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5808:	e0bffc17 	ldw	r2,-16(fp)
    580c:	10800017 	ldw	r2,0(r2)
    5810:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5814:	e0fffc17 	ldw	r3,-16(fp)
    5818:	e0bfff17 	ldw	r2,-4(fp)
    581c:	18bff01e 	bne	r3,r2,57e0 <__alt_mem_Onchip_SRAM+0xf80057e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5820:	0005883a 	mov	r2,zero
}
    5824:	e037883a 	mov	sp,fp
    5828:	dfc00117 	ldw	ra,4(sp)
    582c:	df000017 	ldw	fp,0(sp)
    5830:	dec00204 	addi	sp,sp,8
    5834:	f800283a 	ret

00005838 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5838:	deffff04 	addi	sp,sp,-4
    583c:	df000015 	stw	fp,0(sp)
    5840:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    5844:	0001883a 	nop
    5848:	e037883a 	mov	sp,fp
    584c:	df000017 	ldw	fp,0(sp)
    5850:	dec00104 	addi	sp,sp,4
    5854:	f800283a 	ret

00005858 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5858:	defff904 	addi	sp,sp,-28
    585c:	dfc00615 	stw	ra,24(sp)
    5860:	df000515 	stw	fp,20(sp)
    5864:	df000504 	addi	fp,sp,20
    5868:	e13ffc15 	stw	r4,-16(fp)
    586c:	e17ffd15 	stw	r5,-12(fp)
    5870:	e1bffe15 	stw	r6,-8(fp)
    5874:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5878:	e0800217 	ldw	r2,8(fp)
    587c:	d8800015 	stw	r2,0(sp)
    5880:	e1ffff17 	ldw	r7,-4(fp)
    5884:	e1bffe17 	ldw	r6,-8(fp)
    5888:	e17ffd17 	ldw	r5,-12(fp)
    588c:	e13ffc17 	ldw	r4,-16(fp)
    5890:	0005a080 	call	5a08 <alt_iic_isr_register>
}  
    5894:	e037883a 	mov	sp,fp
    5898:	dfc00117 	ldw	ra,4(sp)
    589c:	df000017 	ldw	fp,0(sp)
    58a0:	dec00204 	addi	sp,sp,8
    58a4:	f800283a 	ret

000058a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    58a8:	defff904 	addi	sp,sp,-28
    58ac:	df000615 	stw	fp,24(sp)
    58b0:	df000604 	addi	fp,sp,24
    58b4:	e13ffe15 	stw	r4,-8(fp)
    58b8:	e17fff15 	stw	r5,-4(fp)
    58bc:	e0bfff17 	ldw	r2,-4(fp)
    58c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    58c4:	0005303a 	rdctl	r2,status
    58c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    58cc:	e0fffb17 	ldw	r3,-20(fp)
    58d0:	00bfff84 	movi	r2,-2
    58d4:	1884703a 	and	r2,r3,r2
    58d8:	1001703a 	wrctl	status,r2
  
  return context;
    58dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    58e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    58e4:	00c00044 	movi	r3,1
    58e8:	e0bffa17 	ldw	r2,-24(fp)
    58ec:	1884983a 	sll	r2,r3,r2
    58f0:	1007883a 	mov	r3,r2
    58f4:	d0a6cd17 	ldw	r2,-25804(gp)
    58f8:	1884b03a 	or	r2,r3,r2
    58fc:	d0a6cd15 	stw	r2,-25804(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5900:	d0a6cd17 	ldw	r2,-25804(gp)
    5904:	100170fa 	wrctl	ienable,r2
    5908:	e0bffc17 	ldw	r2,-16(fp)
    590c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5910:	e0bffd17 	ldw	r2,-12(fp)
    5914:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5918:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    591c:	0001883a 	nop
}
    5920:	e037883a 	mov	sp,fp
    5924:	df000017 	ldw	fp,0(sp)
    5928:	dec00104 	addi	sp,sp,4
    592c:	f800283a 	ret

00005930 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    5930:	defff904 	addi	sp,sp,-28
    5934:	df000615 	stw	fp,24(sp)
    5938:	df000604 	addi	fp,sp,24
    593c:	e13ffe15 	stw	r4,-8(fp)
    5940:	e17fff15 	stw	r5,-4(fp)
    5944:	e0bfff17 	ldw	r2,-4(fp)
    5948:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    594c:	0005303a 	rdctl	r2,status
    5950:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5954:	e0fffb17 	ldw	r3,-20(fp)
    5958:	00bfff84 	movi	r2,-2
    595c:	1884703a 	and	r2,r3,r2
    5960:	1001703a 	wrctl	status,r2
  
  return context;
    5964:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5968:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    596c:	00c00044 	movi	r3,1
    5970:	e0bffa17 	ldw	r2,-24(fp)
    5974:	1884983a 	sll	r2,r3,r2
    5978:	0084303a 	nor	r2,zero,r2
    597c:	1007883a 	mov	r3,r2
    5980:	d0a6cd17 	ldw	r2,-25804(gp)
    5984:	1884703a 	and	r2,r3,r2
    5988:	d0a6cd15 	stw	r2,-25804(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    598c:	d0a6cd17 	ldw	r2,-25804(gp)
    5990:	100170fa 	wrctl	ienable,r2
    5994:	e0bffc17 	ldw	r2,-16(fp)
    5998:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    599c:	e0bffd17 	ldw	r2,-12(fp)
    59a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    59a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    59a8:	0001883a 	nop
}
    59ac:	e037883a 	mov	sp,fp
    59b0:	df000017 	ldw	fp,0(sp)
    59b4:	dec00104 	addi	sp,sp,4
    59b8:	f800283a 	ret

000059bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    59bc:	defffc04 	addi	sp,sp,-16
    59c0:	df000315 	stw	fp,12(sp)
    59c4:	df000304 	addi	fp,sp,12
    59c8:	e13ffe15 	stw	r4,-8(fp)
    59cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    59d0:	000530fa 	rdctl	r2,ienable
    59d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    59d8:	00c00044 	movi	r3,1
    59dc:	e0bfff17 	ldw	r2,-4(fp)
    59e0:	1884983a 	sll	r2,r3,r2
    59e4:	1007883a 	mov	r3,r2
    59e8:	e0bffd17 	ldw	r2,-12(fp)
    59ec:	1884703a 	and	r2,r3,r2
    59f0:	1004c03a 	cmpne	r2,r2,zero
    59f4:	10803fcc 	andi	r2,r2,255
}
    59f8:	e037883a 	mov	sp,fp
    59fc:	df000017 	ldw	fp,0(sp)
    5a00:	dec00104 	addi	sp,sp,4
    5a04:	f800283a 	ret

00005a08 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5a08:	defff504 	addi	sp,sp,-44
    5a0c:	dfc00a15 	stw	ra,40(sp)
    5a10:	df000915 	stw	fp,36(sp)
    5a14:	df000904 	addi	fp,sp,36
    5a18:	e13ffc15 	stw	r4,-16(fp)
    5a1c:	e17ffd15 	stw	r5,-12(fp)
    5a20:	e1bffe15 	stw	r6,-8(fp)
    5a24:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    5a28:	00bffa84 	movi	r2,-22
    5a2c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    5a30:	e0bffd17 	ldw	r2,-12(fp)
    5a34:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5a38:	e0bff817 	ldw	r2,-32(fp)
    5a3c:	10800808 	cmpgei	r2,r2,32
    5a40:	1000271e 	bne	r2,zero,5ae0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5a44:	0005303a 	rdctl	r2,status
    5a48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a4c:	e0fffb17 	ldw	r3,-20(fp)
    5a50:	00bfff84 	movi	r2,-2
    5a54:	1884703a 	and	r2,r3,r2
    5a58:	1001703a 	wrctl	status,r2
  
  return context;
    5a5c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    5a60:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    5a64:	00800074 	movhi	r2,1
    5a68:	10a88404 	addi	r2,r2,-24048
    5a6c:	e0fff817 	ldw	r3,-32(fp)
    5a70:	180690fa 	slli	r3,r3,3
    5a74:	10c5883a 	add	r2,r2,r3
    5a78:	e0fffe17 	ldw	r3,-8(fp)
    5a7c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    5a80:	00800074 	movhi	r2,1
    5a84:	10a88404 	addi	r2,r2,-24048
    5a88:	e0fff817 	ldw	r3,-32(fp)
    5a8c:	180690fa 	slli	r3,r3,3
    5a90:	10c5883a 	add	r2,r2,r3
    5a94:	10800104 	addi	r2,r2,4
    5a98:	e0ffff17 	ldw	r3,-4(fp)
    5a9c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5aa0:	e0bffe17 	ldw	r2,-8(fp)
    5aa4:	10000526 	beq	r2,zero,5abc <alt_iic_isr_register+0xb4>
    5aa8:	e0bff817 	ldw	r2,-32(fp)
    5aac:	100b883a 	mov	r5,r2
    5ab0:	e13ffc17 	ldw	r4,-16(fp)
    5ab4:	00058a80 	call	58a8 <alt_ic_irq_enable>
    5ab8:	00000406 	br	5acc <alt_iic_isr_register+0xc4>
    5abc:	e0bff817 	ldw	r2,-32(fp)
    5ac0:	100b883a 	mov	r5,r2
    5ac4:	e13ffc17 	ldw	r4,-16(fp)
    5ac8:	00059300 	call	5930 <alt_ic_irq_disable>
    5acc:	e0bff715 	stw	r2,-36(fp)
    5ad0:	e0bffa17 	ldw	r2,-24(fp)
    5ad4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ad8:	e0bff917 	ldw	r2,-28(fp)
    5adc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    5ae0:	e0bff717 	ldw	r2,-36(fp)
}
    5ae4:	e037883a 	mov	sp,fp
    5ae8:	dfc00117 	ldw	ra,4(sp)
    5aec:	df000017 	ldw	fp,0(sp)
    5af0:	dec00204 	addi	sp,sp,8
    5af4:	f800283a 	ret

00005af8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5af8:	defff804 	addi	sp,sp,-32
    5afc:	dfc00715 	stw	ra,28(sp)
    5b00:	df000615 	stw	fp,24(sp)
    5b04:	dc000515 	stw	r16,20(sp)
    5b08:	df000604 	addi	fp,sp,24
    5b0c:	e13ffb15 	stw	r4,-20(fp)
    5b10:	e17ffc15 	stw	r5,-16(fp)
    5b14:	e1bffd15 	stw	r6,-12(fp)
    5b18:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    5b1c:	e1bffe17 	ldw	r6,-8(fp)
    5b20:	e17ffd17 	ldw	r5,-12(fp)
    5b24:	e13ffc17 	ldw	r4,-16(fp)
    5b28:	0005d800 	call	5d80 <open>
    5b2c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    5b30:	e0bffa17 	ldw	r2,-24(fp)
    5b34:	10002216 	blt	r2,zero,5bc0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    5b38:	04000034 	movhi	r16,0
    5b3c:	841d2404 	addi	r16,r16,29840
    5b40:	e0bffa17 	ldw	r2,-24(fp)
    5b44:	01400304 	movi	r5,12
    5b48:	1009883a 	mov	r4,r2
    5b4c:	00007580 	call	758 <__mulsi3>
    5b50:	8085883a 	add	r2,r16,r2
    5b54:	10c00017 	ldw	r3,0(r2)
    5b58:	e0bffb17 	ldw	r2,-20(fp)
    5b5c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    5b60:	04000034 	movhi	r16,0
    5b64:	841d2404 	addi	r16,r16,29840
    5b68:	e0bffa17 	ldw	r2,-24(fp)
    5b6c:	01400304 	movi	r5,12
    5b70:	1009883a 	mov	r4,r2
    5b74:	00007580 	call	758 <__mulsi3>
    5b78:	8085883a 	add	r2,r16,r2
    5b7c:	10800104 	addi	r2,r2,4
    5b80:	10c00017 	ldw	r3,0(r2)
    5b84:	e0bffb17 	ldw	r2,-20(fp)
    5b88:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5b8c:	04000034 	movhi	r16,0
    5b90:	841d2404 	addi	r16,r16,29840
    5b94:	e0bffa17 	ldw	r2,-24(fp)
    5b98:	01400304 	movi	r5,12
    5b9c:	1009883a 	mov	r4,r2
    5ba0:	00007580 	call	758 <__mulsi3>
    5ba4:	8085883a 	add	r2,r16,r2
    5ba8:	10800204 	addi	r2,r2,8
    5bac:	10c00017 	ldw	r3,0(r2)
    5bb0:	e0bffb17 	ldw	r2,-20(fp)
    5bb4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    5bb8:	e13ffa17 	ldw	r4,-24(fp)
    5bbc:	0003efc0 	call	3efc <alt_release_fd>
  }
} 
    5bc0:	0001883a 	nop
    5bc4:	e6ffff04 	addi	sp,fp,-4
    5bc8:	dfc00217 	ldw	ra,8(sp)
    5bcc:	df000117 	ldw	fp,4(sp)
    5bd0:	dc000017 	ldw	r16,0(sp)
    5bd4:	dec00304 	addi	sp,sp,12
    5bd8:	f800283a 	ret

00005bdc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5bdc:	defffb04 	addi	sp,sp,-20
    5be0:	dfc00415 	stw	ra,16(sp)
    5be4:	df000315 	stw	fp,12(sp)
    5be8:	df000304 	addi	fp,sp,12
    5bec:	e13ffd15 	stw	r4,-12(fp)
    5bf0:	e17ffe15 	stw	r5,-8(fp)
    5bf4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5bf8:	01c07fc4 	movi	r7,511
    5bfc:	01800044 	movi	r6,1
    5c00:	e17ffd17 	ldw	r5,-12(fp)
    5c04:	01000034 	movhi	r4,0
    5c08:	211d2704 	addi	r4,r4,29852
    5c0c:	0005af80 	call	5af8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5c10:	01c07fc4 	movi	r7,511
    5c14:	000d883a 	mov	r6,zero
    5c18:	e17ffe17 	ldw	r5,-8(fp)
    5c1c:	01000034 	movhi	r4,0
    5c20:	211d2404 	addi	r4,r4,29840
    5c24:	0005af80 	call	5af8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5c28:	01c07fc4 	movi	r7,511
    5c2c:	01800044 	movi	r6,1
    5c30:	e17fff17 	ldw	r5,-4(fp)
    5c34:	01000034 	movhi	r4,0
    5c38:	211d2a04 	addi	r4,r4,29864
    5c3c:	0005af80 	call	5af8 <alt_open_fd>
}  
    5c40:	0001883a 	nop
    5c44:	e037883a 	mov	sp,fp
    5c48:	dfc00117 	ldw	ra,4(sp)
    5c4c:	df000017 	ldw	fp,0(sp)
    5c50:	dec00204 	addi	sp,sp,8
    5c54:	f800283a 	ret

00005c58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5c58:	defffe04 	addi	sp,sp,-8
    5c5c:	dfc00115 	stw	ra,4(sp)
    5c60:	df000015 	stw	fp,0(sp)
    5c64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5c68:	d0a00b17 	ldw	r2,-32724(gp)
    5c6c:	10000326 	beq	r2,zero,5c7c <alt_get_errno+0x24>
    5c70:	d0a00b17 	ldw	r2,-32724(gp)
    5c74:	103ee83a 	callr	r2
    5c78:	00000106 	br	5c80 <alt_get_errno+0x28>
    5c7c:	d0a6c004 	addi	r2,gp,-25856
}
    5c80:	e037883a 	mov	sp,fp
    5c84:	dfc00117 	ldw	ra,4(sp)
    5c88:	df000017 	ldw	fp,0(sp)
    5c8c:	dec00204 	addi	sp,sp,8
    5c90:	f800283a 	ret

00005c94 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    5c94:	defffb04 	addi	sp,sp,-20
    5c98:	dfc00415 	stw	ra,16(sp)
    5c9c:	df000315 	stw	fp,12(sp)
    5ca0:	dc000215 	stw	r16,8(sp)
    5ca4:	df000304 	addi	fp,sp,12
    5ca8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5cac:	e0bffe17 	ldw	r2,-8(fp)
    5cb0:	10800217 	ldw	r2,8(r2)
    5cb4:	10d00034 	orhi	r3,r2,16384
    5cb8:	e0bffe17 	ldw	r2,-8(fp)
    5cbc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5cc0:	e03ffd15 	stw	zero,-12(fp)
    5cc4:	00002306 	br	5d54 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5cc8:	04000034 	movhi	r16,0
    5ccc:	841d2404 	addi	r16,r16,29840
    5cd0:	e0bffd17 	ldw	r2,-12(fp)
    5cd4:	01400304 	movi	r5,12
    5cd8:	1009883a 	mov	r4,r2
    5cdc:	00007580 	call	758 <__mulsi3>
    5ce0:	8085883a 	add	r2,r16,r2
    5ce4:	10c00017 	ldw	r3,0(r2)
    5ce8:	e0bffe17 	ldw	r2,-8(fp)
    5cec:	10800017 	ldw	r2,0(r2)
    5cf0:	1880151e 	bne	r3,r2,5d48 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5cf4:	04000034 	movhi	r16,0
    5cf8:	841d2404 	addi	r16,r16,29840
    5cfc:	e0bffd17 	ldw	r2,-12(fp)
    5d00:	01400304 	movi	r5,12
    5d04:	1009883a 	mov	r4,r2
    5d08:	00007580 	call	758 <__mulsi3>
    5d0c:	8085883a 	add	r2,r16,r2
    5d10:	10800204 	addi	r2,r2,8
    5d14:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5d18:	10000b0e 	bge	r2,zero,5d48 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    5d1c:	01400304 	movi	r5,12
    5d20:	e13ffd17 	ldw	r4,-12(fp)
    5d24:	00007580 	call	758 <__mulsi3>
    5d28:	1007883a 	mov	r3,r2
    5d2c:	00800034 	movhi	r2,0
    5d30:	109d2404 	addi	r2,r2,29840
    5d34:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5d38:	e0bffe17 	ldw	r2,-8(fp)
    5d3c:	18800226 	beq	r3,r2,5d48 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    5d40:	00bffcc4 	movi	r2,-13
    5d44:	00000806 	br	5d68 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5d48:	e0bffd17 	ldw	r2,-12(fp)
    5d4c:	10800044 	addi	r2,r2,1
    5d50:	e0bffd15 	stw	r2,-12(fp)
    5d54:	d0a00a17 	ldw	r2,-32728(gp)
    5d58:	1007883a 	mov	r3,r2
    5d5c:	e0bffd17 	ldw	r2,-12(fp)
    5d60:	18bfd92e 	bgeu	r3,r2,5cc8 <__alt_mem_Onchip_SRAM+0xf8005cc8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    5d64:	0005883a 	mov	r2,zero
}
    5d68:	e6ffff04 	addi	sp,fp,-4
    5d6c:	dfc00217 	ldw	ra,8(sp)
    5d70:	df000117 	ldw	fp,4(sp)
    5d74:	dc000017 	ldw	r16,0(sp)
    5d78:	dec00304 	addi	sp,sp,12
    5d7c:	f800283a 	ret

00005d80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5d80:	defff604 	addi	sp,sp,-40
    5d84:	dfc00915 	stw	ra,36(sp)
    5d88:	df000815 	stw	fp,32(sp)
    5d8c:	df000804 	addi	fp,sp,32
    5d90:	e13ffd15 	stw	r4,-12(fp)
    5d94:	e17ffe15 	stw	r5,-8(fp)
    5d98:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    5d9c:	00bfffc4 	movi	r2,-1
    5da0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    5da4:	00bffb44 	movi	r2,-19
    5da8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    5dac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    5db0:	d1600804 	addi	r5,gp,-32736
    5db4:	e13ffd17 	ldw	r4,-12(fp)
    5db8:	00057a80 	call	57a8 <alt_find_dev>
    5dbc:	e0bff815 	stw	r2,-32(fp)
    5dc0:	e0bff817 	ldw	r2,-32(fp)
    5dc4:	1000051e 	bne	r2,zero,5ddc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    5dc8:	e13ffd17 	ldw	r4,-12(fp)
    5dcc:	0005f000 	call	5f00 <alt_find_file>
    5dd0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    5dd4:	00800044 	movi	r2,1
    5dd8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5ddc:	e0bff817 	ldw	r2,-32(fp)
    5de0:	10002b26 	beq	r2,zero,5e90 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    5de4:	e13ff817 	ldw	r4,-32(fp)
    5de8:	00060080 	call	6008 <alt_get_fd>
    5dec:	e0bff915 	stw	r2,-28(fp)
    5df0:	e0bff917 	ldw	r2,-28(fp)
    5df4:	1000030e 	bge	r2,zero,5e04 <open+0x84>
    {
      status = index;
    5df8:	e0bff917 	ldw	r2,-28(fp)
    5dfc:	e0bffa15 	stw	r2,-24(fp)
    5e00:	00002506 	br	5e98 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    5e04:	01400304 	movi	r5,12
    5e08:	e13ff917 	ldw	r4,-28(fp)
    5e0c:	00007580 	call	758 <__mulsi3>
    5e10:	1007883a 	mov	r3,r2
    5e14:	00800034 	movhi	r2,0
    5e18:	109d2404 	addi	r2,r2,29840
    5e1c:	1885883a 	add	r2,r3,r2
    5e20:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5e24:	e0fffe17 	ldw	r3,-8(fp)
    5e28:	00900034 	movhi	r2,16384
    5e2c:	10bfffc4 	addi	r2,r2,-1
    5e30:	1886703a 	and	r3,r3,r2
    5e34:	e0bffc17 	ldw	r2,-16(fp)
    5e38:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5e3c:	e0bffb17 	ldw	r2,-20(fp)
    5e40:	1000051e 	bne	r2,zero,5e58 <open+0xd8>
    5e44:	e13ffc17 	ldw	r4,-16(fp)
    5e48:	0005c940 	call	5c94 <alt_file_locked>
    5e4c:	e0bffa15 	stw	r2,-24(fp)
    5e50:	e0bffa17 	ldw	r2,-24(fp)
    5e54:	10001016 	blt	r2,zero,5e98 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5e58:	e0bff817 	ldw	r2,-32(fp)
    5e5c:	10800317 	ldw	r2,12(r2)
    5e60:	10000826 	beq	r2,zero,5e84 <open+0x104>
    5e64:	e0bff817 	ldw	r2,-32(fp)
    5e68:	10800317 	ldw	r2,12(r2)
    5e6c:	e1ffff17 	ldw	r7,-4(fp)
    5e70:	e1bffe17 	ldw	r6,-8(fp)
    5e74:	e17ffd17 	ldw	r5,-12(fp)
    5e78:	e13ffc17 	ldw	r4,-16(fp)
    5e7c:	103ee83a 	callr	r2
    5e80:	00000106 	br	5e88 <open+0x108>
    5e84:	0005883a 	mov	r2,zero
    5e88:	e0bffa15 	stw	r2,-24(fp)
    5e8c:	00000206 	br	5e98 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    5e90:	00bffb44 	movi	r2,-19
    5e94:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5e98:	e0bffa17 	ldw	r2,-24(fp)
    5e9c:	1000090e 	bge	r2,zero,5ec4 <open+0x144>
  {
    alt_release_fd (index);  
    5ea0:	e13ff917 	ldw	r4,-28(fp)
    5ea4:	0003efc0 	call	3efc <alt_release_fd>
    ALT_ERRNO = -status;
    5ea8:	0005c580 	call	5c58 <alt_get_errno>
    5eac:	1007883a 	mov	r3,r2
    5eb0:	e0bffa17 	ldw	r2,-24(fp)
    5eb4:	0085c83a 	sub	r2,zero,r2
    5eb8:	18800015 	stw	r2,0(r3)
    return -1;
    5ebc:	00bfffc4 	movi	r2,-1
    5ec0:	00000106 	br	5ec8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    5ec4:	e0bff917 	ldw	r2,-28(fp)
}
    5ec8:	e037883a 	mov	sp,fp
    5ecc:	dfc00117 	ldw	ra,4(sp)
    5ed0:	df000017 	ldw	fp,0(sp)
    5ed4:	dec00204 	addi	sp,sp,8
    5ed8:	f800283a 	ret

00005edc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    5edc:	deffff04 	addi	sp,sp,-4
    5ee0:	df000015 	stw	fp,0(sp)
    5ee4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    5ee8:	000170fa 	wrctl	ienable,zero
}
    5eec:	0001883a 	nop
    5ef0:	e037883a 	mov	sp,fp
    5ef4:	df000017 	ldw	fp,0(sp)
    5ef8:	dec00104 	addi	sp,sp,4
    5efc:	f800283a 	ret

00005f00 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5f00:	defffb04 	addi	sp,sp,-20
    5f04:	dfc00415 	stw	ra,16(sp)
    5f08:	df000315 	stw	fp,12(sp)
    5f0c:	df000304 	addi	fp,sp,12
    5f10:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5f14:	d0a00617 	ldw	r2,-32744(gp)
    5f18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5f1c:	00003106 	br	5fe4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    5f20:	e0bffd17 	ldw	r2,-12(fp)
    5f24:	10800217 	ldw	r2,8(r2)
    5f28:	1009883a 	mov	r4,r2
    5f2c:	00008d00 	call	8d0 <strlen>
    5f30:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    5f34:	e0bffd17 	ldw	r2,-12(fp)
    5f38:	10c00217 	ldw	r3,8(r2)
    5f3c:	e0bffe17 	ldw	r2,-8(fp)
    5f40:	10bfffc4 	addi	r2,r2,-1
    5f44:	1885883a 	add	r2,r3,r2
    5f48:	10800003 	ldbu	r2,0(r2)
    5f4c:	10803fcc 	andi	r2,r2,255
    5f50:	1080201c 	xori	r2,r2,128
    5f54:	10bfe004 	addi	r2,r2,-128
    5f58:	10800bd8 	cmpnei	r2,r2,47
    5f5c:	1000031e 	bne	r2,zero,5f6c <alt_find_file+0x6c>
    {
      len -= 1;
    5f60:	e0bffe17 	ldw	r2,-8(fp)
    5f64:	10bfffc4 	addi	r2,r2,-1
    5f68:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5f6c:	e0bffe17 	ldw	r2,-8(fp)
    5f70:	e0ffff17 	ldw	r3,-4(fp)
    5f74:	1885883a 	add	r2,r3,r2
    5f78:	10800003 	ldbu	r2,0(r2)
    5f7c:	10803fcc 	andi	r2,r2,255
    5f80:	1080201c 	xori	r2,r2,128
    5f84:	10bfe004 	addi	r2,r2,-128
    5f88:	10800be0 	cmpeqi	r2,r2,47
    5f8c:	1000081e 	bne	r2,zero,5fb0 <alt_find_file+0xb0>
    5f90:	e0bffe17 	ldw	r2,-8(fp)
    5f94:	e0ffff17 	ldw	r3,-4(fp)
    5f98:	1885883a 	add	r2,r3,r2
    5f9c:	10800003 	ldbu	r2,0(r2)
    5fa0:	10803fcc 	andi	r2,r2,255
    5fa4:	1080201c 	xori	r2,r2,128
    5fa8:	10bfe004 	addi	r2,r2,-128
    5fac:	10000a1e 	bne	r2,zero,5fd8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    5fb0:	e0bffd17 	ldw	r2,-12(fp)
    5fb4:	10800217 	ldw	r2,8(r2)
    5fb8:	e0fffe17 	ldw	r3,-8(fp)
    5fbc:	180d883a 	mov	r6,r3
    5fc0:	e17fff17 	ldw	r5,-4(fp)
    5fc4:	1009883a 	mov	r4,r2
    5fc8:	00061b40 	call	61b4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5fcc:	1000021e 	bne	r2,zero,5fd8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    5fd0:	e0bffd17 	ldw	r2,-12(fp)
    5fd4:	00000706 	br	5ff4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    5fd8:	e0bffd17 	ldw	r2,-12(fp)
    5fdc:	10800017 	ldw	r2,0(r2)
    5fe0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5fe4:	e0fffd17 	ldw	r3,-12(fp)
    5fe8:	d0a00604 	addi	r2,gp,-32744
    5fec:	18bfcc1e 	bne	r3,r2,5f20 <__alt_mem_Onchip_SRAM+0xf8005f20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    5ff0:	0005883a 	mov	r2,zero
}
    5ff4:	e037883a 	mov	sp,fp
    5ff8:	dfc00117 	ldw	ra,4(sp)
    5ffc:	df000017 	ldw	fp,0(sp)
    6000:	dec00204 	addi	sp,sp,8
    6004:	f800283a 	ret

00006008 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6008:	defffa04 	addi	sp,sp,-24
    600c:	dfc00515 	stw	ra,20(sp)
    6010:	df000415 	stw	fp,16(sp)
    6014:	dc000315 	stw	r16,12(sp)
    6018:	df000404 	addi	fp,sp,16
    601c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    6020:	00bffa04 	movi	r2,-24
    6024:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6028:	e03ffc15 	stw	zero,-16(fp)
    602c:	00001d06 	br	60a4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    6030:	04000034 	movhi	r16,0
    6034:	841d2404 	addi	r16,r16,29840
    6038:	e0bffc17 	ldw	r2,-16(fp)
    603c:	01400304 	movi	r5,12
    6040:	1009883a 	mov	r4,r2
    6044:	00007580 	call	758 <__mulsi3>
    6048:	8085883a 	add	r2,r16,r2
    604c:	10800017 	ldw	r2,0(r2)
    6050:	1000111e 	bne	r2,zero,6098 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    6054:	04000034 	movhi	r16,0
    6058:	841d2404 	addi	r16,r16,29840
    605c:	e0bffc17 	ldw	r2,-16(fp)
    6060:	01400304 	movi	r5,12
    6064:	1009883a 	mov	r4,r2
    6068:	00007580 	call	758 <__mulsi3>
    606c:	8085883a 	add	r2,r16,r2
    6070:	e0fffe17 	ldw	r3,-8(fp)
    6074:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    6078:	d0e00a17 	ldw	r3,-32728(gp)
    607c:	e0bffc17 	ldw	r2,-16(fp)
    6080:	1880020e 	bge	r3,r2,608c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    6084:	e0bffc17 	ldw	r2,-16(fp)
    6088:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    608c:	e0bffc17 	ldw	r2,-16(fp)
    6090:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    6094:	00000606 	br	60b0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6098:	e0bffc17 	ldw	r2,-16(fp)
    609c:	10800044 	addi	r2,r2,1
    60a0:	e0bffc15 	stw	r2,-16(fp)
    60a4:	e0bffc17 	ldw	r2,-16(fp)
    60a8:	10800810 	cmplti	r2,r2,32
    60ac:	103fe01e 	bne	r2,zero,6030 <__alt_mem_Onchip_SRAM+0xf8006030>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    60b0:	e0bffd17 	ldw	r2,-12(fp)
}
    60b4:	e6ffff04 	addi	sp,fp,-4
    60b8:	dfc00217 	ldw	ra,8(sp)
    60bc:	df000117 	ldw	fp,4(sp)
    60c0:	dc000017 	ldw	r16,0(sp)
    60c4:	dec00304 	addi	sp,sp,12
    60c8:	f800283a 	ret

000060cc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    60cc:	defffe04 	addi	sp,sp,-8
    60d0:	df000115 	stw	fp,4(sp)
    60d4:	df000104 	addi	fp,sp,4
    60d8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    60dc:	e0bfff17 	ldw	r2,-4(fp)
    60e0:	10bffe84 	addi	r2,r2,-6
    60e4:	10c00428 	cmpgeui	r3,r2,16
    60e8:	18001a1e 	bne	r3,zero,6154 <alt_exception_cause_generated_bad_addr+0x88>
    60ec:	100690ba 	slli	r3,r2,2
    60f0:	00800034 	movhi	r2,0
    60f4:	10984104 	addi	r2,r2,24836
    60f8:	1885883a 	add	r2,r3,r2
    60fc:	10800017 	ldw	r2,0(r2)
    6100:	1000683a 	jmp	r2
    6104:	00006144 	movi	zero,389
    6108:	00006144 	movi	zero,389
    610c:	00006154 	movui	zero,389
    6110:	00006154 	movui	zero,389
    6114:	00006154 	movui	zero,389
    6118:	00006144 	movi	zero,389
    611c:	0000614c 	andi	zero,zero,389
    6120:	00006154 	movui	zero,389
    6124:	00006144 	movi	zero,389
    6128:	00006144 	movi	zero,389
    612c:	00006154 	movui	zero,389
    6130:	00006144 	movi	zero,389
    6134:	0000614c 	andi	zero,zero,389
    6138:	00006154 	movui	zero,389
    613c:	00006154 	movui	zero,389
    6140:	00006144 	movi	zero,389
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    6144:	00800044 	movi	r2,1
    6148:	00000306 	br	6158 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    614c:	0005883a 	mov	r2,zero
    6150:	00000106 	br	6158 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    6154:	0005883a 	mov	r2,zero
  }
}
    6158:	e037883a 	mov	sp,fp
    615c:	df000017 	ldw	fp,0(sp)
    6160:	dec00104 	addi	sp,sp,4
    6164:	f800283a 	ret

00006168 <atexit>:
    6168:	200b883a 	mov	r5,r4
    616c:	000f883a 	mov	r7,zero
    6170:	000d883a 	mov	r6,zero
    6174:	0009883a 	mov	r4,zero
    6178:	00062301 	jmpi	6230 <__register_exitproc>

0000617c <exit>:
    617c:	defffe04 	addi	sp,sp,-8
    6180:	000b883a 	mov	r5,zero
    6184:	dc000015 	stw	r16,0(sp)
    6188:	dfc00115 	stw	ra,4(sp)
    618c:	2021883a 	mov	r16,r4
    6190:	00063480 	call	6348 <__call_exitprocs>
    6194:	00800074 	movhi	r2,1
    6198:	10a1ad04 	addi	r2,r2,-31052
    619c:	11000017 	ldw	r4,0(r2)
    61a0:	20800f17 	ldw	r2,60(r4)
    61a4:	10000126 	beq	r2,zero,61ac <exit+0x30>
    61a8:	103ee83a 	callr	r2
    61ac:	8009883a 	mov	r4,r16
    61b0:	0006a8c0 	call	6a8c <_exit>

000061b4 <memcmp>:
    61b4:	01c000c4 	movi	r7,3
    61b8:	3980192e 	bgeu	r7,r6,6220 <memcmp+0x6c>
    61bc:	2144b03a 	or	r2,r4,r5
    61c0:	11c4703a 	and	r2,r2,r7
    61c4:	10000f26 	beq	r2,zero,6204 <memcmp+0x50>
    61c8:	20800003 	ldbu	r2,0(r4)
    61cc:	28c00003 	ldbu	r3,0(r5)
    61d0:	10c0151e 	bne	r2,r3,6228 <memcmp+0x74>
    61d4:	31bfff84 	addi	r6,r6,-2
    61d8:	01ffffc4 	movi	r7,-1
    61dc:	00000406 	br	61f0 <memcmp+0x3c>
    61e0:	20800003 	ldbu	r2,0(r4)
    61e4:	28c00003 	ldbu	r3,0(r5)
    61e8:	31bfffc4 	addi	r6,r6,-1
    61ec:	10c00e1e 	bne	r2,r3,6228 <memcmp+0x74>
    61f0:	21000044 	addi	r4,r4,1
    61f4:	29400044 	addi	r5,r5,1
    61f8:	31fff91e 	bne	r6,r7,61e0 <__alt_mem_Onchip_SRAM+0xf80061e0>
    61fc:	0005883a 	mov	r2,zero
    6200:	f800283a 	ret
    6204:	20c00017 	ldw	r3,0(r4)
    6208:	28800017 	ldw	r2,0(r5)
    620c:	18bfee1e 	bne	r3,r2,61c8 <__alt_mem_Onchip_SRAM+0xf80061c8>
    6210:	31bfff04 	addi	r6,r6,-4
    6214:	21000104 	addi	r4,r4,4
    6218:	29400104 	addi	r5,r5,4
    621c:	39bff936 	bltu	r7,r6,6204 <__alt_mem_Onchip_SRAM+0xf8006204>
    6220:	303fe91e 	bne	r6,zero,61c8 <__alt_mem_Onchip_SRAM+0xf80061c8>
    6224:	003ff506 	br	61fc <__alt_mem_Onchip_SRAM+0xf80061fc>
    6228:	10c5c83a 	sub	r2,r2,r3
    622c:	f800283a 	ret

00006230 <__register_exitproc>:
    6230:	defffa04 	addi	sp,sp,-24
    6234:	dc000315 	stw	r16,12(sp)
    6238:	04000074 	movhi	r16,1
    623c:	8421ad04 	addi	r16,r16,-31052
    6240:	80c00017 	ldw	r3,0(r16)
    6244:	dc400415 	stw	r17,16(sp)
    6248:	dfc00515 	stw	ra,20(sp)
    624c:	18805217 	ldw	r2,328(r3)
    6250:	2023883a 	mov	r17,r4
    6254:	10003726 	beq	r2,zero,6334 <__register_exitproc+0x104>
    6258:	10c00117 	ldw	r3,4(r2)
    625c:	010007c4 	movi	r4,31
    6260:	20c00e16 	blt	r4,r3,629c <__register_exitproc+0x6c>
    6264:	1a000044 	addi	r8,r3,1
    6268:	8800221e 	bne	r17,zero,62f4 <__register_exitproc+0xc4>
    626c:	18c00084 	addi	r3,r3,2
    6270:	18c7883a 	add	r3,r3,r3
    6274:	18c7883a 	add	r3,r3,r3
    6278:	12000115 	stw	r8,4(r2)
    627c:	10c7883a 	add	r3,r2,r3
    6280:	19400015 	stw	r5,0(r3)
    6284:	0005883a 	mov	r2,zero
    6288:	dfc00517 	ldw	ra,20(sp)
    628c:	dc400417 	ldw	r17,16(sp)
    6290:	dc000317 	ldw	r16,12(sp)
    6294:	dec00604 	addi	sp,sp,24
    6298:	f800283a 	ret
    629c:	00800034 	movhi	r2,0
    62a0:	10800004 	addi	r2,r2,0
    62a4:	10002626 	beq	r2,zero,6340 <__register_exitproc+0x110>
    62a8:	01006404 	movi	r4,400
    62ac:	d9400015 	stw	r5,0(sp)
    62b0:	d9800115 	stw	r6,4(sp)
    62b4:	d9c00215 	stw	r7,8(sp)
    62b8:	00000000 	call	0 <__alt_mem_SDRAM>
    62bc:	d9400017 	ldw	r5,0(sp)
    62c0:	d9800117 	ldw	r6,4(sp)
    62c4:	d9c00217 	ldw	r7,8(sp)
    62c8:	10001d26 	beq	r2,zero,6340 <__register_exitproc+0x110>
    62cc:	81000017 	ldw	r4,0(r16)
    62d0:	10000115 	stw	zero,4(r2)
    62d4:	02000044 	movi	r8,1
    62d8:	22405217 	ldw	r9,328(r4)
    62dc:	0007883a 	mov	r3,zero
    62e0:	12400015 	stw	r9,0(r2)
    62e4:	20805215 	stw	r2,328(r4)
    62e8:	10006215 	stw	zero,392(r2)
    62ec:	10006315 	stw	zero,396(r2)
    62f0:	883fde26 	beq	r17,zero,626c <__alt_mem_Onchip_SRAM+0xf800626c>
    62f4:	18c9883a 	add	r4,r3,r3
    62f8:	2109883a 	add	r4,r4,r4
    62fc:	1109883a 	add	r4,r2,r4
    6300:	21802215 	stw	r6,136(r4)
    6304:	01800044 	movi	r6,1
    6308:	12406217 	ldw	r9,392(r2)
    630c:	30cc983a 	sll	r6,r6,r3
    6310:	4992b03a 	or	r9,r9,r6
    6314:	12406215 	stw	r9,392(r2)
    6318:	21c04215 	stw	r7,264(r4)
    631c:	01000084 	movi	r4,2
    6320:	893fd21e 	bne	r17,r4,626c <__alt_mem_Onchip_SRAM+0xf800626c>
    6324:	11006317 	ldw	r4,396(r2)
    6328:	218cb03a 	or	r6,r4,r6
    632c:	11806315 	stw	r6,396(r2)
    6330:	003fce06 	br	626c <__alt_mem_Onchip_SRAM+0xf800626c>
    6334:	18805304 	addi	r2,r3,332
    6338:	18805215 	stw	r2,328(r3)
    633c:	003fc606 	br	6258 <__alt_mem_Onchip_SRAM+0xf8006258>
    6340:	00bfffc4 	movi	r2,-1
    6344:	003fd006 	br	6288 <__alt_mem_Onchip_SRAM+0xf8006288>

00006348 <__call_exitprocs>:
    6348:	defff504 	addi	sp,sp,-44
    634c:	df000915 	stw	fp,36(sp)
    6350:	dd400615 	stw	r21,24(sp)
    6354:	dc800315 	stw	r18,12(sp)
    6358:	dfc00a15 	stw	ra,40(sp)
    635c:	ddc00815 	stw	r23,32(sp)
    6360:	dd800715 	stw	r22,28(sp)
    6364:	dd000515 	stw	r20,20(sp)
    6368:	dcc00415 	stw	r19,16(sp)
    636c:	dc400215 	stw	r17,8(sp)
    6370:	dc000115 	stw	r16,4(sp)
    6374:	d9000015 	stw	r4,0(sp)
    6378:	2839883a 	mov	fp,r5
    637c:	04800044 	movi	r18,1
    6380:	057fffc4 	movi	r21,-1
    6384:	00800074 	movhi	r2,1
    6388:	10a1ad04 	addi	r2,r2,-31052
    638c:	12000017 	ldw	r8,0(r2)
    6390:	45005217 	ldw	r20,328(r8)
    6394:	44c05204 	addi	r19,r8,328
    6398:	a0001c26 	beq	r20,zero,640c <__call_exitprocs+0xc4>
    639c:	a0800117 	ldw	r2,4(r20)
    63a0:	15ffffc4 	addi	r23,r2,-1
    63a4:	b8000d16 	blt	r23,zero,63dc <__call_exitprocs+0x94>
    63a8:	14000044 	addi	r16,r2,1
    63ac:	8421883a 	add	r16,r16,r16
    63b0:	8421883a 	add	r16,r16,r16
    63b4:	84402004 	addi	r17,r16,128
    63b8:	a463883a 	add	r17,r20,r17
    63bc:	a421883a 	add	r16,r20,r16
    63c0:	e0001e26 	beq	fp,zero,643c <__call_exitprocs+0xf4>
    63c4:	80804017 	ldw	r2,256(r16)
    63c8:	e0801c26 	beq	fp,r2,643c <__call_exitprocs+0xf4>
    63cc:	bdffffc4 	addi	r23,r23,-1
    63d0:	843fff04 	addi	r16,r16,-4
    63d4:	8c7fff04 	addi	r17,r17,-4
    63d8:	bd7ff91e 	bne	r23,r21,63c0 <__alt_mem_Onchip_SRAM+0xf80063c0>
    63dc:	00800034 	movhi	r2,0
    63e0:	10800004 	addi	r2,r2,0
    63e4:	10000926 	beq	r2,zero,640c <__call_exitprocs+0xc4>
    63e8:	a0800117 	ldw	r2,4(r20)
    63ec:	1000301e 	bne	r2,zero,64b0 <__call_exitprocs+0x168>
    63f0:	a0800017 	ldw	r2,0(r20)
    63f4:	10003226 	beq	r2,zero,64c0 <__call_exitprocs+0x178>
    63f8:	a009883a 	mov	r4,r20
    63fc:	98800015 	stw	r2,0(r19)
    6400:	00000000 	call	0 <__alt_mem_SDRAM>
    6404:	9d000017 	ldw	r20,0(r19)
    6408:	a03fe41e 	bne	r20,zero,639c <__alt_mem_Onchip_SRAM+0xf800639c>
    640c:	dfc00a17 	ldw	ra,40(sp)
    6410:	df000917 	ldw	fp,36(sp)
    6414:	ddc00817 	ldw	r23,32(sp)
    6418:	dd800717 	ldw	r22,28(sp)
    641c:	dd400617 	ldw	r21,24(sp)
    6420:	dd000517 	ldw	r20,20(sp)
    6424:	dcc00417 	ldw	r19,16(sp)
    6428:	dc800317 	ldw	r18,12(sp)
    642c:	dc400217 	ldw	r17,8(sp)
    6430:	dc000117 	ldw	r16,4(sp)
    6434:	dec00b04 	addi	sp,sp,44
    6438:	f800283a 	ret
    643c:	a0800117 	ldw	r2,4(r20)
    6440:	80c00017 	ldw	r3,0(r16)
    6444:	10bfffc4 	addi	r2,r2,-1
    6448:	15c01426 	beq	r2,r23,649c <__call_exitprocs+0x154>
    644c:	80000015 	stw	zero,0(r16)
    6450:	183fde26 	beq	r3,zero,63cc <__alt_mem_Onchip_SRAM+0xf80063cc>
    6454:	95c8983a 	sll	r4,r18,r23
    6458:	a0806217 	ldw	r2,392(r20)
    645c:	a5800117 	ldw	r22,4(r20)
    6460:	2084703a 	and	r2,r4,r2
    6464:	10000b26 	beq	r2,zero,6494 <__call_exitprocs+0x14c>
    6468:	a0806317 	ldw	r2,396(r20)
    646c:	2088703a 	and	r4,r4,r2
    6470:	20000c1e 	bne	r4,zero,64a4 <__call_exitprocs+0x15c>
    6474:	89400017 	ldw	r5,0(r17)
    6478:	d9000017 	ldw	r4,0(sp)
    647c:	183ee83a 	callr	r3
    6480:	a0800117 	ldw	r2,4(r20)
    6484:	15bfbf1e 	bne	r2,r22,6384 <__alt_mem_Onchip_SRAM+0xf8006384>
    6488:	98800017 	ldw	r2,0(r19)
    648c:	153fcf26 	beq	r2,r20,63cc <__alt_mem_Onchip_SRAM+0xf80063cc>
    6490:	003fbc06 	br	6384 <__alt_mem_Onchip_SRAM+0xf8006384>
    6494:	183ee83a 	callr	r3
    6498:	003ff906 	br	6480 <__alt_mem_Onchip_SRAM+0xf8006480>
    649c:	a5c00115 	stw	r23,4(r20)
    64a0:	003feb06 	br	6450 <__alt_mem_Onchip_SRAM+0xf8006450>
    64a4:	89000017 	ldw	r4,0(r17)
    64a8:	183ee83a 	callr	r3
    64ac:	003ff406 	br	6480 <__alt_mem_Onchip_SRAM+0xf8006480>
    64b0:	a0800017 	ldw	r2,0(r20)
    64b4:	a027883a 	mov	r19,r20
    64b8:	1029883a 	mov	r20,r2
    64bc:	003fb606 	br	6398 <__alt_mem_Onchip_SRAM+0xf8006398>
    64c0:	0005883a 	mov	r2,zero
    64c4:	003ffb06 	br	64b4 <__alt_mem_Onchip_SRAM+0xf80064b4>

000064c8 <__umoddi3>:
    64c8:	defff304 	addi	sp,sp,-52
    64cc:	df000b15 	stw	fp,44(sp)
    64d0:	dc400415 	stw	r17,16(sp)
    64d4:	dc000315 	stw	r16,12(sp)
    64d8:	dfc00c15 	stw	ra,48(sp)
    64dc:	ddc00a15 	stw	r23,40(sp)
    64e0:	dd800915 	stw	r22,36(sp)
    64e4:	dd400815 	stw	r21,32(sp)
    64e8:	dd000715 	stw	r20,28(sp)
    64ec:	dcc00615 	stw	r19,24(sp)
    64f0:	dc800515 	stw	r18,20(sp)
    64f4:	2021883a 	mov	r16,r4
    64f8:	2823883a 	mov	r17,r5
    64fc:	2839883a 	mov	fp,r5
    6500:	3800401e 	bne	r7,zero,6604 <__umoddi3+0x13c>
    6504:	3027883a 	mov	r19,r6
    6508:	2029883a 	mov	r20,r4
    650c:	2980552e 	bgeu	r5,r6,6664 <__umoddi3+0x19c>
    6510:	00bfffd4 	movui	r2,65535
    6514:	1180a236 	bltu	r2,r6,67a0 <__umoddi3+0x2d8>
    6518:	01003fc4 	movi	r4,255
    651c:	2189803a 	cmpltu	r4,r4,r6
    6520:	200890fa 	slli	r4,r4,3
    6524:	3104d83a 	srl	r2,r6,r4
    6528:	00c00034 	movhi	r3,0
    652c:	18dacf04 	addi	r3,r3,27452
    6530:	1885883a 	add	r2,r3,r2
    6534:	10c00003 	ldbu	r3,0(r2)
    6538:	00800804 	movi	r2,32
    653c:	1909883a 	add	r4,r3,r4
    6540:	1125c83a 	sub	r18,r2,r4
    6544:	90000526 	beq	r18,zero,655c <__umoddi3+0x94>
    6548:	8ca2983a 	sll	r17,r17,r18
    654c:	8108d83a 	srl	r4,r16,r4
    6550:	34a6983a 	sll	r19,r6,r18
    6554:	84a8983a 	sll	r20,r16,r18
    6558:	2478b03a 	or	fp,r4,r17
    655c:	982cd43a 	srli	r22,r19,16
    6560:	e009883a 	mov	r4,fp
    6564:	9dffffcc 	andi	r23,r19,65535
    6568:	b00b883a 	mov	r5,r22
    656c:	00007000 	call	700 <__umodsi3>
    6570:	b00b883a 	mov	r5,r22
    6574:	e009883a 	mov	r4,fp
    6578:	102b883a 	mov	r21,r2
    657c:	000069c0 	call	69c <__udivsi3>
    6580:	100b883a 	mov	r5,r2
    6584:	b809883a 	mov	r4,r23
    6588:	00007580 	call	758 <__mulsi3>
    658c:	a82a943a 	slli	r21,r21,16
    6590:	a006d43a 	srli	r3,r20,16
    6594:	1d46b03a 	or	r3,r3,r21
    6598:	1880032e 	bgeu	r3,r2,65a8 <__umoddi3+0xe0>
    659c:	1cc7883a 	add	r3,r3,r19
    65a0:	1cc00136 	bltu	r3,r19,65a8 <__umoddi3+0xe0>
    65a4:	18813136 	bltu	r3,r2,6a6c <__umoddi3+0x5a4>
    65a8:	18a1c83a 	sub	r16,r3,r2
    65ac:	b00b883a 	mov	r5,r22
    65b0:	8009883a 	mov	r4,r16
    65b4:	00007000 	call	700 <__umodsi3>
    65b8:	b00b883a 	mov	r5,r22
    65bc:	8009883a 	mov	r4,r16
    65c0:	1023883a 	mov	r17,r2
    65c4:	000069c0 	call	69c <__udivsi3>
    65c8:	100b883a 	mov	r5,r2
    65cc:	b809883a 	mov	r4,r23
    65d0:	8822943a 	slli	r17,r17,16
    65d4:	00007580 	call	758 <__mulsi3>
    65d8:	a0ffffcc 	andi	r3,r20,65535
    65dc:	1c46b03a 	or	r3,r3,r17
    65e0:	1880042e 	bgeu	r3,r2,65f4 <__umoddi3+0x12c>
    65e4:	1cc7883a 	add	r3,r3,r19
    65e8:	1cc00236 	bltu	r3,r19,65f4 <__umoddi3+0x12c>
    65ec:	1880012e 	bgeu	r3,r2,65f4 <__umoddi3+0x12c>
    65f0:	1cc7883a 	add	r3,r3,r19
    65f4:	1885c83a 	sub	r2,r3,r2
    65f8:	1484d83a 	srl	r2,r2,r18
    65fc:	0007883a 	mov	r3,zero
    6600:	00005306 	br	6750 <__umoddi3+0x288>
    6604:	29c05036 	bltu	r5,r7,6748 <__umoddi3+0x280>
    6608:	00bfffd4 	movui	r2,65535
    660c:	11c05c2e 	bgeu	r2,r7,6780 <__umoddi3+0x2b8>
    6610:	00804034 	movhi	r2,256
    6614:	10bfffc4 	addi	r2,r2,-1
    6618:	11c10636 	bltu	r2,r7,6a34 <__umoddi3+0x56c>
    661c:	01000404 	movi	r4,16
    6620:	3904d83a 	srl	r2,r7,r4
    6624:	00c00034 	movhi	r3,0
    6628:	18dacf04 	addi	r3,r3,27452
    662c:	1885883a 	add	r2,r3,r2
    6630:	14c00003 	ldbu	r19,0(r2)
    6634:	00c00804 	movi	r3,32
    6638:	9927883a 	add	r19,r19,r4
    663c:	1ce9c83a 	sub	r20,r3,r19
    6640:	a0005c1e 	bne	r20,zero,67b4 <__umoddi3+0x2ec>
    6644:	3c400136 	bltu	r7,r17,664c <__umoddi3+0x184>
    6648:	81810a36 	bltu	r16,r6,6a74 <__umoddi3+0x5ac>
    664c:	8185c83a 	sub	r2,r16,r6
    6650:	89e3c83a 	sub	r17,r17,r7
    6654:	8089803a 	cmpltu	r4,r16,r2
    6658:	8939c83a 	sub	fp,r17,r4
    665c:	e007883a 	mov	r3,fp
    6660:	00003b06 	br	6750 <__umoddi3+0x288>
    6664:	3000041e 	bne	r6,zero,6678 <__umoddi3+0x1b0>
    6668:	000b883a 	mov	r5,zero
    666c:	01000044 	movi	r4,1
    6670:	000069c0 	call	69c <__udivsi3>
    6674:	1027883a 	mov	r19,r2
    6678:	00bfffd4 	movui	r2,65535
    667c:	14c0442e 	bgeu	r2,r19,6790 <__umoddi3+0x2c8>
    6680:	00804034 	movhi	r2,256
    6684:	10bfffc4 	addi	r2,r2,-1
    6688:	14c0ec36 	bltu	r2,r19,6a3c <__umoddi3+0x574>
    668c:	00800404 	movi	r2,16
    6690:	9886d83a 	srl	r3,r19,r2
    6694:	01000034 	movhi	r4,0
    6698:	211acf04 	addi	r4,r4,27452
    669c:	20c7883a 	add	r3,r4,r3
    66a0:	18c00003 	ldbu	r3,0(r3)
    66a4:	1887883a 	add	r3,r3,r2
    66a8:	00800804 	movi	r2,32
    66ac:	10e5c83a 	sub	r18,r2,r3
    66b0:	9000ab1e 	bne	r18,zero,6960 <__umoddi3+0x498>
    66b4:	982cd43a 	srli	r22,r19,16
    66b8:	8ce3c83a 	sub	r17,r17,r19
    66bc:	9dffffcc 	andi	r23,r19,65535
    66c0:	b00b883a 	mov	r5,r22
    66c4:	8809883a 	mov	r4,r17
    66c8:	00007000 	call	700 <__umodsi3>
    66cc:	b00b883a 	mov	r5,r22
    66d0:	8809883a 	mov	r4,r17
    66d4:	102b883a 	mov	r21,r2
    66d8:	000069c0 	call	69c <__udivsi3>
    66dc:	b80b883a 	mov	r5,r23
    66e0:	1009883a 	mov	r4,r2
    66e4:	00007580 	call	758 <__mulsi3>
    66e8:	a82a943a 	slli	r21,r21,16
    66ec:	a006d43a 	srli	r3,r20,16
    66f0:	1d46b03a 	or	r3,r3,r21
    66f4:	1880042e 	bgeu	r3,r2,6708 <__umoddi3+0x240>
    66f8:	1cc7883a 	add	r3,r3,r19
    66fc:	1cc00236 	bltu	r3,r19,6708 <__umoddi3+0x240>
    6700:	1880012e 	bgeu	r3,r2,6708 <__umoddi3+0x240>
    6704:	1cc7883a 	add	r3,r3,r19
    6708:	18a1c83a 	sub	r16,r3,r2
    670c:	b00b883a 	mov	r5,r22
    6710:	8009883a 	mov	r4,r16
    6714:	00007000 	call	700 <__umodsi3>
    6718:	1023883a 	mov	r17,r2
    671c:	b00b883a 	mov	r5,r22
    6720:	8009883a 	mov	r4,r16
    6724:	000069c0 	call	69c <__udivsi3>
    6728:	8822943a 	slli	r17,r17,16
    672c:	b80b883a 	mov	r5,r23
    6730:	1009883a 	mov	r4,r2
    6734:	00007580 	call	758 <__mulsi3>
    6738:	a53fffcc 	andi	r20,r20,65535
    673c:	a446b03a 	or	r3,r20,r17
    6740:	18bfac2e 	bgeu	r3,r2,65f4 <__alt_mem_Onchip_SRAM+0xf80065f4>
    6744:	003fa706 	br	65e4 <__alt_mem_Onchip_SRAM+0xf80065e4>
    6748:	2005883a 	mov	r2,r4
    674c:	2807883a 	mov	r3,r5
    6750:	dfc00c17 	ldw	ra,48(sp)
    6754:	df000b17 	ldw	fp,44(sp)
    6758:	ddc00a17 	ldw	r23,40(sp)
    675c:	dd800917 	ldw	r22,36(sp)
    6760:	dd400817 	ldw	r21,32(sp)
    6764:	dd000717 	ldw	r20,28(sp)
    6768:	dcc00617 	ldw	r19,24(sp)
    676c:	dc800517 	ldw	r18,20(sp)
    6770:	dc400417 	ldw	r17,16(sp)
    6774:	dc000317 	ldw	r16,12(sp)
    6778:	dec00d04 	addi	sp,sp,52
    677c:	f800283a 	ret
    6780:	04c03fc4 	movi	r19,255
    6784:	99c9803a 	cmpltu	r4,r19,r7
    6788:	200890fa 	slli	r4,r4,3
    678c:	003fa406 	br	6620 <__alt_mem_Onchip_SRAM+0xf8006620>
    6790:	00803fc4 	movi	r2,255
    6794:	14c5803a 	cmpltu	r2,r2,r19
    6798:	100490fa 	slli	r2,r2,3
    679c:	003fbc06 	br	6690 <__alt_mem_Onchip_SRAM+0xf8006690>
    67a0:	00804034 	movhi	r2,256
    67a4:	10bfffc4 	addi	r2,r2,-1
    67a8:	1180a636 	bltu	r2,r6,6a44 <__umoddi3+0x57c>
    67ac:	01000404 	movi	r4,16
    67b0:	003f5c06 	br	6524 <__alt_mem_Onchip_SRAM+0xf8006524>
    67b4:	3d0e983a 	sll	r7,r7,r20
    67b8:	34ead83a 	srl	r21,r6,r19
    67bc:	8cc6d83a 	srl	r3,r17,r19
    67c0:	8d10983a 	sll	r8,r17,r20
    67c4:	3d6ab03a 	or	r21,r7,r21
    67c8:	a82cd43a 	srli	r22,r21,16
    67cc:	84e2d83a 	srl	r17,r16,r19
    67d0:	1809883a 	mov	r4,r3
    67d4:	b00b883a 	mov	r5,r22
    67d8:	8a22b03a 	or	r17,r17,r8
    67dc:	3524983a 	sll	r18,r6,r20
    67e0:	dc400015 	stw	r17,0(sp)
    67e4:	d8c00115 	stw	r3,4(sp)
    67e8:	00007000 	call	700 <__umodsi3>
    67ec:	d8c00117 	ldw	r3,4(sp)
    67f0:	b00b883a 	mov	r5,r22
    67f4:	1039883a 	mov	fp,r2
    67f8:	1809883a 	mov	r4,r3
    67fc:	000069c0 	call	69c <__udivsi3>
    6800:	adffffcc 	andi	r23,r21,65535
    6804:	100b883a 	mov	r5,r2
    6808:	b809883a 	mov	r4,r23
    680c:	1023883a 	mov	r17,r2
    6810:	00007580 	call	758 <__mulsi3>
    6814:	d9400017 	ldw	r5,0(sp)
    6818:	e008943a 	slli	r4,fp,16
    681c:	8520983a 	sll	r16,r16,r20
    6820:	2806d43a 	srli	r3,r5,16
    6824:	1906b03a 	or	r3,r3,r4
    6828:	1880042e 	bgeu	r3,r2,683c <__umoddi3+0x374>
    682c:	1d47883a 	add	r3,r3,r21
    6830:	893fffc4 	addi	r4,r17,-1
    6834:	1d40892e 	bgeu	r3,r21,6a5c <__umoddi3+0x594>
    6838:	2023883a 	mov	r17,r4
    683c:	18b9c83a 	sub	fp,r3,r2
    6840:	b00b883a 	mov	r5,r22
    6844:	e009883a 	mov	r4,fp
    6848:	00007000 	call	700 <__umodsi3>
    684c:	b00b883a 	mov	r5,r22
    6850:	e009883a 	mov	r4,fp
    6854:	d8800215 	stw	r2,8(sp)
    6858:	000069c0 	call	69c <__udivsi3>
    685c:	100b883a 	mov	r5,r2
    6860:	b809883a 	mov	r4,r23
    6864:	102d883a 	mov	r22,r2
    6868:	00007580 	call	758 <__mulsi3>
    686c:	d9800217 	ldw	r6,8(sp)
    6870:	d8c00017 	ldw	r3,0(sp)
    6874:	300c943a 	slli	r6,r6,16
    6878:	1a3fffcc 	andi	r8,r3,65535
    687c:	4190b03a 	or	r8,r8,r6
    6880:	4080042e 	bgeu	r8,r2,6894 <__umoddi3+0x3cc>
    6884:	4551883a 	add	r8,r8,r21
    6888:	b0ffffc4 	addi	r3,r22,-1
    688c:	45406f2e 	bgeu	r8,r21,6a4c <__umoddi3+0x584>
    6890:	182d883a 	mov	r22,r3
    6894:	880e943a 	slli	r7,r17,16
    6898:	9006d43a 	srli	r3,r18,16
    689c:	91bfffcc 	andi	r6,r18,65535
    68a0:	3dacb03a 	or	r22,r7,r22
    68a4:	b02ed43a 	srli	r23,r22,16
    68a8:	b5bfffcc 	andi	r22,r22,65535
    68ac:	300b883a 	mov	r5,r6
    68b0:	b009883a 	mov	r4,r22
    68b4:	40a3c83a 	sub	r17,r8,r2
    68b8:	d8c00115 	stw	r3,4(sp)
    68bc:	d9800215 	stw	r6,8(sp)
    68c0:	00007580 	call	758 <__mulsi3>
    68c4:	d9800217 	ldw	r6,8(sp)
    68c8:	b809883a 	mov	r4,r23
    68cc:	1039883a 	mov	fp,r2
    68d0:	300b883a 	mov	r5,r6
    68d4:	00007580 	call	758 <__mulsi3>
    68d8:	d8c00117 	ldw	r3,4(sp)
    68dc:	b809883a 	mov	r4,r23
    68e0:	d8800215 	stw	r2,8(sp)
    68e4:	180b883a 	mov	r5,r3
    68e8:	00007580 	call	758 <__mulsi3>
    68ec:	d8c00117 	ldw	r3,4(sp)
    68f0:	b009883a 	mov	r4,r22
    68f4:	102f883a 	mov	r23,r2
    68f8:	180b883a 	mov	r5,r3
    68fc:	00007580 	call	758 <__mulsi3>
    6900:	d9800217 	ldw	r6,8(sp)
    6904:	e006d43a 	srli	r3,fp,16
    6908:	1185883a 	add	r2,r2,r6
    690c:	1885883a 	add	r2,r3,r2
    6910:	1180022e 	bgeu	r2,r6,691c <__umoddi3+0x454>
    6914:	00c00074 	movhi	r3,1
    6918:	b8ef883a 	add	r23,r23,r3
    691c:	1006d43a 	srli	r3,r2,16
    6920:	1004943a 	slli	r2,r2,16
    6924:	e73fffcc 	andi	fp,fp,65535
    6928:	1dc7883a 	add	r3,r3,r23
    692c:	1739883a 	add	fp,r2,fp
    6930:	88c03a36 	bltu	r17,r3,6a1c <__umoddi3+0x554>
    6934:	88c05126 	beq	r17,r3,6a7c <__umoddi3+0x5b4>
    6938:	88c9c83a 	sub	r4,r17,r3
    693c:	e00f883a 	mov	r7,fp
    6940:	81cfc83a 	sub	r7,r16,r7
    6944:	81c7803a 	cmpltu	r3,r16,r7
    6948:	20c7c83a 	sub	r3,r4,r3
    694c:	1cc4983a 	sll	r2,r3,r19
    6950:	3d0ed83a 	srl	r7,r7,r20
    6954:	1d06d83a 	srl	r3,r3,r20
    6958:	11c4b03a 	or	r2,r2,r7
    695c:	003f7c06 	br	6750 <__alt_mem_Onchip_SRAM+0xf8006750>
    6960:	9ca6983a 	sll	r19,r19,r18
    6964:	88f8d83a 	srl	fp,r17,r3
    6968:	80c4d83a 	srl	r2,r16,r3
    696c:	982cd43a 	srli	r22,r19,16
    6970:	8ca2983a 	sll	r17,r17,r18
    6974:	e009883a 	mov	r4,fp
    6978:	b00b883a 	mov	r5,r22
    697c:	146ab03a 	or	r21,r2,r17
    6980:	00007000 	call	700 <__umodsi3>
    6984:	b00b883a 	mov	r5,r22
    6988:	e009883a 	mov	r4,fp
    698c:	1029883a 	mov	r20,r2
    6990:	9dffffcc 	andi	r23,r19,65535
    6994:	000069c0 	call	69c <__udivsi3>
    6998:	b809883a 	mov	r4,r23
    699c:	100b883a 	mov	r5,r2
    69a0:	00007580 	call	758 <__mulsi3>
    69a4:	a008943a 	slli	r4,r20,16
    69a8:	a806d43a 	srli	r3,r21,16
    69ac:	84a8983a 	sll	r20,r16,r18
    69b0:	1906b03a 	or	r3,r3,r4
    69b4:	1880042e 	bgeu	r3,r2,69c8 <__umoddi3+0x500>
    69b8:	1cc7883a 	add	r3,r3,r19
    69bc:	1cc00236 	bltu	r3,r19,69c8 <__umoddi3+0x500>
    69c0:	1880012e 	bgeu	r3,r2,69c8 <__umoddi3+0x500>
    69c4:	1cc7883a 	add	r3,r3,r19
    69c8:	18a3c83a 	sub	r17,r3,r2
    69cc:	b00b883a 	mov	r5,r22
    69d0:	8809883a 	mov	r4,r17
    69d4:	00007000 	call	700 <__umodsi3>
    69d8:	b00b883a 	mov	r5,r22
    69dc:	8809883a 	mov	r4,r17
    69e0:	1021883a 	mov	r16,r2
    69e4:	000069c0 	call	69c <__udivsi3>
    69e8:	100b883a 	mov	r5,r2
    69ec:	b809883a 	mov	r4,r23
    69f0:	8020943a 	slli	r16,r16,16
    69f4:	00007580 	call	758 <__mulsi3>
    69f8:	a8ffffcc 	andi	r3,r21,65535
    69fc:	1c06b03a 	or	r3,r3,r16
    6a00:	1880042e 	bgeu	r3,r2,6a14 <__umoddi3+0x54c>
    6a04:	1cc7883a 	add	r3,r3,r19
    6a08:	1cc00236 	bltu	r3,r19,6a14 <__umoddi3+0x54c>
    6a0c:	1880012e 	bgeu	r3,r2,6a14 <__umoddi3+0x54c>
    6a10:	1cc7883a 	add	r3,r3,r19
    6a14:	18a3c83a 	sub	r17,r3,r2
    6a18:	003f2906 	br	66c0 <__alt_mem_Onchip_SRAM+0xf80066c0>
    6a1c:	e48fc83a 	sub	r7,fp,r18
    6a20:	1d49c83a 	sub	r4,r3,r21
    6a24:	e1f9803a 	cmpltu	fp,fp,r7
    6a28:	2739c83a 	sub	fp,r4,fp
    6a2c:	8f09c83a 	sub	r4,r17,fp
    6a30:	003fc306 	br	6940 <__alt_mem_Onchip_SRAM+0xf8006940>
    6a34:	01000604 	movi	r4,24
    6a38:	003ef906 	br	6620 <__alt_mem_Onchip_SRAM+0xf8006620>
    6a3c:	00800604 	movi	r2,24
    6a40:	003f1306 	br	6690 <__alt_mem_Onchip_SRAM+0xf8006690>
    6a44:	01000604 	movi	r4,24
    6a48:	003eb606 	br	6524 <__alt_mem_Onchip_SRAM+0xf8006524>
    6a4c:	40bf902e 	bgeu	r8,r2,6890 <__alt_mem_Onchip_SRAM+0xf8006890>
    6a50:	b5bfff84 	addi	r22,r22,-2
    6a54:	4551883a 	add	r8,r8,r21
    6a58:	003f8e06 	br	6894 <__alt_mem_Onchip_SRAM+0xf8006894>
    6a5c:	18bf762e 	bgeu	r3,r2,6838 <__alt_mem_Onchip_SRAM+0xf8006838>
    6a60:	8c7fff84 	addi	r17,r17,-2
    6a64:	1d47883a 	add	r3,r3,r21
    6a68:	003f7406 	br	683c <__alt_mem_Onchip_SRAM+0xf800683c>
    6a6c:	1cc7883a 	add	r3,r3,r19
    6a70:	003ecd06 	br	65a8 <__alt_mem_Onchip_SRAM+0xf80065a8>
    6a74:	8005883a 	mov	r2,r16
    6a78:	003ef806 	br	665c <__alt_mem_Onchip_SRAM+0xf800665c>
    6a7c:	873fe736 	bltu	r16,fp,6a1c <__alt_mem_Onchip_SRAM+0xf8006a1c>
    6a80:	e00f883a 	mov	r7,fp
    6a84:	0009883a 	mov	r4,zero
    6a88:	003fad06 	br	6940 <__alt_mem_Onchip_SRAM+0xf8006940>

00006a8c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    6a8c:	defffd04 	addi	sp,sp,-12
    6a90:	df000215 	stw	fp,8(sp)
    6a94:	df000204 	addi	fp,sp,8
    6a98:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    6a9c:	0001883a 	nop
    6aa0:	e0bfff17 	ldw	r2,-4(fp)
    6aa4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    6aa8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    6aac:	10000226 	beq	r2,zero,6ab8 <_exit+0x2c>
    ALT_SIM_FAIL();
    6ab0:	002af070 	cmpltui	zero,zero,43969
    6ab4:	00000106 	br	6abc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    6ab8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    6abc:	003fff06 	br	6abc <__alt_mem_Onchip_SRAM+0xf8006abc>
